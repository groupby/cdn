{"version":3,"file":"gbi-event-counter-0.1.13-dev.min.js","sources":["../src/lib/location-observer/location-observer.ts","../src/lib/event-sender/event-sender.ts","../src/gbi-universal-event-tracker/gbi-universal-event-tracker.ts","../src/index.ts"],"sourcesContent":["import type { LocationChangeListener, LocationObserver } from './types.ts';\n\nlet _instance: LocationObserver;\nlet _listeners: LocationChangeListener[] = [];\n\nconst handleLocationChange = () => {\n  const location = window.location;\n  _listeners.forEach((listener) => {\n    listener(location);\n  });\n};\n\nconst subscribe = (callback: LocationChangeListener) => {\n  _listeners.push(callback);\n  return () => {\n    _listeners = _listeners.filter((listener) => listener !== callback);\n  };\n};\n\nconst init = () => {\n  _instance = {\n    subscribe,\n  };\n\n  window.addEventListener('popstate', handleLocationChange);\n  /*\n    window.addEventListener('popstate', function(event) {\n      // This function will be called whenever the browser's history changes\n      // You can access the new URL from event.state or document.location\n      const newURL = event.state || document.location;\n      console.log('Location changed to: ' + newURL);\n    });\n  */\n};\n\nexport const registerLocationObserver = (): LocationObserver => {\n  if (!_instance) {\n    init();\n  }\n  return _instance;\n};\n\nexport default registerLocationObserver;\n","import { EventSender, EventSenderOptions } from './types.ts';\nimport { GBITrackerEvent } from '@/lib/types.ts';\n\nlet _instance: EventSender;\nlet _customerId: string;\nconst _url = 'https://www.gbi-not-defined.com';\n\nconst send = async (event: GBITrackerEvent) => {\n  // Default options are marked with *\n  const response = await fetch(_url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ customer: _customerId, event }), // body data type must match \"Content-Type\" header\n  });\n  return response.json(); // parses JSON response into native JavaScript objects\n};\n\nconst init = (options: EventSenderOptions) => {\n  _customerId = options.customerId;\n  _instance = {\n    send,\n  };\n};\n\nexport const registerEventSender = (\n  options: EventSenderOptions,\n): EventSender => {\n  if (!_instance) {\n    init(options);\n  }\n  return _instance;\n};\n\nexport default registerEventSender;\n","// export const libName = GBI__LIB_NAME;\n// export const libVersion = GBI__LIB_VERSION;\n//\n// export default {\n//   libName,\n//   libVersion\n// };\n\nimport {\n  GBIUniversalEventTracker,\n  GBIUniversalEventTrackerOptions,\n} from './types.ts';\n\nimport {\n  type LocationObserver,\n  registerLocationObserver,\n} from '@/lib/location-observer';\nimport type { GBITrackerEvent } from '@/lib/types.ts';\nimport { type EventSender, registerEventSender } from '@/lib/event-sender';\n\nlet _tracker: GBIUniversalEventTracker;\nlet _customerId: string;\n/** if false, the tracker will not add the listener to the history state and track for SPAs */\nlet _listenToPushState: boolean;\n/** optionally override the url this posts to. Default endpoint TBD */\nlet _overrideUrl: string | null;\n\nlet _locationObserver: LocationObserver;\nlet _eventSender: EventSender;\n\nconst trackEvent = (event?: GBITrackerEvent) => {\n  console.log('customerId:', _customerId);\n  console.log('listenToPushState:', _listenToPushState);\n  console.log('overrideUrl:', _overrideUrl ?? '-');\n  console.log('eventType:', event?.type ?? '-');\n  console.log('metadata:', event?.metadata ? 'metadata exists' : '-');\n  _eventSender.send({\n    type: event?.type ?? 'other',\n    metadata: event?.metadata ?? {\n      message: `Sending an event... for \"${_customerId}\" customer`,\n    },\n  });\n};\n\nconst init = (options: GBIUniversalEventTrackerOptions) => {\n  const { customerId, listenToPushState, overrideUrl } = options;\n  _customerId = customerId;\n  _listenToPushState = listenToPushState ?? false;\n  _overrideUrl = overrideUrl ?? null;\n\n  _eventSender = registerEventSender({ customerId });\n\n  _tracker = {\n    trackEvent,\n  };\n  if (listenToPushState) {\n    _locationObserver = registerLocationObserver();\n    _locationObserver.subscribe((location) => {\n      _tracker.trackEvent({\n        type: 'location-changed',\n        metadata: { location },\n      });\n    });\n  }\n};\n\nexport const registerGBIUniversalEventTracker = (\n  options: GBIUniversalEventTrackerOptions,\n): GBIUniversalEventTracker => {\n  if (!_tracker) {\n    init(options);\n  }\n  return _tracker;\n};\n","import { registerGBIUniversalEventTracker } from './gbi-universal-event-tracker';\n\nexport type {\n  GBIUniversalEventTracker,\n  GBIUniversalEventTrackerOptions,\n} from './gbi-universal-event-tracker';\n\nexport type { GBITrackerEvent } from './lib/types.ts';\n\nexport default {\n  registerGBIUniversalEventTracker,\n};\n"],"names":["_instance","_listeners","handleLocationChange","location","listener","subscribe","callback","init","registerLocationObserver","_customerId","_url","send","event","options","registerEventSender","_tracker","_listenToPushState","_overrideUrl","_locationObserver","_eventSender","trackEvent","customerId","listenToPushState","overrideUrl"],"mappings":"gOAEA,IAAIA,EACAC,EAAuC,CAAA,EAE3C,MAAMC,EAAuB,IAAM,CACjC,MAAMC,EAAW,OAAO,SACbF,EAAA,QAASG,GAAa,CAC/BA,EAASD,CAAQ,CAAA,CAClB,CACH,EAEME,EAAaC,IACjBL,EAAW,KAAKK,CAAQ,EACjB,IAAM,CACXL,EAAaA,EAAW,OAAQG,GAAaA,IAAaE,CAAQ,CAAA,GAIhEC,EAAO,IAAM,CACLP,EAAA,CACV,UAAAK,CAAA,EAGK,OAAA,iBAAiB,WAAYH,CAAoB,CAS1D,EAEaM,EAA2B,KACjCR,GACEO,IAEAP,GCpCT,IAAIA,EACAS,EACJ,MAAMC,EAAO,kCAEPC,EAAO,MAAOC,IAED,MAAM,MAAMF,EAAM,CACjC,OAAQ,OACR,QAAS,CACP,eAAgB,kBAClB,EACA,KAAM,KAAK,UAAU,CAAE,SAAUD,EAAa,MAAAG,EAAO,CAAA,CACtD,GACe,OAGZL,EAAQM,GAAgC,CAC5CJ,EAAcI,EAAQ,WACVb,EAAA,CACV,KAAAW,CAAA,CAEJ,EAEaG,EACXD,IAEKb,GACHO,EAAKM,CAAO,EAEPb,GCZT,IAAIe,EACAN,EAEAO,EAEAC,EAEAC,EACAC,EAEJ,MAAMC,EAAcR,GAA4B,CACtC,QAAA,IAAI,cAAeH,CAAW,EAC9B,QAAA,IAAI,qBAAsBO,CAAkB,EAC5C,QAAA,IAAI,eAAgBC,GAAgB,GAAG,EAC/C,QAAQ,IAAI,cAAcL,GAAA,YAAAA,EAAO,OAAQ,GAAG,EAC5C,QAAQ,IAAI,YAAaA,GAAA,MAAAA,EAAO,SAAW,kBAAoB,GAAG,EAClEO,EAAa,KAAK,CAChB,MAAMP,GAAA,YAAAA,EAAO,OAAQ,QACrB,UAAUA,GAAA,YAAAA,EAAO,WAAY,CAC3B,QAAS,4BAA4BH,CAAW,YAClD,CAAA,CACD,CACH,EAEMF,EAAQM,GAA6C,CACzD,KAAM,CAAE,WAAAQ,EAAY,kBAAAC,EAAmB,YAAAC,CAAA,EAAgBV,EACzCJ,EAAAY,EACdL,EAAqBM,GAAqB,GAC1CL,EAAeM,GAAe,KAEfJ,EAAAL,EAAoB,CAAE,WAAAO,CAAA,CAAY,EAEtCN,EAAA,CACT,WAAAK,CAAA,EAEEE,IACFJ,EAAoBV,EAAyB,EAC3BU,EAAA,UAAWf,GAAa,CACxCY,EAAS,WAAW,CAClB,KAAM,mBACN,SAAU,CAAE,SAAAZ,CAAS,CAAA,CACtB,CAAA,CACF,EAEL,QCvDe,CACb,iCDyDAU,IAEKE,GACHR,EAAKM,CAAO,EAEPE,EC7DT"}