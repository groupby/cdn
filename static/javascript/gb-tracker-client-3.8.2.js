/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./dist/core.js":
/*!**********************!*\
  !*** ./dist/core.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar cuid_1 = __importDefault(__webpack_require__(/*! cuid */ \"./node_modules/cuid/index.js\"));\n\nvar deep_diff_1 = __webpack_require__(/*! deep-diff */ \"./node_modules/deep-diff/index.js\");\n\nvar cookies_js_1 = __importDefault(__webpack_require__(/*! cookies-js */ \"./node_modules/cookies-js/dist/cookies.js\"));\n\nvar schema_inspector_1 = __importDefault(__webpack_require__(/*! schema-inspector */ \"./node_modules/schema-inspector/index.js\"));\n\nvar utils_1 = __webpack_require__(/*! ./utils */ \"./dist/utils/index.js\");\n\nvar version_1 = __webpack_require__(/*! ./version */ \"./dist/version.js\");\n\nfunction TrackerCore(schemas, sanitizeEvent) {\n  var __MAX_PATH_LENGTH = 4000; // Thanks NGINX\n\n  var __MAX_PATHNAME_LENGTH = 100; // '/v2/pixel/?random=0.5405421565044588&m=' plus extra for luck\n\n  function TrackerCtr(customerId, area, overridePixelUrl) {\n    if (area === void 0) {\n      area = 'Production';\n    } // Setting up customer\n\n\n    if (typeof customerId !== 'string' || customerId.length === 0) {\n      throw new Error('customerId must be a string with length');\n    }\n\n    var internals = {\n      SET_FROM_COOKIES: 'setFromCookies',\n      NOT_SET_FROM_COOKIES: 'notSetFromCookies',\n      DEBUG_COOKIE_KEY: 'gbi_debug',\n      SESSION_COOKIE_KEY: 'gbi_sessionId',\n      VISITOR_COOKIE_KEY: 'gbi_visitorId',\n      SESSION_TIMEOUT_SEC: 30 * 60,\n      VERSION: version_1.version,\n      VISITOR_TIMEOUT_SEC: 60 * 60 * 24 * 365 * 10,\n      SCHEMAS: schemas,\n      SANITIZE_EVENT: sanitizeEvent,\n      // Info on path length limitations: http://stackoverflow.com/a/812962\n      MAX_PATH_LENGTH: __MAX_PATH_LENGTH,\n      MAX_PATHNAME_LENGTH: __MAX_PATHNAME_LENGTH,\n      COOKIES_LIB: cookies_js_1.default,\n      CUSTOMER_ID: customerId,\n      AREA: area,\n      CUSTOMER: {\n        id: customerId,\n        area: area\n      },\n      VISIT: {\n        customerData: {}\n      },\n      INVALID_EVENT_CALLBACK: undefined,\n      STRICT_MODE: false,\n      WARNINGS_DISABLED: false,\n      OVERRIDEN_PIXEL_URL: overridePixelUrl,\n      VISITOR_SETTINGS_SOURCE: undefined,\n      MAX_QUERY_STRING_LENGTH: __MAX_PATH_LENGTH - __MAX_PATHNAME_LENGTH,\n      IGNORED_FIELD_PREFIXES: ['search.records.[].allMeta', 'search.template.zones'],\n      overrideCookiesLib: function (cookies) {\n        internals.COOKIES_LIB = cookies;\n      },\n      overridePixelPath: function (path) {\n        internals.OVERRIDEN_PIXEL_URL = path;\n      },\n\n      /**\n       * Take event, convert to string, split by max length, and send along with uuid and customer info\n       * @param event The event to send.\n       */\n      sendEvent: function (event) {\n        if (event && event.eventType === 'sessionChange') {\n          // This event is deprecated\n          return;\n        }\n\n        if (window.GROUPBY_BEACON_DEBUG || internals.COOKIES_LIB.get(internals.DEBUG_COOKIE_KEY)) {\n          console.log(\"Beaconing event: \" + JSON.stringify(event, null, 2));\n        }\n\n        var protocol = internals.getProtocol(document);\n        var host = protocol + \"//\" + customerId + \".groupbycloud.com\";\n        var path = \"/wisdom/v2/pixel\";\n        var url;\n\n        if (internals.OVERRIDEN_PIXEL_URL && typeof internals.OVERRIDEN_PIXEL_URL === 'string' && internals.OVERRIDEN_PIXEL_URL.length > 0) {\n          url = internals.OVERRIDEN_PIXEL_URL;\n        } else {\n          url = host + path;\n        }\n\n        var oReq = new XMLHttpRequest();\n        oReq.open(\"POST\", url); // Prevent the need for CORS pre-flight OPTIONS requests by overriding Content-Type from\n        // application/json to text/plain. Server understands this was done and parses accordingly.\n\n        oReq.setRequestHeader('Content-Type', 'text/plain');\n        oReq.send(JSON.stringify(event));\n      },\n\n      /**\n       * Helper to prepare, validate, and send event\n       * @param event\n       * @param eventType\n       */\n      prepareAndSendEvent: function (event, eventType) {\n        var fullEvent = that.prepareEvent(event, eventType);\n        var schema = internals.SCHEMAS[eventType];\n        var validated = internals.validateEvent(fullEvent, schema || {});\n\n        if (validated && validated.event) {\n          internals.sendEvent(validated.event);\n        } else {\n          if (internals.INVALID_EVENT_CALLBACK) {\n            internals.INVALID_EVENT_CALLBACK(fullEvent, validated.error);\n          }\n        }\n      },\n\n      /**\n       * Based on the schema provided, validate an event for sending to the tracker endpoint\n       * @param event\n       * @param eventSchemas\n       */\n      validateEvent: function (event, eventSchemas) {\n        var sanitizedEvent = utils_1.deepCopy(event);\n        internals.SANITIZE_EVENT(sanitizedEvent, eventSchemas.sanitization || {});\n        var result = schema_inspector_1.default.validate(eventSchemas.validation || {}, sanitizedEvent);\n\n        if (!result.valid) {\n          console.error(\"error while processing event: \" + result.format());\n          return {\n            event: undefined,\n            error: result.format()\n          };\n        }\n\n        if (!sanitizedEvent.visit) {\n          sanitizedEvent.visit = {};\n        }\n\n        if (!sanitizedEvent.visit.generated) {\n          sanitizedEvent.visit.generated = {};\n        }\n\n        var removedFields = internals.getRemovedFields(sanitizedEvent, event);\n\n        if (removedFields.length > 0) {\n          if (internals.STRICT_MODE) {\n            throw new Error(\"Unexpected fields \" + JSON.stringify(removedFields) + \" in eventType: \" + sanitizedEvent.eventType);\n          }\n\n          if (!sanitizedEvent.metadata) {\n            sanitizedEvent.metadata = [];\n          }\n\n          for (var _i = 0, removedFields_1 = removedFields; _i < removedFields_1.length; _i++) {\n            var removedField = removedFields_1[_i];\n\n            if (!internals.WARNINGS_DISABLED) {\n              console.warn(\"unexpected field: \" + removedField + \" is being dropped from eventType: \" + sanitizedEvent.eventType);\n            }\n\n            sanitizedEvent.metadata.push({\n              key: 'gbi-field-warning',\n              value: removedField\n            });\n          }\n        }\n\n        sanitizedEvent.visit.generated.uri = typeof window !== 'undefined' && window.location ? window.location.href : '';\n        sanitizedEvent.visit.generated.timezoneOffset = new Date().getTimezoneOffset();\n        sanitizedEvent.visit.generated.localTime = new Date().toISOString();\n\n        if (document && document.referrer) {\n          sanitizedEvent.visit.generated.referer = document.referrer;\n        }\n\n        return {\n          event: sanitizedEvent\n        };\n      },\n\n      /**\n       * Compared the sanitized event to the original, and return an object containing the properties that were removed.\n       * @param sanitizedEvent\n       * @param originalEvent\n       * @returns {*}\n       */\n      getRemovedFields: function (sanitizedEvent, originalEvent) {\n        var allDifferences = deep_diff_1.diff(sanitizedEvent, originalEvent);\n        var removedFields = [];\n\n        if (!allDifferences) {\n          return removedFields;\n        }\n\n        for (var _i = 0, allDifferences_1 = allDifferences; _i < allDifferences_1.length; _i++) {\n          var difference = allDifferences_1[_i];\n\n          if (!difference || !difference.path) {\n            continue;\n          }\n\n          for (var j = 0; j < difference.path.length; j++) {\n            if (typeof difference.path[j] === 'number') {\n              // Remove array indices\n              difference.path[j] = '[]';\n            }\n          }\n\n          if (difference.kind === 'N') {\n            if (!difference.path) {\n              continue;\n            }\n\n            var fieldName = difference.path.join('.');\n\n            if (!utils_1.startsWithOneOf(fieldName, internals.IGNORED_FIELD_PREFIXES)) {\n              removedFields.push(fieldName);\n            }\n          }\n        }\n\n        return utils_1.getUnique(removedFields);\n      },\n      getProtocol: function (document) {\n        var protocol = document && document.location && document.location.protocol; // Only allowed protocols. Default to https\n\n        if (protocol !== 'http:' && protocol !== 'https:') {\n          return 'https:';\n        }\n\n        return protocol;\n      }\n    };\n    var that = {\n      __getInternals: function () {\n        return internals;\n      },\n      disableWarnings: function () {\n        internals.WARNINGS_DISABLED = true;\n      },\n      enableWarnings: function () {\n        internals.WARNINGS_DISABLED = false;\n      },\n\n      /**\n       * Update visitor and session id's during login/logout\n       * @param visitorId\n       * @param sessionId\n       */\n      setVisitor: function (visitorId, sessionId) {\n        if (internals.VISITOR_SETTINGS_SOURCE && internals.VISITOR_SETTINGS_SOURCE !== internals.NOT_SET_FROM_COOKIES) {\n          console.log('visitorId and sessionId already set using autoSetVisitor(). Ignoring setVisitor()');\n          return;\n        }\n\n        internals.VISITOR_SETTINGS_SOURCE = internals.NOT_SET_FROM_COOKIES;\n        visitorId = visitorId && typeof visitorId === 'number' ? \"\" + visitorId : visitorId;\n        sessionId = sessionId && typeof sessionId === 'number' ? \"\" + sessionId : sessionId;\n\n        if (typeof visitorId !== 'string' || visitorId.length === 0) {\n          throw new Error('visitorId must be a string with length');\n        }\n\n        if (typeof sessionId !== 'string' || sessionId.length === 0) {\n          throw new Error('sessionId must be a string with length');\n        }\n\n        internals.VISIT.customerData.visitorId = visitorId;\n        internals.VISIT.customerData.sessionId = sessionId;\n      },\n\n      /**\n       * Initialize visitor data from cookies, or create those cookies if they do not exist\n       * @param loginId\n       */\n      autoSetVisitor: function (loginId) {\n        if (internals.VISITOR_SETTINGS_SOURCE && internals.VISITOR_SETTINGS_SOURCE !== internals.SET_FROM_COOKIES) {\n          console.log('visitorId and sessionId already set using setVisitor(). Overriding setVisitor()');\n        }\n\n        if (loginId && typeof loginId !== 'string') {\n          throw new Error('if loginId is provided, it must be a string');\n        }\n\n        internals.VISITOR_SETTINGS_SOURCE = internals.SET_FROM_COOKIES;\n\n        if (loginId && loginId.length > 0) {\n          internals.VISIT.customerData.loginId = loginId;\n        } else {\n          delete internals.VISIT.customerData.loginId;\n        }\n\n        internals.VISIT.customerData.sessionId = internals.COOKIES_LIB.get(internals.SESSION_COOKIE_KEY);\n        internals.VISIT.customerData.visitorId = internals.COOKIES_LIB.get(internals.VISITOR_COOKIE_KEY);\n\n        if (!internals.VISIT.customerData.sessionId || internals.VISIT.customerData.sessionId.length < 1) {\n          internals.VISIT.customerData.sessionId = cuid_1.default();\n        }\n\n        internals.COOKIES_LIB.set(internals.SESSION_COOKIE_KEY, internals.VISIT.customerData.sessionId, {\n          expires: internals.SESSION_TIMEOUT_SEC\n        });\n\n        if (!internals.VISIT.customerData.visitorId || internals.VISIT.customerData.visitorId.length < 1) {\n          internals.VISIT.customerData.visitorId = cuid_1.default();\n        }\n\n        internals.COOKIES_LIB.set(internals.VISITOR_COOKIE_KEY, internals.VISIT.customerData.visitorId, {\n          expires: internals.VISITOR_TIMEOUT_SEC\n        });\n      },\n      getVisitorId: function () {\n        return internals.VISIT.customerData.visitorId;\n      },\n      getSessionId: function () {\n        return internals.VISIT.customerData.sessionId;\n      },\n      getLoginId: function () {\n        return internals.VISIT.customerData.loginId;\n      },\n      setStrictMode: function (strict) {\n        internals.STRICT_MODE = strict;\n      },\n\n      /**\n       * Append eventType, customer, and visit to event\n       * @param event\n       * @param type\n       */\n      prepareEvent: function (event, type) {\n        // Continuously initialize visitor info in order to keep sessionId from expiring\n        if (internals.VISITOR_SETTINGS_SOURCE === internals.SET_FROM_COOKIES) {\n          that.autoSetVisitor(internals.VISIT.customerData.loginId);\n        }\n\n        if (!internals.VISIT.customerData.sessionId || !internals.VISIT.customerData.visitorId) {\n          throw new Error('call autoSetVisitor() at least once before an event is sent');\n        }\n\n        event.clientVersion = {\n          raw: internals.VERSION\n        };\n        event.eventType = type;\n        event.customer = internals.CUSTOMER;\n        event.visit = internals.VISIT;\n        return event;\n      },\n\n      /**\n       * Set callback to be notified of invalid events\n       * @param callback\n       */\n      setInvalidEventCallback: function (callback) {\n        if (typeof callback !== 'function') {\n          throw new Error('invalid event callback must be a function');\n        }\n\n        internals.INVALID_EVENT_CALLBACK = callback;\n      },\n\n      /**\n       * Validate and send addToCart event\n       * @param event\n       */\n      sendAddToCartEvent: function (event) {\n        internals.prepareAndSendEvent(event, 'addToCart');\n      },\n\n      /**\n       * Validate and send viewCart event\n       * @param event\n       */\n      sendViewCartEvent: function (event) {\n        internals.prepareAndSendEvent(event, 'viewCart');\n      },\n\n      /**\n       * Validate and send removeFromCart event\n       * @param event\n       */\n      sendRemoveFromCartEvent: function (event) {\n        internals.prepareAndSendEvent(event, 'removeFromCart');\n      },\n\n      /**\n       * Validate and send order event\n       * @param event\n       */\n      sendOrderEvent: function (event) {\n        internals.prepareAndSendEvent(event, 'order');\n      },\n\n      /**\n       * Validate and send search event\n       * @param event\n       */\n      sendSearchEvent: function (event) {\n        internals.prepareAndSendEvent(event, 'search');\n      },\n\n      /**\n       * Validate and send search event\n       * @param event\n       */\n      sendAutoSearchEvent: function (event) {\n        internals.prepareAndSendEvent(event, 'autoSearch');\n      },\n\n      /**\n       * Validate and send moreRefinements event\n       * @param event\n       */\n      sendMoreRefinementsEvent: function (event) {\n        internals.prepareAndSendEvent(event, 'autoMoreRefinements');\n      },\n\n      /**\n       * Validate and send viewProduct event\n       * @param event\n       */\n      sendViewProductEvent: function (event) {\n        internals.prepareAndSendEvent(event, 'viewProduct');\n      },\n\n      /**\n       * Validate and send variationGroup event\n       * @param event\n       */\n      sendVariationGroupEvent: function (event) {\n        internals.prepareAndSendEvent(event, 'variationGroup');\n      }\n    };\n    return that;\n  }\n\n  TrackerCtr.VERSION = version_1.version;\n  return TrackerCtr;\n}\n\nvar TrackerCoreFinal = TrackerCore;\nexports.TrackerCore = TrackerCoreFinal;\n\n//# sourceURL=webpack:///./dist/core.js?");

/***/ }),

/***/ "./dist/index.js":
/*!***********************!*\
  !*** ./dist/index.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * This file contains the constructor for the full tracker.\n */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar schema_inspector_1 = __importDefault(__webpack_require__(/*! schema-inspector */ \"./node_modules/schema-inspector/index.js\"));\n\nvar addToCart_1 = __importDefault(__webpack_require__(/*! ./schemas/addToCart */ \"./dist/schemas/addToCart.js\"));\n\nvar viewCart_1 = __importDefault(__webpack_require__(/*! ./schemas/viewCart */ \"./dist/schemas/viewCart.js\"));\n\nvar removeFromCart_1 = __importDefault(__webpack_require__(/*! ./schemas/removeFromCart */ \"./dist/schemas/removeFromCart.js\"));\n\nvar order_1 = __importDefault(__webpack_require__(/*! ./schemas/order */ \"./dist/schemas/order.js\"));\n\nvar autoSearch_1 = __importDefault(__webpack_require__(/*! ./schemas/autoSearch */ \"./dist/schemas/autoSearch.js\"));\n\nvar autoMoreRefinements_1 = __importDefault(__webpack_require__(/*! ./schemas/autoMoreRefinements */ \"./dist/schemas/autoMoreRefinements.js\"));\n\nvar search_1 = __importDefault(__webpack_require__(/*! ./schemas/search */ \"./dist/schemas/search.js\"));\n\nvar viewProduct_1 = __importDefault(__webpack_require__(/*! ./schemas/viewProduct */ \"./dist/schemas/viewProduct.js\"));\n\nvar core_1 = __webpack_require__(/*! ./core */ \"./dist/core.js\");\n\nvar models_1 = __webpack_require__(/*! ./models */ \"./dist/models.js\");\n\nvar SCHEMAS = {\n  addToCart: {\n    sanitization: addToCart_1.default.sanitization,\n    validation: addToCart_1.default.validation\n  },\n  viewCart: {\n    sanitization: viewCart_1.default.sanitization,\n    validation: viewCart_1.default.validation\n  },\n  removeFromCart: {\n    sanitization: removeFromCart_1.default.sanitization,\n    validation: removeFromCart_1.default.validation\n  },\n  order: {\n    sanitization: order_1.default.sanitization,\n    validation: order_1.default.validation\n  },\n  autoSearch: {\n    sanitization: autoSearch_1.default.sanitization,\n    validation: autoSearch_1.default.validation\n  },\n  autoMoreRefinements: {\n    sanitization: autoMoreRefinements_1.default.sanitization,\n    validation: autoMoreRefinements_1.default.validation\n  },\n  search: {\n    sanitization: search_1.default.sanitization,\n    validation: search_1.default.validation\n  },\n  viewProduct: {\n    sanitization: viewProduct_1.default.sanitization,\n    validation: viewProduct_1.default.validation\n  },\n  variationGroup: {\n    sanitization: models_1.variationGroupEventSan,\n    validation: models_1.variationGroupEventVal\n  }\n};\n/**\n * Based on the schema provided, sanitize the event\n * @param event\n * @param sanitization\n */\n\nvar sanitizeEvent = function (event, sanitization) {\n  schema_inspector_1.default.sanitize(sanitization, event);\n}; // Full variant has sanitization and validation.\n\n\nmodule.exports = core_1.TrackerCore(SCHEMAS, sanitizeEvent);\n\n//# sourceURL=webpack:///./dist/index.js?");

/***/ }),

/***/ "./dist/models.js":
/*!************************!*\
  !*** ./dist/models.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * This file contains types exported for consuming libraries. Normally this\n * would be exported from the library root, but for legacy reasons, the full\n * tracker is currently exported from the library root. Therefore, consumers\n * importing from the library root will have a large bundle size. Therefore,\n * the types are here instead so that consumers can import them without causing\n * a large bundle size.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar constants_1 = __webpack_require__(/*! @groupby/beacon-models/constants */ \"./node_modules/@groupby/beacon-models/constants/index.js\");\n\nvar schema_1 = __webpack_require__(/*! @groupby/beacon-models/partials/metadata/schema */ \"./node_modules/@groupby/beacon-models/partials/metadata/schema.js\");\n\n;\n;\n/**\n * The sanitization code for the VariationGroup event. If you are sending a\n * beacon, you don't need to import this from your application. Import the type\n * \"VariationGroupEvent\" for your application.\n */\n\nexports.variationGroupEventSan = {\n  type: 'object',\n  properties: {\n    variation: {\n      type: 'object',\n      strict: true,\n      properties: {\n        type: {\n          type: 'string',\n          maxLength: constants_1.MAX_STR_LENGTH,\n          rules: ['trim']\n        },\n        groupName: {\n          type: 'string',\n          maxLength: constants_1.MAX_STR_LENGTH,\n          rules: ['trim']\n        }\n      }\n    },\n    metadata: schema_1.sanitization\n  }\n};\n/**\n * The validation code for the VariationGroup event. If you are sending a\n * beacon, you don't need to import this from your application. Import the type\n * \"VariationGroupEvent\" for your application.\n */\n\nexports.variationGroupEventVal = {\n  type: 'object',\n  properties: {\n    variation: {\n      type: 'object',\n      properties: {\n        type: {\n          type: 'string',\n          minLength: 1,\n          optional: false\n        },\n        groupName: {\n          type: 'string',\n          minLength: 1,\n          optional: false\n        }\n      },\n      optional: false\n    },\n    metadata: schema_1.validation\n  }\n};\n\n//# sourceURL=webpack:///./dist/models.js?");

/***/ }),

/***/ "./dist/schemas/addToCart.js":
/*!***********************************!*\
  !*** ./dist/schemas/addToCart.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils = __webpack_require__(/*! ./utils */ \"./dist/schemas/utils.js\");\n\nvar BLACKLIST_STRIPING_REGEX = utils.regex.BLACKLIST_STRIPING_REGEX;\nexports.default = {\n  validation: {\n    type: 'object',\n    strict: true,\n    properties: {\n      cart: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string',\n            optional: true\n          },\n          items: {\n            type: 'array',\n            items: {\n              type: 'object',\n              strict: true,\n              properties: {\n                category: {\n                  type: 'string',\n                  optional: true\n                },\n                collection: {\n                  type: 'string',\n                  optional: false\n                },\n                title: {\n                  type: 'string',\n                  optional: false\n                },\n                sku: {\n                  type: 'string',\n                  optional: true\n                },\n                productId: {\n                  type: 'string',\n                  optional: false\n                },\n                parentId: {\n                  type: 'string',\n                  optional: true\n                },\n                margin: {\n                  type: 'number',\n                  optional: true\n                },\n                price: {\n                  type: 'number',\n                  optional: true\n                },\n                quantity: {\n                  type: 'integer',\n                  optional: false\n                },\n                metadata: {\n                  type: 'array',\n                  optional: true,\n                  items: {\n                    strict: true,\n                    type: 'object',\n                    properties: {\n                      key: {\n                        type: 'string'\n                      },\n                      value: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          metadata: {\n            type: 'array',\n            optional: true,\n            items: {\n              strict: true,\n              type: 'object',\n              properties: {\n                key: {\n                  type: 'string'\n                },\n                value: {\n                  type: 'string'\n                }\n              }\n            }\n          }\n        }\n      },\n      clientVersion: {\n        type: 'object',\n        strict: true,\n        properties: {\n          raw: {\n            type: 'string'\n          },\n          version: {\n            type: 'string',\n            optional: true\n          },\n          prerelease: {\n            type: 'array',\n            optional: true,\n            items: {\n              type: 'string'\n            }\n          },\n          build: {\n            type: 'array',\n            optional: true,\n            items: {\n              type: 'string'\n            }\n          },\n          major: {\n            type: 'integer',\n            optional: true\n          },\n          minor: {\n            type: 'integer',\n            optional: true\n          },\n          patch: {\n            type: 'integer',\n            optional: true\n          }\n        }\n      },\n      customer: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string'\n          },\n          area: {\n            type: 'string',\n            optional: false\n          }\n        }\n      },\n      eventType: {\n        type: 'string'\n      },\n      metadata: {\n        type: 'array',\n        optional: true,\n        items: {\n          strict: true,\n          type: 'object',\n          properties: {\n            key: {\n              type: 'string'\n            },\n            value: {\n              type: 'string'\n            }\n          }\n        }\n      },\n      visit: {\n        type: 'object',\n        strict: true,\n        properties: {\n          customerData: {\n            type: 'object',\n            strict: true,\n            properties: {\n              visitorId: {\n                type: 'string'\n              },\n              sessionId: {\n                type: 'string'\n              },\n              loginId: {\n                type: 'string',\n                optional: true\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  sanitization: {\n    type: 'object',\n    strict: true,\n    properties: {\n      cart: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower'],\n            optional: true\n          },\n          items: {\n            type: 'array',\n            items: {\n              type: 'object',\n              strict: true,\n              properties: {\n                category: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim', 'lower'],\n                  optional: true\n                },\n                collection: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim'],\n                  optional: false,\n                  def: 'default'\n                },\n                title: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim', 'lower']\n                },\n                sku: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim'],\n                  optional: true\n                },\n                productId: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim']\n                },\n                parentId: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim'],\n                  optional: true\n                },\n                margin: {\n                  type: 'number',\n                  optional: true\n                },\n                price: {\n                  type: 'number',\n                  optional: true\n                },\n                quantity: {\n                  type: 'integer'\n                },\n                metadata: {\n                  type: 'array',\n                  optional: true,\n                  items: {\n                    strict: true,\n                    type: 'object',\n                    properties: {\n                      key: {\n                        type: 'string',\n                        rules: ['trim', 'lower'],\n                        maxLength: 10000\n                      },\n                      value: {\n                        type: 'string',\n                        rules: ['trim', 'lower'],\n                        maxLength: 10000\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          metadata: {\n            type: 'array',\n            optional: true,\n            items: {\n              strict: true,\n              type: 'object',\n              properties: {\n                key: {\n                  type: 'string',\n                  rules: ['trim', 'lower'],\n                  maxLength: 10000\n                },\n                value: {\n                  type: 'string',\n                  rules: ['trim', 'lower'],\n                  maxLength: 10000\n                }\n              }\n            }\n          }\n        }\n      },\n      clientVersion: {\n        type: 'object',\n        strict: true,\n        properties: {\n          raw: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          },\n          version: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower'],\n            optional: true\n          },\n          prerelease: {\n            type: 'array',\n            maxLength: 1000,\n            items: {\n              maxLength: 10000,\n              rules: ['trim', 'lower']\n            },\n            optional: true\n          },\n          build: {\n            type: 'array',\n            maxLength: 1000,\n            items: {\n              maxLength: 10000,\n              rules: ['trim', 'lower']\n            },\n            optional: true\n          },\n          major: {\n            type: 'integer',\n            optional: true\n          },\n          minor: {\n            type: 'integer',\n            optional: true\n          },\n          patch: {\n            type: 'integer',\n            optional: true\n          }\n        }\n      },\n      customer: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          },\n          area: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim'],\n            optional: false,\n            def: 'Production'\n          }\n        }\n      },\n      eventType: {\n        type: 'string',\n        maxLength: 10000,\n        rules: ['trim']\n      },\n      metadata: {\n        type: 'array',\n        optional: true,\n        items: {\n          strict: true,\n          type: 'object',\n          properties: {\n            key: {\n              type: 'string',\n              rules: ['trim', 'lower'],\n              maxLength: 10000\n            },\n            value: {\n              type: 'string',\n              rules: ['trim', 'lower'],\n              maxLength: 10000\n            }\n          }\n        }\n      },\n      visit: {\n        type: 'object',\n        strict: true,\n        properties: {\n          customerData: {\n            type: 'object',\n            strict: true,\n            properties: {\n              visitorId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              sessionId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              loginId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\n//# sourceURL=webpack:///./dist/schemas/addToCart.js?");

/***/ }),

/***/ "./dist/schemas/autoMoreRefinements.js":
/*!*********************************************!*\
  !*** ./dist/schemas/autoMoreRefinements.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils = __webpack_require__(/*! ./utils */ \"./dist/schemas/utils.js\");\n\nvar BLACKLIST_STRIPING_REGEX = utils.regex.BLACKLIST_STRIPING_REGEX;\nexports.default = {\n  validation: {\n    type: 'object',\n    strict: true,\n    properties: {\n      eventType: {\n        type: 'string'\n      },\n      clientVersion: {\n        type: 'object',\n        strict: true,\n        properties: {\n          raw: {\n            type: 'string'\n          },\n          version: {\n            type: 'string',\n            optional: true\n          },\n          prerelease: {\n            type: 'array',\n            optional: true,\n            items: {\n              type: 'string'\n            }\n          },\n          build: {\n            type: 'array',\n            optional: true,\n            items: {\n              type: 'string'\n            }\n          },\n          major: {\n            type: 'integer',\n            optional: true\n          },\n          minor: {\n            type: 'integer',\n            optional: true\n          },\n          patch: {\n            type: 'integer',\n            optional: true\n          }\n        }\n      },\n      customer: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string'\n          },\n          area: {\n            type: 'string',\n            optional: false\n          }\n        }\n      },\n      visit: {\n        type: 'object',\n        strict: true,\n        properties: {\n          customerData: {\n            type: 'object',\n            strict: true,\n            properties: {\n              visitorId: {\n                type: 'string'\n              },\n              sessionId: {\n                type: 'string'\n              },\n              loginId: {\n                type: 'string',\n                optional: true\n              }\n            }\n          }\n        }\n      },\n      metadata: {\n        type: 'array',\n        optional: true,\n        items: {\n          strict: true,\n          type: 'object',\n          properties: {\n            key: {\n              type: 'string'\n            },\n            value: {\n              type: 'string'\n            }\n          }\n        }\n      },\n      moreRefinements: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string',\n            optional: false,\n            minLength: 1\n          }\n        }\n      }\n    }\n  },\n  sanitization: {\n    type: 'object',\n    strict: true,\n    properties: {\n      clientVersion: {\n        type: 'object',\n        strict: true,\n        properties: {\n          raw: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          },\n          version: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower'],\n            optional: true\n          },\n          prerelease: {\n            type: 'array',\n            maxLength: 1000,\n            items: {\n              maxLength: 10000,\n              rules: ['trim', 'lower']\n            },\n            optional: true\n          },\n          build: {\n            type: 'array',\n            maxLength: 1000,\n            items: {\n              maxLength: 10000,\n              rules: ['trim', 'lower']\n            },\n            optional: true\n          },\n          major: {\n            type: 'integer',\n            optional: true\n          },\n          minor: {\n            type: 'integer',\n            optional: true\n          },\n          patch: {\n            type: 'integer',\n            optional: true\n          }\n        }\n      },\n      customer: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          },\n          area: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim'],\n            optional: false,\n            def: 'Production'\n          }\n        }\n      },\n      eventType: {\n        type: 'string',\n        maxLength: 10000,\n        rules: ['trim']\n      },\n      metadata: {\n        type: 'array',\n        optional: true,\n        items: {\n          strict: true,\n          type: 'object',\n          properties: {\n            key: {\n              type: 'string',\n              rules: ['trim', 'lower'],\n              maxLength: 10000\n            },\n            value: {\n              type: 'string',\n              rules: ['trim', 'lower'],\n              maxLength: 10000\n            }\n          }\n        }\n      },\n      moreRefinements: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string',\n            optional: false,\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          }\n        }\n      },\n      visit: {\n        type: 'object',\n        strict: true,\n        properties: {\n          customerData: {\n            type: 'object',\n            strict: true,\n            properties: {\n              visitorId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              sessionId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              loginId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\n//# sourceURL=webpack:///./dist/schemas/autoMoreRefinements.js?");

/***/ }),

/***/ "./dist/schemas/autoSearch.js":
/*!************************************!*\
  !*** ./dist/schemas/autoSearch.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils = __webpack_require__(/*! ./utils */ \"./dist/schemas/utils.js\");\n\nvar BLACKLIST_STRIPING_REGEX = utils.regex.BLACKLIST_STRIPING_REGEX;\nexports.default = {\n  validation: {\n    type: 'object',\n    strict: true,\n    properties: {\n      clientVersion: {\n        type: 'object',\n        strict: true,\n        properties: {\n          raw: {\n            type: 'string'\n          },\n          version: {\n            type: 'string',\n            optional: true\n          },\n          prerelease: {\n            type: 'array',\n            optional: true,\n            items: {\n              type: 'string'\n            }\n          },\n          build: {\n            type: 'array',\n            optional: true,\n            items: {\n              type: 'string'\n            }\n          },\n          major: {\n            type: 'integer',\n            optional: true\n          },\n          minor: {\n            type: 'integer',\n            optional: true\n          },\n          patch: {\n            type: 'integer',\n            optional: true\n          }\n        }\n      },\n      customer: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string'\n          },\n          area: {\n            type: 'string',\n            optional: false\n          }\n        }\n      },\n      eventType: {\n        type: 'string'\n      },\n      metadata: {\n        type: 'array',\n        optional: true,\n        items: {\n          strict: true,\n          type: 'object',\n          properties: {\n            key: {\n              type: 'string'\n            },\n            value: {\n              type: 'string'\n            }\n          }\n        }\n      },\n      responseId: {\n        type: 'string',\n        optional: true\n      },\n      search: {\n        type: 'object',\n        optional: false,\n        strict: true,\n        properties: {\n          origin: {\n            type: 'object',\n            optional: false,\n            strict: true,\n            properties: {\n              autosearch: {\n                type: 'boolean',\n                optional: false\n              },\n              collectionSwitcher: {\n                type: 'boolean',\n                optional: false\n              },\n              dym: {\n                type: 'boolean',\n                optional: false\n              },\n              navigation: {\n                type: 'boolean',\n                optional: false\n              },\n              recommendations: {\n                type: 'boolean',\n                optional: false\n              },\n              sayt: {\n                type: 'boolean',\n                optional: false\n              },\n              search: {\n                type: 'boolean',\n                optional: false\n              }\n            }\n          },\n          id: {\n            type: 'string',\n            optional: false,\n            minLength: 1\n          }\n        }\n      },\n      visit: {\n        type: 'object',\n        strict: true,\n        properties: {\n          customerData: {\n            type: 'object',\n            strict: true,\n            properties: {\n              visitorId: {\n                type: 'string'\n              },\n              sessionId: {\n                type: 'string'\n              },\n              loginId: {\n                type: 'string',\n                optional: true\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  sanitization: {\n    type: 'object',\n    strict: true,\n    properties: {\n      clientVersion: {\n        type: 'object',\n        strict: true,\n        properties: {\n          raw: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          },\n          version: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower'],\n            optional: true\n          },\n          prerelease: {\n            type: 'array',\n            maxLength: 1000,\n            items: {\n              maxLength: 10000,\n              rules: ['trim', 'lower']\n            },\n            optional: true\n          },\n          build: {\n            type: 'array',\n            maxLength: 1000,\n            items: {\n              maxLength: 10000,\n              rules: ['trim', 'lower']\n            },\n            optional: true\n          },\n          major: {\n            type: 'integer',\n            optional: true\n          },\n          minor: {\n            type: 'integer',\n            optional: true\n          },\n          patch: {\n            type: 'integer',\n            optional: true\n          }\n        }\n      },\n      customer: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          },\n          area: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim'],\n            optional: false,\n            def: 'Production'\n          }\n        }\n      },\n      eventType: {\n        type: 'string',\n        maxLength: 10000,\n        rules: ['trim']\n      },\n      metadata: {\n        type: 'array',\n        optional: true,\n        items: {\n          strict: true,\n          type: 'object',\n          properties: {\n            key: {\n              type: 'string',\n              rules: ['trim', 'lower'],\n              maxLength: 10000\n            },\n            value: {\n              type: 'string',\n              rules: ['trim', 'lower'],\n              maxLength: 10000\n            }\n          }\n        }\n      },\n      responseId: {\n        type: 'string',\n        optional: true,\n        maxLength: 10000,\n        rules: ['trim', 'lower']\n      },\n      search: {\n        type: 'object',\n        strict: true,\n        properties: {\n          origin: {\n            type: 'object',\n            strict: true,\n            properties: {\n              autosearch: {\n                type: 'boolean',\n                optional: false,\n                def: false\n              },\n              collectionSwitcher: {\n                type: 'boolean',\n                optional: false,\n                def: false\n              },\n              dym: {\n                type: 'boolean',\n                optional: false,\n                def: false\n              },\n              navigation: {\n                type: 'boolean',\n                optional: false,\n                def: false\n              },\n              recommendations: {\n                type: 'boolean',\n                optional: false,\n                def: false\n              },\n              sayt: {\n                type: 'boolean',\n                optional: false,\n                def: false\n              },\n              search: {\n                type: 'boolean',\n                optional: false,\n                def: false\n              }\n            }\n          },\n          id: {\n            type: 'string',\n            optional: false,\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          }\n        }\n      },\n      visit: {\n        type: 'object',\n        strict: true,\n        properties: {\n          customerData: {\n            type: 'object',\n            strict: true,\n            properties: {\n              visitorId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              sessionId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              loginId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\n//# sourceURL=webpack:///./dist/schemas/autoSearch.js?");

/***/ }),

/***/ "./dist/schemas/order.js":
/*!*******************************!*\
  !*** ./dist/schemas/order.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils = __webpack_require__(/*! ./utils */ \"./dist/schemas/utils.js\");\n\nvar BLACKLIST_STRIPING_REGEX = utils.regex.BLACKLIST_STRIPING_REGEX;\nexports.default = {\n  validation: {\n    type: 'object',\n    strict: true,\n    properties: {\n      cart: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string',\n            optional: true\n          },\n          items: {\n            type: 'array',\n            items: {\n              type: 'object',\n              strict: true,\n              properties: {\n                category: {\n                  type: 'string',\n                  optional: true\n                },\n                collection: {\n                  type: 'string',\n                  optional: false\n                },\n                title: {\n                  type: 'string',\n                  optional: false\n                },\n                sku: {\n                  type: 'string',\n                  optional: true\n                },\n                productId: {\n                  type: 'string',\n                  optional: false\n                },\n                parentId: {\n                  type: 'string',\n                  optional: true\n                },\n                margin: {\n                  type: 'number',\n                  optional: true\n                },\n                price: {\n                  type: 'number',\n                  optional: true\n                },\n                quantity: {\n                  type: 'integer',\n                  optional: false\n                },\n                metadata: {\n                  type: 'array',\n                  optional: true,\n                  items: {\n                    strict: true,\n                    type: 'object',\n                    properties: {\n                      key: {\n                        type: 'string'\n                      },\n                      value: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          metadata: {\n            type: 'array',\n            optional: true,\n            items: {\n              strict: true,\n              type: 'object',\n              properties: {\n                key: {\n                  type: 'string'\n                },\n                value: {\n                  type: 'string'\n                }\n              }\n            }\n          }\n        }\n      },\n      clientVersion: {\n        type: 'object',\n        strict: true,\n        properties: {\n          raw: {\n            type: 'string'\n          },\n          version: {\n            type: 'string',\n            optional: true\n          },\n          prerelease: {\n            type: 'array',\n            optional: true,\n            items: {\n              type: 'string'\n            }\n          },\n          build: {\n            type: 'array',\n            optional: true,\n            items: {\n              type: 'string'\n            }\n          },\n          major: {\n            type: 'integer',\n            optional: true\n          },\n          minor: {\n            type: 'integer',\n            optional: true\n          },\n          patch: {\n            type: 'integer',\n            optional: true\n          }\n        }\n      },\n      customer: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string'\n          },\n          area: {\n            type: 'string',\n            optional: false\n          }\n        }\n      },\n      eventType: {\n        type: 'string'\n      },\n      metadata: {\n        type: 'array',\n        optional: true,\n        items: {\n          strict: true,\n          type: 'object',\n          properties: {\n            key: {\n              type: 'string'\n            },\n            value: {\n              type: 'string'\n            }\n          }\n        }\n      },\n      visit: {\n        type: 'object',\n        strict: true,\n        properties: {\n          customerData: {\n            type: 'object',\n            strict: true,\n            properties: {\n              visitorId: {\n                type: 'string'\n              },\n              sessionId: {\n                type: 'string'\n              },\n              loginId: {\n                type: 'string',\n                optional: true\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  sanitization: {\n    type: 'object',\n    strict: true,\n    properties: {\n      cart: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower'],\n            optional: true\n          },\n          items: {\n            type: 'array',\n            items: {\n              type: 'object',\n              strict: true,\n              properties: {\n                category: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim', 'lower'],\n                  optional: true\n                },\n                collection: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim'],\n                  optional: false,\n                  def: 'default'\n                },\n                title: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim', 'lower']\n                },\n                sku: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim'],\n                  optional: true\n                },\n                productId: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim']\n                },\n                parentId: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim'],\n                  optional: true\n                },\n                margin: {\n                  type: 'number',\n                  optional: true\n                },\n                price: {\n                  type: 'number',\n                  optional: true\n                },\n                quantity: {\n                  type: 'integer'\n                },\n                metadata: {\n                  type: 'array',\n                  optional: true,\n                  items: {\n                    strict: true,\n                    type: 'object',\n                    properties: {\n                      key: {\n                        type: 'string',\n                        rules: ['trim', 'lower'],\n                        maxLength: 10000\n                      },\n                      value: {\n                        type: 'string',\n                        rules: ['trim', 'lower'],\n                        maxLength: 10000\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          metadata: {\n            type: 'array',\n            optional: true,\n            items: {\n              strict: true,\n              type: 'object',\n              properties: {\n                key: {\n                  type: 'string',\n                  rules: ['trim', 'lower'],\n                  maxLength: 10000\n                },\n                value: {\n                  type: 'string',\n                  rules: ['trim', 'lower'],\n                  maxLength: 10000\n                }\n              }\n            }\n          }\n        }\n      },\n      clientVersion: {\n        type: 'object',\n        strict: true,\n        properties: {\n          raw: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          },\n          version: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower'],\n            optional: true\n          },\n          prerelease: {\n            type: 'array',\n            maxLength: 1000,\n            items: {\n              maxLength: 10000,\n              rules: ['trim', 'lower']\n            },\n            optional: true\n          },\n          build: {\n            type: 'array',\n            maxLength: 1000,\n            items: {\n              maxLength: 10000,\n              rules: ['trim', 'lower']\n            },\n            optional: true\n          },\n          major: {\n            type: 'integer',\n            optional: true\n          },\n          minor: {\n            type: 'integer',\n            optional: true\n          },\n          patch: {\n            type: 'integer',\n            optional: true\n          }\n        }\n      },\n      customer: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          },\n          area: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim'],\n            optional: false,\n            def: 'Production'\n          }\n        }\n      },\n      eventType: {\n        type: 'string',\n        maxLength: 10000,\n        rules: ['trim']\n      },\n      metadata: {\n        type: 'array',\n        optional: true,\n        items: {\n          strict: true,\n          type: 'object',\n          properties: {\n            key: {\n              type: 'string',\n              rules: ['trim', 'lower'],\n              maxLength: 10000\n            },\n            value: {\n              type: 'string',\n              rules: ['trim', 'lower'],\n              maxLength: 10000\n            }\n          }\n        }\n      },\n      visit: {\n        type: 'object',\n        strict: true,\n        properties: {\n          customerData: {\n            type: 'object',\n            strict: true,\n            properties: {\n              visitorId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              sessionId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              loginId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\n//# sourceURL=webpack:///./dist/schemas/order.js?");

/***/ }),

/***/ "./dist/schemas/removeFromCart.js":
/*!****************************************!*\
  !*** ./dist/schemas/removeFromCart.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils = __webpack_require__(/*! ./utils */ \"./dist/schemas/utils.js\");\n\nvar BLACKLIST_STRIPING_REGEX = utils.regex.BLACKLIST_STRIPING_REGEX;\nexports.default = {\n  validation: {\n    type: 'object',\n    strict: true,\n    properties: {\n      cart: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string',\n            optional: true\n          },\n          items: {\n            type: 'array',\n            items: {\n              type: 'object',\n              strict: true,\n              properties: {\n                category: {\n                  type: 'string',\n                  optional: true\n                },\n                collection: {\n                  type: 'string',\n                  optional: false\n                },\n                title: {\n                  type: 'string',\n                  optional: false\n                },\n                sku: {\n                  type: 'string',\n                  optional: true\n                },\n                productId: {\n                  type: 'string',\n                  optional: false\n                },\n                parentId: {\n                  type: 'string',\n                  optional: true\n                },\n                margin: {\n                  type: 'number',\n                  optional: true\n                },\n                price: {\n                  type: 'number',\n                  optional: true\n                },\n                quantity: {\n                  type: 'integer',\n                  optional: false\n                },\n                metadata: {\n                  type: 'array',\n                  optional: true,\n                  items: {\n                    strict: true,\n                    type: 'object',\n                    properties: {\n                      key: {\n                        type: 'string'\n                      },\n                      value: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          metadata: {\n            type: 'array',\n            optional: true,\n            items: {\n              strict: true,\n              type: 'object',\n              properties: {\n                key: {\n                  type: 'string'\n                },\n                value: {\n                  type: 'string'\n                }\n              }\n            }\n          }\n        }\n      },\n      clientVersion: {\n        type: 'object',\n        strict: true,\n        properties: {\n          raw: {\n            type: 'string'\n          },\n          version: {\n            type: 'string',\n            optional: true\n          },\n          prerelease: {\n            type: 'array',\n            optional: true,\n            items: {\n              type: 'string'\n            }\n          },\n          build: {\n            type: 'array',\n            optional: true,\n            items: {\n              type: 'string'\n            }\n          },\n          major: {\n            type: 'integer',\n            optional: true\n          },\n          minor: {\n            type: 'integer',\n            optional: true\n          },\n          patch: {\n            type: 'integer',\n            optional: true\n          }\n        }\n      },\n      customer: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string'\n          },\n          area: {\n            type: 'string',\n            optional: false\n          }\n        }\n      },\n      eventType: {\n        type: 'string'\n      },\n      metadata: {\n        type: 'array',\n        optional: true,\n        items: {\n          strict: true,\n          type: 'object',\n          properties: {\n            key: {\n              type: 'string'\n            },\n            value: {\n              type: 'string'\n            }\n          }\n        }\n      },\n      visit: {\n        type: 'object',\n        strict: true,\n        properties: {\n          customerData: {\n            type: 'object',\n            strict: true,\n            properties: {\n              visitorId: {\n                type: 'string'\n              },\n              sessionId: {\n                type: 'string'\n              },\n              loginId: {\n                type: 'string',\n                optional: true\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  sanitization: {\n    type: 'object',\n    strict: true,\n    properties: {\n      cart: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower'],\n            optional: true\n          },\n          items: {\n            type: 'array',\n            items: {\n              type: 'object',\n              strict: true,\n              properties: {\n                category: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim', 'lower'],\n                  optional: true\n                },\n                collection: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim'],\n                  optional: false,\n                  def: 'default'\n                },\n                title: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim', 'lower']\n                },\n                sku: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim'],\n                  optional: true\n                },\n                productId: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim']\n                },\n                parentId: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim'],\n                  optional: true\n                },\n                margin: {\n                  type: 'number',\n                  optional: true\n                },\n                price: {\n                  type: 'number',\n                  optional: true\n                },\n                quantity: {\n                  type: 'integer'\n                },\n                metadata: {\n                  type: 'array',\n                  optional: true,\n                  items: {\n                    strict: true,\n                    type: 'object',\n                    properties: {\n                      key: {\n                        type: 'string',\n                        rules: ['trim', 'lower'],\n                        maxLength: 10000\n                      },\n                      value: {\n                        type: 'string',\n                        rules: ['trim', 'lower'],\n                        maxLength: 10000\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          metadata: {\n            type: 'array',\n            optional: true,\n            items: {\n              strict: true,\n              type: 'object',\n              properties: {\n                key: {\n                  type: 'string',\n                  rules: ['trim', 'lower'],\n                  maxLength: 10000\n                },\n                value: {\n                  type: 'string',\n                  rules: ['trim', 'lower'],\n                  maxLength: 10000\n                }\n              }\n            }\n          }\n        }\n      },\n      clientVersion: {\n        type: 'object',\n        strict: true,\n        properties: {\n          raw: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          },\n          version: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower'],\n            optional: true\n          },\n          prerelease: {\n            type: 'array',\n            maxLength: 1000,\n            items: {\n              maxLength: 10000,\n              rules: ['trim', 'lower']\n            },\n            optional: true\n          },\n          build: {\n            type: 'array',\n            maxLength: 1000,\n            items: {\n              maxLength: 10000,\n              rules: ['trim', 'lower']\n            },\n            optional: true\n          },\n          major: {\n            type: 'integer',\n            optional: true\n          },\n          minor: {\n            type: 'integer',\n            optional: true\n          },\n          patch: {\n            type: 'integer',\n            optional: true\n          }\n        }\n      },\n      customer: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          },\n          area: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim'],\n            optional: false,\n            def: 'Production'\n          }\n        }\n      },\n      eventType: {\n        type: 'string',\n        maxLength: 10000,\n        rules: ['trim']\n      },\n      metadata: {\n        type: 'array',\n        optional: true,\n        items: {\n          strict: true,\n          type: 'object',\n          properties: {\n            key: {\n              type: 'string',\n              rules: ['trim', 'lower'],\n              maxLength: 10000\n            },\n            value: {\n              type: 'string',\n              rules: ['trim', 'lower'],\n              maxLength: 10000\n            }\n          }\n        }\n      },\n      visit: {\n        type: 'object',\n        strict: true,\n        properties: {\n          customerData: {\n            type: 'object',\n            strict: true,\n            properties: {\n              visitorId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              sessionId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              loginId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\n//# sourceURL=webpack:///./dist/schemas/removeFromCart.js?");

/***/ }),

/***/ "./dist/schemas/search.js":
/*!********************************!*\
  !*** ./dist/schemas/search.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils = __webpack_require__(/*! ./utils */ \"./dist/schemas/utils.js\");\n\nvar BLACKLIST_STRIPING_REGEX = utils.regex.BLACKLIST_STRIPING_REGEX;\nexports.default = {\n  validation: {\n    type: 'object',\n    strict: true,\n    properties: {\n      clientVersion: {\n        type: 'object',\n        strict: true,\n        properties: {\n          raw: {\n            type: 'string'\n          },\n          version: {\n            type: 'string',\n            optional: true\n          },\n          prerelease: {\n            type: 'array',\n            optional: true,\n            items: {\n              type: 'string'\n            }\n          },\n          build: {\n            type: 'array',\n            optional: true,\n            items: {\n              type: 'string'\n            }\n          },\n          major: {\n            type: 'integer',\n            optional: true\n          },\n          minor: {\n            type: 'integer',\n            optional: true\n          },\n          patch: {\n            type: 'integer',\n            optional: true\n          }\n        }\n      },\n      customer: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string'\n          },\n          area: {\n            type: 'string',\n            optional: false\n          }\n        }\n      },\n      eventType: {\n        type: 'string'\n      },\n      metadata: {\n        type: 'array',\n        optional: true,\n        items: {\n          strict: true,\n          type: 'object',\n          properties: {\n            key: {\n              type: 'string'\n            },\n            value: {\n              type: 'string'\n            }\n          }\n        }\n      },\n      responseId: {\n        type: 'string',\n        optional: true\n      },\n      search: {\n        type: 'object',\n        optional: false,\n        strict: true,\n        properties: {\n          origin: {\n            type: 'object',\n            optional: false,\n            strict: true,\n            properties: {\n              autosearch: {\n                type: 'boolean',\n                optional: false\n              },\n              collectionSwitcher: {\n                type: 'boolean',\n                optional: false\n              },\n              dym: {\n                type: 'boolean',\n                optional: false\n              },\n              navigation: {\n                type: 'boolean',\n                optional: false\n              },\n              recommendations: {\n                type: 'boolean',\n                optional: false\n              },\n              sayt: {\n                type: 'boolean',\n                optional: false\n              },\n              search: {\n                type: 'boolean',\n                optional: false\n              }\n            }\n          },\n          id: {\n            type: 'string',\n            optional: true,\n            minLength: 1\n          },\n          totalRecordCount: {\n            type: 'integer',\n            optional: false\n          },\n          area: {\n            type: 'string',\n            optional: true\n          },\n          biasingProfile: {\n            type: 'string',\n            optional: true\n          },\n          query: {\n            type: 'string',\n            optional: false\n          },\n          originalQuery: {\n            type: 'string',\n            optional: true\n          },\n          correctedQuery: {\n            type: 'string',\n            optional: true\n          },\n          warnings: {\n            type: 'array',\n            items: {\n              type: 'string'\n            },\n            optional: true\n          },\n          errors: {\n            type: 'string',\n            optional: true\n          },\n          template: {\n            type: 'object',\n            optional: true,\n            strict: true,\n            properties: {\n              name: {\n                type: 'string',\n                optional: true\n              },\n              ruleName: {\n                type: 'string',\n                optional: true\n              },\n              _id: {\n                type: 'string',\n                optional: true\n              }\n            }\n          },\n          pageInfo: {\n            type: 'object',\n            optional: false,\n            strict: true,\n            properties: {\n              recordStart: {\n                type: 'integer',\n                optional: false\n              },\n              recordEnd: {\n                type: 'integer',\n                optional: false\n              }\n            }\n          },\n          relatedQueries: {\n            type: 'array',\n            items: {\n              type: 'string'\n            },\n            optional: true\n          },\n          rewrites: {\n            type: 'array',\n            items: {\n              type: 'string'\n            },\n            optional: true\n          },\n          redirect: {\n            type: 'string',\n            optional: true\n          },\n          siteParams: {\n            type: 'array',\n            optional: true,\n            strict: true,\n            items: {\n              type: 'object',\n              properties: {\n                key: {\n                  type: 'string',\n                  optional: true\n                },\n                value: {\n                  type: 'string',\n                  optional: true\n                }\n              }\n            }\n          },\n          availableNavigation: {\n            type: 'array',\n            optional: true,\n            strict: true,\n            items: {\n              type: 'object',\n              optional: true,\n              strict: true,\n              properties: {\n                name: {\n                  type: 'string',\n                  optional: false\n                },\n                displayName: {\n                  type: 'string',\n                  optional: true\n                },\n                range: {\n                  type: 'boolean',\n                  optional: true\n                },\n                or: {\n                  type: 'boolean',\n                  optional: true\n                },\n                ignored: {\n                  type: 'boolean',\n                  optional: true\n                },\n                moreRefinements: {\n                  type: 'boolean',\n                  optional: true\n                },\n                _id: {\n                  type: 'string',\n                  optional: true\n                },\n                type: {\n                  type: 'string',\n                  optional: true\n                },\n                refinements: {\n                  type: 'array',\n                  optional: false,\n                  items: {\n                    type: 'object',\n                    strict: true,\n                    properties: {\n                      type: {\n                        type: 'string',\n                        optional: false\n                      },\n                      _id: {\n                        type: 'string',\n                        optional: true\n                      },\n                      count: {\n                        type: 'integer',\n                        optional: true\n                      },\n                      exclude: {\n                        type: 'boolean',\n                        optional: true\n                      },\n                      value: {\n                        type: 'string',\n                        optional: true\n                      },\n                      high: {\n                        type: 'string',\n                        optional: true\n                      },\n                      low: {\n                        type: 'string',\n                        optional: true\n                      }\n                    }\n                  }\n                },\n                metadata: {\n                  type: 'array',\n                  optional: true,\n                  items: {\n                    strict: true,\n                    type: 'object',\n                    properties: {\n                      key: {\n                        type: 'string'\n                      },\n                      value: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          selectedNavigation: {\n            type: 'array',\n            optional: true,\n            strict: true,\n            items: {\n              type: 'object',\n              optional: true,\n              strict: true,\n              properties: {\n                name: {\n                  type: 'string',\n                  optional: false\n                },\n                displayName: {\n                  type: 'string',\n                  optional: true\n                },\n                range: {\n                  type: 'boolean',\n                  optional: true\n                },\n                or: {\n                  type: 'boolean',\n                  optional: true\n                },\n                ignored: {\n                  type: 'boolean',\n                  optional: true\n                },\n                moreRefinements: {\n                  type: 'boolean',\n                  optional: true\n                },\n                _id: {\n                  type: 'string',\n                  optional: true\n                },\n                type: {\n                  type: 'string',\n                  optional: true\n                },\n                refinements: {\n                  type: 'array',\n                  optional: false,\n                  items: {\n                    type: 'object',\n                    strict: true,\n                    properties: {\n                      type: {\n                        type: 'string',\n                        optional: false\n                      },\n                      _id: {\n                        type: 'string',\n                        optional: true\n                      },\n                      count: {\n                        type: 'integer',\n                        optional: true\n                      },\n                      exclude: {\n                        type: 'boolean',\n                        optional: true\n                      },\n                      value: {\n                        type: 'string',\n                        optional: true\n                      },\n                      high: {\n                        type: 'string',\n                        optional: true\n                      },\n                      low: {\n                        type: 'string',\n                        optional: true\n                      }\n                    }\n                  }\n                },\n                metadata: {\n                  type: 'array',\n                  optional: true,\n                  items: {\n                    strict: true,\n                    type: 'object',\n                    properties: {\n                      key: {\n                        type: 'string'\n                      },\n                      value: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          matchStrategy: {\n            type: 'object',\n            optional: true,\n            strict: true,\n            properties: {\n              name: {\n                type: 'string',\n                optional: true\n              },\n              rules: {\n                type: 'array',\n                optional: true,\n                items: {\n                  type: 'object',\n                  strict: true,\n                  properties: {\n                    terms: {\n                      type: 'integer',\n                      optional: true\n                    },\n                    termsGreaterThan: {\n                      type: 'integer',\n                      optional: true\n                    },\n                    mustMatch: {\n                      type: 'integer',\n                      optional: true\n                    },\n                    percentage: {\n                      type: 'boolean',\n                      optional: true\n                    }\n                  }\n                }\n              }\n            }\n          },\n          records: {\n            type: 'array',\n            optional: true,\n            items: {\n              type: 'object',\n              strict: true,\n              properties: {\n                allMeta: {\n                  type: 'object',\n                  optional: true,\n                  strict: true,\n                  properties: {\n                    sku: {\n                      type: 'string',\n                      optional: true\n                    },\n                    productId: {\n                      type: 'string',\n                      optional: true\n                    }\n                  }\n                },\n                refinementMatches: {\n                  type: 'array',\n                  optional: true,\n                  items: {\n                    type: 'object',\n                    strict: true,\n                    properties: {\n                      name: {\n                        type: 'string',\n                        optional: true\n                      },\n                      values: {\n                        type: 'array',\n                        optional: true,\n                        items: {\n                          type: 'object',\n                          strict: true,\n                          properties: {\n                            value: {\n                              type: 'string',\n                              optional: true\n                            },\n                            count: {\n                              type: 'integer',\n                              optional: true\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                },\n                _id: {\n                  type: 'string',\n                  optional: true\n                },\n                _u: {\n                  type: 'string',\n                  optional: true\n                },\n                _t: {\n                  type: 'string',\n                  optional: true\n                },\n                collection: {\n                  type: 'string',\n                  optional: true\n                }\n              }\n            }\n          },\n          didYouMean: {\n            type: 'array',\n            items: {\n              type: 'string'\n            },\n            optional: true\n          },\n          originalRequest: {\n            type: 'object',\n            optional: true,\n            strict: true,\n            properties: {\n              collection: {\n                type: 'string',\n                optional: true\n              },\n              area: {\n                type: 'string',\n                optional: true\n              },\n              sessionId: {\n                type: 'string',\n                optional: true\n              },\n              visitorId: {\n                type: 'string',\n                optional: true\n              },\n              biasingProfile: {\n                type: 'string',\n                optional: true\n              },\n              language: {\n                type: 'string',\n                optional: true\n              },\n              customUrlParams: {\n                type: 'array',\n                optional: true,\n                items: {\n                  type: 'object',\n                  strict: true,\n                  properties: {\n                    key: {\n                      type: 'string',\n                      optional: true\n                    },\n                    value: {\n                      type: 'string',\n                      optional: true\n                    }\n                  }\n                }\n              },\n              query: {\n                type: 'string',\n                optional: true\n              },\n              refinementQuery: {\n                type: 'string',\n                optional: true\n              },\n              matchStrategyName: {\n                type: 'string',\n                optional: true\n              },\n              matchStrategy: {\n                type: 'object',\n                optional: true,\n                strict: true,\n                properties: {\n                  name: {\n                    type: 'string',\n                    optional: true\n                  },\n                  rules: {\n                    type: 'array',\n                    items: {\n                      type: 'object',\n                      optional: true,\n                      strict: true,\n                      properties: {\n                        terms: {\n                          type: 'integer',\n                          optional: true\n                        },\n                        termsGreaterThan: {\n                          type: 'integer',\n                          optional: true\n                        },\n                        mustMatch: {\n                          type: 'integer',\n                          optional: true\n                        },\n                        percentage: {\n                          type: 'boolean',\n                          optional: true\n                        }\n                      }\n                    }\n                  }\n                }\n              },\n              biasing: {\n                type: 'object',\n                optional: true,\n                strict: true,\n                properties: {\n                  bringToTop: {\n                    type: 'array',\n                    items: {\n                      type: 'string'\n                    },\n                    optional: true\n                  },\n                  augmentBiases: {\n                    type: 'boolean',\n                    optional: true\n                  },\n                  influence: {\n                    type: 'number',\n                    optional: true\n                  },\n                  biases: {\n                    type: 'array',\n                    optional: true,\n                    items: {\n                      type: 'object',\n                      strict: true,\n                      properties: {\n                        name: {\n                          type: 'string',\n                          optional: true\n                        },\n                        content: {\n                          type: 'string',\n                          optional: true\n                        },\n                        strength: {\n                          type: 'string',\n                          optional: true\n                        }\n                      }\n                    }\n                  }\n                }\n              },\n              skip: {\n                type: 'integer',\n                optional: true\n              },\n              pageSize: {\n                type: 'integer',\n                optional: true\n              },\n              returnBinary: {\n                type: 'boolean',\n                optional: true\n              },\n              disableAutocorrection: {\n                type: 'boolean',\n                optional: true\n              },\n              pruneRefinements: {\n                type: 'boolean',\n                optional: true\n              },\n              sort: {\n                type: 'array',\n                optional: true,\n                items: {\n                  type: 'object',\n                  strict: true,\n                  properties: {\n                    field: {\n                      type: 'string',\n                      optional: true\n                    },\n                    order: {\n                      type: 'string',\n                      optional: true\n                    }\n                  }\n                }\n              },\n              fields: {\n                type: 'array',\n                optional: true,\n                items: {\n                  type: 'string'\n                }\n              },\n              orFields: {\n                type: 'array',\n                optional: true,\n                items: {\n                  type: 'string'\n                }\n              },\n              wildcardSearchEnabled: {\n                type: 'boolean',\n                optional: true\n              },\n              restrictNavigation: {\n                type: 'object',\n                optional: true,\n                strict: true,\n                properties: {\n                  name: {\n                    type: 'string',\n                    optional: true\n                  },\n                  count: {\n                    type: 'integer',\n                    optional: true\n                  }\n                }\n              },\n              includedNavigations: {\n                type: 'array',\n                optional: true,\n                items: {\n                  type: 'string'\n                }\n              },\n              excludedNavigations: {\n                type: 'array',\n                optional: true,\n                items: {\n                  type: 'string'\n                }\n              },\n              refinements: {\n                type: 'array',\n                optional: true,\n                items: {\n                  type: 'object',\n                  strict: true,\n                  properties: {\n                    navigationName: {\n                      type: 'string',\n                      optional: true\n                    },\n                    type: {\n                      type: 'string',\n                      optional: true\n                    },\n                    _id: {\n                      type: 'string',\n                      optional: true\n                    },\n                    exclude: {\n                      type: 'boolean',\n                      optional: true\n                    },\n                    value: {\n                      type: 'string',\n                      optional: true\n                    },\n                    high: {\n                      type: 'string',\n                      optional: true\n                    },\n                    low: {\n                      type: 'string',\n                      optional: true\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      visit: {\n        type: 'object',\n        strict: true,\n        properties: {\n          customerData: {\n            type: 'object',\n            strict: true,\n            properties: {\n              visitorId: {\n                type: 'string'\n              },\n              sessionId: {\n                type: 'string'\n              },\n              loginId: {\n                type: 'string',\n                optional: true\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  sanitization: {\n    type: 'object',\n    strict: true,\n    properties: {\n      clientVersion: {\n        type: 'object',\n        strict: true,\n        properties: {\n          raw: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          },\n          version: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower'],\n            optional: true\n          },\n          prerelease: {\n            type: 'array',\n            maxLength: 1000,\n            items: {\n              maxLength: 10000,\n              rules: ['trim', 'lower']\n            },\n            optional: true\n          },\n          build: {\n            type: 'array',\n            maxLength: 1000,\n            items: {\n              maxLength: 10000,\n              rules: ['trim', 'lower']\n            },\n            optional: true\n          },\n          major: {\n            type: 'integer',\n            optional: true\n          },\n          minor: {\n            type: 'integer',\n            optional: true\n          },\n          patch: {\n            type: 'integer',\n            optional: true\n          }\n        }\n      },\n      customer: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          },\n          area: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim'],\n            optional: false,\n            def: 'Production'\n          }\n        }\n      },\n      eventType: {\n        type: 'string',\n        maxLength: 10000,\n        rules: ['trim']\n      },\n      metadata: {\n        type: 'array',\n        optional: true,\n        items: {\n          strict: true,\n          type: 'object',\n          properties: {\n            key: {\n              type: 'string',\n              rules: ['trim', 'lower'],\n              maxLength: 10000\n            },\n            value: {\n              type: 'string',\n              rules: ['trim', 'lower'],\n              maxLength: 10000\n            }\n          }\n        }\n      },\n      responseId: {\n        type: 'string',\n        optional: true,\n        maxLength: 10000,\n        rules: ['trim', 'lower']\n      },\n      search: {\n        type: 'object',\n        strict: true,\n        properties: {\n          origin: {\n            type: 'object',\n            strict: true,\n            properties: {\n              autosearch: {\n                type: 'boolean',\n                optional: false,\n                def: false\n              },\n              collectionSwitcher: {\n                type: 'boolean',\n                optional: false,\n                def: false\n              },\n              dym: {\n                type: 'boolean',\n                optional: false,\n                def: false\n              },\n              navigation: {\n                type: 'boolean',\n                optional: false,\n                def: false\n              },\n              recommendations: {\n                type: 'boolean',\n                optional: false,\n                def: false\n              },\n              sayt: {\n                type: 'boolean',\n                optional: false,\n                def: false\n              },\n              search: {\n                type: 'boolean',\n                optional: false,\n                def: false\n              }\n            }\n          },\n          id: {\n            type: 'string',\n            optional: true,\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          },\n          totalRecordCount: {\n            type: 'integer'\n          },\n          area: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim']\n          },\n          biasingProfile: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          },\n          query: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower'],\n            exec: function querySanitizationXSS(schema, post) {\n              if (typeof post === 'string') {\n                // Strip using blacklist\n                post = post.replace(BLACKLIST_STRIPING_REGEX, ' '); // Replace all whitespace combinations with a single space\n\n                post = post.replace(/\\s\\s+/g, ' ');\n                post = post.trim();\n                return post;\n              } else {\n                return post;\n              }\n            }\n          },\n          originalQuery: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower'],\n            exec: function querySanitizationXSS(schema, post) {\n              if (typeof post === 'string') {\n                // Strip using blacklist\n                post = post.replace(BLACKLIST_STRIPING_REGEX, ' '); // Replace all whitespace combinations with a single space\n\n                post = post.replace(/\\s\\s+/g, ' ');\n                post = post.trim();\n                return post;\n              } else {\n                return post;\n              }\n            }\n          },\n          correctedQuery: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower'],\n            exec: function querySanitizationXSS(schema, post) {\n              if (typeof post === 'string') {\n                // Strip using blacklist\n                post = post.replace(BLACKLIST_STRIPING_REGEX, ' '); // Replace all whitespace combinations with a single space\n\n                post = post.replace(/\\s\\s+/g, ' ');\n                post = post.trim();\n                return post;\n              } else {\n                return post;\n              }\n            }\n          },\n          warnings: {\n            type: 'array',\n            items: {\n              type: 'string',\n              maxLength: 10000,\n              rules: ['trim', 'lower']\n            }\n          },\n          errors: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          },\n          template: {\n            type: 'object',\n            strict: true,\n            properties: {\n              name: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              ruleName: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              _id: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              }\n            }\n          },\n          pageInfo: {\n            type: 'object',\n            strict: true,\n            properties: {\n              recordStart: {\n                type: 'integer'\n              },\n              recordEnd: {\n                type: 'integer'\n              }\n            }\n          },\n          relatedQueries: {\n            type: 'array',\n            items: {\n              maxLength: 10000,\n              rules: ['trim', 'lower']\n            }\n          },\n          rewrites: {\n            type: 'array',\n            items: {\n              maxLength: 10000,\n              rules: ['trim', 'lower']\n            }\n          },\n          redirect: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          },\n          siteParams: {\n            type: 'array',\n            items: {\n              type: 'object',\n              strict: true,\n              properties: {\n                key: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim', 'lower']\n                },\n                value: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim', 'lower']\n                }\n              }\n            }\n          },\n          matchStrategy: {\n            type: 'object',\n            strict: true,\n            properties: {\n              name: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              rules: {\n                type: 'array',\n                items: {\n                  type: 'object',\n                  strict: true,\n                  properties: {\n                    terms: {\n                      type: 'integer'\n                    },\n                    termsGreaterThan: {\n                      type: 'integer'\n                    },\n                    mustMatch: {\n                      type: 'integer'\n                    },\n                    percentage: {\n                      type: 'boolean'\n                    }\n                  }\n                }\n              }\n            }\n          },\n          availableNavigation: {\n            type: 'array',\n            optional: true,\n            strict: true,\n            items: {\n              type: 'object',\n              optional: true,\n              strict: true,\n              properties: {\n                name: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: []\n                },\n                displayName: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: []\n                },\n                range: {\n                  type: 'boolean'\n                },\n                or: {\n                  type: 'boolean'\n                },\n                ignored: {\n                  type: 'boolean'\n                },\n                moreRefinements: {\n                  type: 'boolean'\n                },\n                _id: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim', 'lower']\n                },\n                type: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim', 'lower']\n                },\n                refinements: {\n                  type: 'array',\n                  items: {\n                    type: 'object',\n                    strict: true,\n                    properties: {\n                      type: {\n                        type: 'string',\n                        maxLength: 10000,\n                        rules: ['trim', 'lower']\n                      },\n                      _id: {\n                        type: 'string',\n                        maxLength: 10000,\n                        rules: ['trim', 'lower']\n                      },\n                      count: {\n                        type: 'integer'\n                      },\n                      exclude: {\n                        type: 'boolean'\n                      },\n                      value: {\n                        type: 'string',\n                        maxLength: 10000,\n                        rules: []\n                      },\n                      high: {\n                        type: 'string',\n                        maxLength: 10000,\n                        rules: ['trim', 'lower']\n                      },\n                      low: {\n                        type: 'string',\n                        maxLength: 10000,\n                        rules: ['trim', 'lower']\n                      }\n                    }\n                  }\n                },\n                metadata: {\n                  type: 'array',\n                  optional: true,\n                  items: {\n                    strict: true,\n                    type: 'object',\n                    properties: {\n                      key: {\n                        type: 'string',\n                        rules: ['trim', 'lower'],\n                        maxLength: 10000\n                      },\n                      value: {\n                        type: 'string',\n                        rules: ['trim', 'lower'],\n                        maxLength: 10000\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          selectedNavigation: {\n            type: 'array',\n            optional: true,\n            strict: true,\n            items: {\n              type: 'object',\n              optional: true,\n              strict: true,\n              properties: {\n                name: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: []\n                },\n                displayName: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: []\n                },\n                range: {\n                  type: 'boolean'\n                },\n                or: {\n                  type: 'boolean'\n                },\n                ignored: {\n                  type: 'boolean'\n                },\n                moreRefinements: {\n                  type: 'boolean'\n                },\n                _id: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim', 'lower']\n                },\n                type: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim', 'lower']\n                },\n                refinements: {\n                  type: 'array',\n                  items: {\n                    type: 'object',\n                    strict: true,\n                    properties: {\n                      type: {\n                        type: 'string',\n                        maxLength: 10000,\n                        rules: ['trim', 'lower']\n                      },\n                      _id: {\n                        type: 'string',\n                        maxLength: 10000,\n                        rules: ['trim', 'lower']\n                      },\n                      count: {\n                        type: 'integer'\n                      },\n                      exclude: {\n                        type: 'boolean'\n                      },\n                      value: {\n                        type: 'string',\n                        maxLength: 10000,\n                        rules: []\n                      },\n                      high: {\n                        type: 'string',\n                        maxLength: 10000,\n                        rules: ['trim', 'lower']\n                      },\n                      low: {\n                        type: 'string',\n                        maxLength: 10000,\n                        rules: ['trim', 'lower']\n                      }\n                    }\n                  }\n                },\n                metadata: {\n                  type: 'array',\n                  optional: true,\n                  items: {\n                    strict: true,\n                    type: 'object',\n                    properties: {\n                      key: {\n                        type: 'string',\n                        rules: ['trim', 'lower'],\n                        maxLength: 10000\n                      },\n                      value: {\n                        type: 'string',\n                        rules: ['trim', 'lower'],\n                        maxLength: 10000\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          records: {\n            type: 'array',\n            items: {\n              type: 'object',\n              strict: true,\n              properties: {\n                allMeta: {\n                  type: 'object',\n                  strict: true,\n                  properties: {\n                    sku: {\n                      type: 'string',\n                      maxLength: 10000,\n                      rules: ['trim']\n                    },\n                    productId: {\n                      type: 'string',\n                      maxLength: 10000,\n                      rules: ['trim']\n                    }\n                  }\n                },\n                refinementMatches: {\n                  type: 'array',\n                  items: {\n                    type: 'object',\n                    strict: true,\n                    properties: {\n                      name: {\n                        type: 'string',\n                        maxLength: 10000,\n                        rules: ['trim', 'lower']\n                      },\n                      values: {\n                        type: 'array',\n                        items: {\n                          type: 'object',\n                          strict: true,\n                          properties: {\n                            value: {\n                              type: 'string',\n                              maxLength: 10000,\n                              rules: ['trim', 'lower']\n                            },\n                            count: {\n                              type: 'integer'\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                },\n                _id: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim', 'lower']\n                },\n                _u: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim', 'lower']\n                },\n                _t: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim', 'lower']\n                },\n                collection: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim', 'lower']\n                }\n              }\n            }\n          },\n          didYouMean: {\n            type: 'array',\n            items: {\n              maxLength: 10000,\n              rules: ['trim', 'lower']\n            }\n          },\n          originalRequest: {\n            type: 'object',\n            optional: true,\n            strict: true,\n            properties: {\n              collection: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              area: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              sessionId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              visitorId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              biasingProfile: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              language: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              customUrlParams: {\n                type: 'array',\n                items: {\n                  type: 'object',\n                  strict: true,\n                  properties: {\n                    key: {\n                      type: 'string',\n                      maxLength: 10000,\n                      rules: ['trim', 'lower']\n                    },\n                    value: {\n                      type: 'string',\n                      maxLength: 10000,\n                      rules: ['trim', 'lower']\n                    }\n                  }\n                }\n              },\n              query: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower'],\n                exec: function querySanitizationXSS(schema, post) {\n                  if (typeof post === 'string') {\n                    // Strip using blacklist\n                    post = post.replace(BLACKLIST_STRIPING_REGEX, ' '); // Replace all whitespace combinations with a single space\n\n                    post = post.replace(/\\s\\s+/g, ' ');\n                    post = post.trim();\n                    return post;\n                  } else {\n                    return post;\n                  }\n                }\n              },\n              refinementQuery: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              matchStrategyName: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              matchStrategy: {\n                type: 'object',\n                strict: true,\n                properties: {\n                  name: {\n                    type: 'string',\n                    maxLength: 10000,\n                    rules: ['trim', 'lower']\n                  },\n                  rules: {\n                    type: 'array',\n                    items: {\n                      type: 'object',\n                      strict: true,\n                      properties: {\n                        terms: {\n                          type: 'integer'\n                        },\n                        termsGreaterThan: {\n                          type: 'integer'\n                        },\n                        mustMatch: {\n                          type: 'integer'\n                        },\n                        percentage: {\n                          type: 'boolean'\n                        }\n                      }\n                    }\n                  }\n                }\n              },\n              biasing: {\n                type: 'object',\n                strict: true,\n                properties: {\n                  bringToTop: {\n                    type: 'array',\n                    items: {\n                      maxLength: 10000,\n                      rules: ['trim', 'lower']\n                    }\n                  },\n                  augmentBiases: {\n                    type: 'boolean'\n                  },\n                  influence: {\n                    type: 'number'\n                  },\n                  biases: {\n                    type: 'array',\n                    items: {\n                      type: 'object',\n                      strict: true,\n                      properties: {\n                        name: {\n                          type: 'string',\n                          maxLength: 10000,\n                          rules: ['trim', 'lower']\n                        },\n                        content: {\n                          type: 'string',\n                          maxLength: 10000,\n                          rules: ['trim', 'lower']\n                        },\n                        strength: {\n                          type: 'string',\n                          maxLength: 10000,\n                          rules: ['trim', 'lower']\n                        }\n                      }\n                    }\n                  }\n                }\n              },\n              skip: {\n                type: 'integer'\n              },\n              pageSize: {\n                type: 'integer'\n              },\n              returnBinary: {\n                type: 'boolean'\n              },\n              disableAutocorrection: {\n                type: 'boolean'\n              },\n              pruneRefinements: {\n                type: 'boolean'\n              },\n              sort: {\n                type: 'array',\n                items: {\n                  type: 'object',\n                  strict: true,\n                  properties: {\n                    field: {\n                      type: 'string',\n                      maxLength: 10000,\n                      rules: ['trim', 'lower']\n                    },\n                    order: {\n                      type: 'string',\n                      maxLength: 10000,\n                      rules: ['trim', 'lower']\n                    }\n                  }\n                }\n              },\n              fields: {\n                type: 'array',\n                items: {\n                  maxLength: 10000,\n                  rules: ['trim', 'lower']\n                }\n              },\n              orFields: {\n                type: 'array',\n                items: {\n                  maxLength: 10000,\n                  rules: ['trim', 'lower']\n                }\n              },\n              wildcardSearchEnabled: {\n                type: 'boolean'\n              },\n              restrictNavigation: {\n                type: 'object',\n                strict: true,\n                properties: {\n                  name: {\n                    type: 'string',\n                    maxLength: 10000,\n                    rules: []\n                  },\n                  count: {\n                    type: 'integer'\n                  }\n                }\n              },\n              includedNavigations: {\n                type: 'array',\n                items: {\n                  maxLength: 10000,\n                  rules: []\n                }\n              },\n              excludedNavigations: {\n                type: 'array',\n                items: {\n                  maxLength: 10000,\n                  rules: []\n                }\n              },\n              refinements: {\n                type: 'array',\n                items: {\n                  type: 'object',\n                  strict: true,\n                  properties: {\n                    navigationName: {\n                      type: 'string',\n                      maxLength: 10000,\n                      rules: []\n                    },\n                    type: {\n                      type: 'string',\n                      maxLength: 10000,\n                      rules: ['trim', 'lower']\n                    },\n                    _id: {\n                      type: 'string',\n                      maxLength: 10000,\n                      rules: ['trim', 'lower']\n                    },\n                    exclude: {\n                      type: 'boolean'\n                    },\n                    value: {\n                      type: 'string',\n                      maxLength: 10000,\n                      rules: []\n                    },\n                    high: {\n                      type: 'string',\n                      maxLength: 10000,\n                      rules: ['trim', 'lower']\n                    },\n                    low: {\n                      type: 'string',\n                      maxLength: 10000,\n                      rules: ['trim', 'lower']\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        optional: false\n      },\n      visit: {\n        type: 'object',\n        strict: true,\n        properties: {\n          customerData: {\n            type: 'object',\n            strict: true,\n            properties: {\n              visitorId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              sessionId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              loginId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\n//# sourceURL=webpack:///./dist/schemas/search.js?");

/***/ }),

/***/ "./dist/schemas/utils.js":
/*!*******************************!*\
  !*** ./dist/schemas/utils.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = {\n  regex: {\n    ISO_8601: /(\\d{4})-(0[1-9]|1[0-2]|[1-9])-(\\3([12]\\d|0[1-9]|3[01])|[1-9])[tT\\s]([01]\\d|2[0-3]):(([0-5]\\d)|\\d):(([0-5]\\d)|\\d)([.,]\\d+)?([zZ]|([+-])([01]\\d|2[0-3]|\\d):(([0-5]\\d)|\\d))$/,\n    UUID_V4: /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/,\n    ALPHA_NUM_LOWERCASE: /^[0-9a-z]+$/,\n    ALPHA_NUM: /^[0-9a-z]+$/i,\n    SHA1_HEX: /^[0-9a-f]{40}$/,\n    WHITELIST_STRIPING_REGEX: /(?:[\\0- \\(\\)\\+<->\\[\\]\\^`\\{-\\xA0\\xA6\\xA8\\xA9\\xAC-\\xB1\\xB4\\xB8\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0378\\u0379\\u0380-\\u0385\\u038B\\u038D\\u03A2\\u03F6\\u0482\\u0488\\u0489\\u0530\\u0557\\u0558\\u058B-\\u058E\\u0590\\u05C8-\\u05CF\\u05EB-\\u05EE\\u05F5-\\u0608\\u060E\\u060F\\u061C\\u061D\\u06DD\\u06DE\\u06E9\\u06FD\\u06FE\\u070E\\u070F\\u074B\\u074C\\u07B2-\\u07BF\\u07F6\\u07FB\\u07FC\\u082E\\u082F\\u083F\\u085C\\u085D\\u085F\\u086B-\\u089F\\u08B5\\u08C8-\\u08D2\\u08E2\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09FA\\u09FF\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A77-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF2-\\u0AF8\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B54\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B70\\u0B78-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BF3-\\u0BF8\\u0BFA-\\u0BFF\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C76\\u0C7F\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0CFF\\u0D0D\\u0D11\\u0D45\\u0D49\\u0D4F-\\u0D53\\u0D64\\u0D65\\u0D79\\u0D80\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF5-\\u0E00\\u0E3B-\\u0E3E\\u0E5C-\\u0E80\\u0E83\\u0E85\\u0E8B\\u0EA4\\u0EA6\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F48\\u0F6D-\\u0F70\\u0F98\\u0FBD-\\u0FC5\\u0FC7-\\u0FCF\\u0FD5-\\u0FD8\\u0FDB-\\u0FFF\\u109E\\u109F\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u137D-\\u137F\\u1390-\\u139F\\u13F6\\u13F7\\u13FE\\u13FF\\u166D\\u1680\\u169B-\\u169F\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1737-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17DE\\u17DF\\u17EA-\\u17EF\\u17FA-\\u17FF\\u180E\\u180F\\u181A-\\u181F\\u1879-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u1943\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DB-\\u19FF\\u1A1C\\u1A1D\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1A9F\\u1AAE\\u1AAF\\u1ABE\\u1AC1-\\u1AFF\\u1B4C-\\u1B4F\\u1B61-\\u1B6A\\u1B74-\\u1B7F\\u1BF4-\\u1BFB\\u1C38-\\u1C3A\\u1C4A-\\u1C4C\\u1C89-\\u1C8F\\u1CBB\\u1CBC\\u1CC8-\\u1CCF\\u1CFB-\\u1CFF\\u1DFA\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FBD\\u1FBF-\\u1FC1\\u1FC5\\u1FCD-\\u1FCF\\u1FD4\\u1FD5\\u1FDC-\\u1FDF\\u1FED-\\u1FF1\\u1FF5\\u1FFD-\\u200F\\u201A\\u201E\\u2028-\\u202F\\u2044-\\u2046\\u2052\\u205F-\\u206F\\u2072\\u2073\\u207A-\\u207E\\u208A-\\u208F\\u209D-\\u209F\\u20C0-\\u20CF\\u20DD-\\u20E0\\u20E2-\\u20E4\\u20F1-\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A-\\u245F\\u249C-\\u24E9\\u2500-\\u2775\\u2794-\\u2BFF\\u2C2F\\u2C5F\\u2CE5-\\u2CEA\\u2CF4-\\u2CF8\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D71-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E22-\\u2E29\\u2E42\\u2E50\\u2E51\\u2E53-\\u3000\\u3004\\u3008-\\u301B\\u301D-\\u3020\\u3036\\u3037\\u303E-\\u3040\\u3097\\u3098\\u309B\\u309C\\u3100-\\u3104\\u3130\\u318F-\\u3191\\u3196-\\u319F\\u31C0-\\u31EF\\u3200-\\u321F\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\u9FFD-\\u9FFF\\uA48D-\\uA4CF\\uA62C-\\uA63F\\uA670-\\uA672\\uA6F8-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA7C0\\uA7C1\\uA7CB-\\uA7F4\\uA828-\\uA82B\\uA82D-\\uA82F\\uA836\\uA837\\uA839-\\uA83F\\uA878-\\uA87F\\uA8C6-\\uA8CD\\uA8DA-\\uA8DF\\uA954-\\uA95E\\uA97D-\\uA97F\\uA9CE\\uA9DA-\\uA9DD\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A\\uAA5B\\uAA77-\\uAA79\\uAAC3-\\uAADA\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB5B\\uAB6A-\\uAB6F\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uD7FF\\uE000-\\uF8FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB29\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBB2-\\uFBD2\\uFD3E-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFD-\\uFDFF\\uFE17\\uFE18\\uFE1A-\\uFE1F\\uFE35-\\uFE44\\uFE47\\uFE48\\uFE53\\uFE59-\\uFE5E\\uFE62\\uFE64-\\uFE67\\uFE6C-\\uFE6F\\uFE75\\uFEFD-\\uFF00\\uFF08\\uFF09\\uFF0B\\uFF1C-\\uFF1E\\uFF3B\\uFF3D\\uFF3E\\uFF40\\uFF5B-\\uFF60\\uFF62\\uFF63\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFDF\\uFFE2-\\uFFE4\\uFFE7-\\uFFFF]|\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDCFF\\uDD03-\\uDD06\\uDD34-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDDFC\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEFC-\\uDEFF\\uDF24-\\uDF2C\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDFC4-\\uDFC7\\uDFD6-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCAF\\uDCD4-\\uDCD7\\uDCFC-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDD6E\\uDD70-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56\\uDC77\\uDC78\\uDC9F-\\uDCA6\\uDCB0-\\uDCDF\\uDCF3\\uDCF6-\\uDCFA\\uDD1C-\\uDD1E\\uDD3A-\\uDD3E\\uDD40-\\uDD7F\\uDDB8-\\uDDBB\\uDDD0\\uDDD1\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE36\\uDE37\\uDE3B-\\uDE3E\\uDE49-\\uDE4F\\uDE59-\\uDE5F\\uDEA0-\\uDEBF\\uDEC8\\uDEE7-\\uDEEA\\uDEF7-\\uDEFF\\uDF36-\\uDF38\\uDF56\\uDF57\\uDF73-\\uDF77\\uDF92-\\uDF98\\uDF9D-\\uDFA8\\uDFB0-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCF9\\uDD28-\\uDD2F\\uDD3A-\\uDE5F\\uDE7F\\uDEAA\\uDEAE\\uDEAF\\uDEB2-\\uDEFF\\uDF28-\\uDF2F\\uDF5A-\\uDFAF\\uDFCC-\\uDFDF\\uDFF7-\\uDFFF]|\\uD804[\\uDC4E-\\uDC51\\uDC70-\\uDC7E\\uDCBD\\uDCC2-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD48-\\uDD4F\\uDD77-\\uDD7F\\uDDE0\\uDDF5-\\uDDFF\\uDE12\\uDE3F-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEAA-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD805[\\uDC5C\\uDC62-\\uDC7F\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDDE-\\uDDFF\\uDE45-\\uDE4F\\uDE5A-\\uDE5F\\uDE6D-\\uDE7F\\uDEB9-\\uDEBF\\uDECA-\\uDEFF\\uDF1B\\uDF1C\\uDF2C-\\uDF2F\\uDF3F-\\uDFFF]|\\uD806[\\uDC3C-\\uDC9F\\uDCF3-\\uDCFE\\uDD07\\uDD08\\uDD0A\\uDD0B\\uDD14\\uDD17\\uDD36\\uDD39\\uDD3A\\uDD47-\\uDD4F\\uDD5A-\\uDD9F\\uDDA8\\uDDA9\\uDDD8\\uDDD9\\uDDE5-\\uDDFF\\uDE48-\\uDE4F\\uDEA3-\\uDEBF\\uDEF9-\\uDFFF]|\\uD807[\\uDC09\\uDC37\\uDC46-\\uDC4F\\uDC6D-\\uDC6F\\uDC90\\uDC91\\uDCA8\\uDCB7-\\uDCFF\\uDD07\\uDD0A\\uDD37-\\uDD39\\uDD3B\\uDD3E\\uDD48-\\uDD4F\\uDD5A-\\uDD5F\\uDD66\\uDD69\\uDD8F\\uDD92\\uDD99-\\uDD9F\\uDDAA-\\uDEDF\\uDEF9-\\uDFAF\\uDFB1-\\uDFBF\\uDFD5-\\uDFDC\\uDFE1-\\uDFFE]|\\uD808[\\uDF9A-\\uDFFF]|\\uD809[\\uDC6F\\uDC75-\\uDC7F\\uDD44-\\uDFFF]|[\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD824-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837\\uD839\\uD83D\\uD83F\\uD87B-\\uD87D\\uD87F\\uD885-\\uDB3F\\uDB41-\\uDBFF][\\uDC00-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDE6D\\uDE70-\\uDECF\\uDEEE\\uDEEF\\uDEF6-\\uDEFF\\uDF3C-\\uDF3F\\uDF45-\\uDF4F\\uDF5A\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD81B[\\uDC00-\\uDE3F\\uDE9B-\\uDEFF\\uDF4B-\\uDF4E\\uDF88-\\uDF8E\\uDFA0-\\uDFDF\\uDFE5-\\uDFEF\\uDFF2-\\uDFFF]|\\uD821[\\uDFF8-\\uDFFF]|\\uD823[\\uDCD6-\\uDCFF\\uDD09-\\uDFFF]|\\uD82C[\\uDD1F-\\uDD4F\\uDD53-\\uDD63\\uDD68-\\uDD6F\\uDEFC-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A-\\uDC9C\\uDCA0-\\uDFFF]|\\uD834[\\uDC00-\\uDD64\\uDD6A-\\uDD6C\\uDD73-\\uDD7A\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDE41\\uDE45-\\uDEDF\\uDEF4-\\uDF5F\\uDF79-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3\\uDFCC\\uDFCD]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86\\uDE8C-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD838[\\uDC07\\uDC19\\uDC1A\\uDC22\\uDC25\\uDC2B-\\uDCFF\\uDD2D-\\uDD2F\\uDD3E\\uDD3F\\uDD4A-\\uDD4D\\uDD4F-\\uDEBF\\uDEFA-\\uDEFE\\uDF00-\\uDFFF]|\\uD83A[\\uDCC5\\uDCC6\\uDCD7-\\uDCFF\\uDD4C-\\uDD4F\\uDD5A-\\uDD5D\\uDD60-\\uDFFF]|\\uD83B[\\uDC00-\\uDC70\\uDCAC\\uDCB5-\\uDD00\\uDD2E\\uDD3E-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDFFF]|[\\uD83C\\uDB40][\\uDC00-\\uDCFF\\uDD0D-\\uDFFF]|\\uD83E[\\uDC00-\\uDFEF\\uDFFA-\\uDFFF]|\\uD869[\\uDEDE-\\uDEFF]|\\uD86D[\\uDF35-\\uDF3F]|\\uD86E[\\uDC1E\\uDC1F]|\\uD873[\\uDEA2-\\uDEAF]|\\uD87A[\\uDFE1-\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uD884[\\uDF4B-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/g,\n    BLACKLIST_STRIPING_REGEX: /(?:[\\0-\\x1F\\(\\);-\\?\\[\\]\\{\\}\\x7F-\\x9F\\xAD\\u0378\\u0379\\u0380-\\u0383\\u038B\\u038D\\u03A2\\u0488\\u0489\\u0530\\u0557\\u0558\\u058B\\u058C\\u0590\\u05C8-\\u05CF\\u05EB-\\u05EE\\u05F5-\\u0605\\u061C\\u061D\\u06DD\\u070E\\u070F\\u074B\\u074C\\u07B2-\\u07BF\\u07FB\\u07FC\\u082E\\u082F\\u083F\\u085C\\u085D\\u085F\\u086B-\\u089F\\u08B5\\u08C8-\\u08D2\\u08E2\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09FF\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A77-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF2-\\u0AF8\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B54\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B78-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BFB-\\u0BFF\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C76\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0CFF\\u0D0D\\u0D11\\u0D45\\u0D49\\u0D50-\\u0D53\\u0D64\\u0D65\\u0D80\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF5-\\u0E00\\u0E3B-\\u0E3E\\u0E5C-\\u0E80\\u0E83\\u0E85\\u0E8B\\u0EA4\\u0EA6\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F48\\u0F6D-\\u0F70\\u0F98\\u0FBD\\u0FCD\\u0FDB-\\u0FFF\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u137D-\\u137F\\u139A-\\u139F\\u13F6\\u13F7\\u13FE\\u13FF\\u169D-\\u169F\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1737-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17DE\\u17DF\\u17EA-\\u17EF\\u17FA-\\u17FF\\u180E\\u180F\\u181A-\\u181F\\u1879-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u193F\\u1941-\\u1943\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DB-\\u19DD\\u1A1C\\u1A1D\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1A9F\\u1AAE\\u1AAF\\u1ABE\\u1AC1-\\u1AFF\\u1B4C-\\u1B4F\\u1B7D-\\u1B7F\\u1BF4-\\u1BFB\\u1C38-\\u1C3A\\u1C4A-\\u1C4C\\u1C89-\\u1C8F\\u1CBB\\u1CBC\\u1CC8-\\u1CCF\\u1CFB-\\u1CFF\\u1DFA\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FC5\\u1FD4\\u1FD5\\u1FDC\\u1FF0\\u1FF1\\u1FF5\\u1FFF\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u206F\\u2072\\u2073\\u208F\\u209D-\\u209F\\u20C0-\\u20CF\\u20DD-\\u20E0\\u20E2-\\u20E4\\u20F1-\\u20FF\\u218C-\\u218F\\u2427-\\u243F\\u244B-\\u245F\\u2B74\\u2B75\\u2B96\\u2C2F\\u2C5F\\u2CF4-\\u2CF8\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D71-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E53-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u2FFC-\\u2FFF\\u3040\\u3097\\u3098\\u3100-\\u3104\\u3130\\u318F\\u31E4-\\u31EF\\u321F\\u9FFD-\\u9FFF\\uA48D-\\uA48F\\uA4C7-\\uA4CF\\uA62C-\\uA63F\\uA670-\\uA672\\uA6F8-\\uA6FF\\uA7C0\\uA7C1\\uA7CB-\\uA7F4\\uA82D-\\uA82F\\uA83A-\\uA83F\\uA878-\\uA87F\\uA8C6-\\uA8CD\\uA8DA-\\uA8DF\\uA954-\\uA95E\\uA97D-\\uA97F\\uA9CE\\uA9DA-\\uA9DD\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A\\uAA5B\\uAAC3-\\uAADA\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB6C-\\uAB6F\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uD7FF\\uE000-\\uF8FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBC2-\\uFBD2\\uFD40-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFE\\uFDFF\\uFE1A-\\uFE1F\\uFE53\\uFE67\\uFE6C-\\uFE6F\\uFE75\\uFEFD-\\uFF00\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFDF\\uFFE7\\uFFEF-\\uFFFB\\uFFFE\\uFFFF]|\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDCFF\\uDD03-\\uDD06\\uDD34-\\uDD36\\uDD8F\\uDD9D-\\uDD9F\\uDDA1-\\uDDCF\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEFC-\\uDEFF\\uDF24-\\uDF2C\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDFC4-\\uDFC7\\uDFD6-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCAF\\uDCD4-\\uDCD7\\uDCFC-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDD6E\\uDD70-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56\\uDC9F-\\uDCA6\\uDCB0-\\uDCDF\\uDCF3\\uDCF6-\\uDCFA\\uDD1C-\\uDD1E\\uDD3A-\\uDD3E\\uDD40-\\uDD7F\\uDDB8-\\uDDBB\\uDDD0\\uDDD1\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE36\\uDE37\\uDE3B-\\uDE3E\\uDE49-\\uDE4F\\uDE59-\\uDE5F\\uDEA0-\\uDEBF\\uDEE7-\\uDEEA\\uDEF7-\\uDEFF\\uDF36-\\uDF38\\uDF56\\uDF57\\uDF73-\\uDF77\\uDF92-\\uDF98\\uDF9D-\\uDFA8\\uDFB0-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCF9\\uDD28-\\uDD2F\\uDD3A-\\uDE5F\\uDE7F\\uDEAA\\uDEAE\\uDEAF\\uDEB2-\\uDEFF\\uDF28-\\uDF2F\\uDF5A-\\uDFAF\\uDFCC-\\uDFDF\\uDFF7-\\uDFFF]|\\uD804[\\uDC4E-\\uDC51\\uDC70-\\uDC7E\\uDCBD\\uDCC2-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD48-\\uDD4F\\uDD77-\\uDD7F\\uDDE0\\uDDF5-\\uDDFF\\uDE12\\uDE3F-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEAA-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD805[\\uDC5C\\uDC62-\\uDC7F\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDDE-\\uDDFF\\uDE45-\\uDE4F\\uDE5A-\\uDE5F\\uDE6D-\\uDE7F\\uDEB9-\\uDEBF\\uDECA-\\uDEFF\\uDF1B\\uDF1C\\uDF2C-\\uDF2F\\uDF40-\\uDFFF]|\\uD806[\\uDC3C-\\uDC9F\\uDCF3-\\uDCFE\\uDD07\\uDD08\\uDD0A\\uDD0B\\uDD14\\uDD17\\uDD36\\uDD39\\uDD3A\\uDD47-\\uDD4F\\uDD5A-\\uDD9F\\uDDA8\\uDDA9\\uDDD8\\uDDD9\\uDDE5-\\uDDFF\\uDE48-\\uDE4F\\uDEA3-\\uDEBF\\uDEF9-\\uDFFF]|\\uD807[\\uDC09\\uDC37\\uDC46-\\uDC4F\\uDC6D-\\uDC6F\\uDC90\\uDC91\\uDCA8\\uDCB7-\\uDCFF\\uDD07\\uDD0A\\uDD37-\\uDD39\\uDD3B\\uDD3E\\uDD48-\\uDD4F\\uDD5A-\\uDD5F\\uDD66\\uDD69\\uDD8F\\uDD92\\uDD99-\\uDD9F\\uDDAA-\\uDEDF\\uDEF9-\\uDFAF\\uDFB1-\\uDFBF\\uDFF2-\\uDFFE]|\\uD808[\\uDF9A-\\uDFFF]|\\uD809[\\uDC6F\\uDC75-\\uDC7F\\uDD44-\\uDFFF]|[\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD824-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837\\uD839\\uD83F\\uD87B-\\uD87D\\uD87F\\uD885-\\uDB3F\\uDB41-\\uDBFF][\\uDC00-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDE6D\\uDE70-\\uDECF\\uDEEE\\uDEEF\\uDEF6-\\uDEFF\\uDF46-\\uDF4F\\uDF5A\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD81B[\\uDC00-\\uDE3F\\uDE9B-\\uDEFF\\uDF4B-\\uDF4E\\uDF88-\\uDF8E\\uDFA0-\\uDFDF\\uDFE5-\\uDFEF\\uDFF2-\\uDFFF]|\\uD821[\\uDFF8-\\uDFFF]|\\uD823[\\uDCD6-\\uDCFF\\uDD09-\\uDFFF]|\\uD82C[\\uDD1F-\\uDD4F\\uDD53-\\uDD63\\uDD68-\\uDD6F\\uDEFC-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A\\uDC9B\\uDCA0-\\uDFFF]|\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDD73-\\uDD7A\\uDDE9-\\uDDFF\\uDE46-\\uDEDF\\uDEF4-\\uDEFF\\uDF57-\\uDF5F\\uDF79-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]|\\uD836[\\uDE8C-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD838[\\uDC07\\uDC19\\uDC1A\\uDC22\\uDC25\\uDC2B-\\uDCFF\\uDD2D-\\uDD2F\\uDD3E\\uDD3F\\uDD4A-\\uDD4D\\uDD50-\\uDEBF\\uDEFA-\\uDEFE\\uDF00-\\uDFFF]|\\uD83A[\\uDCC5\\uDCC6\\uDCD7-\\uDCFF\\uDD4C-\\uDD4F\\uDD5A-\\uDD5D\\uDD60-\\uDFFF]|\\uD83B[\\uDC00-\\uDC70\\uDCB5-\\uDD00\\uDD3E-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDEEF\\uDEF2-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDCFF\\uDDAE-\\uDDE5\\uDE03-\\uDE0F\\uDE3C-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDE5F\\uDE66-\\uDEFF]|\\uD83D[\\uDED8-\\uDEDF\\uDEED-\\uDEEF\\uDEFD-\\uDEFF\\uDF74-\\uDF7F\\uDFD9-\\uDFDF\\uDFEC-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE\\uDCAF\\uDCB2-\\uDCFF\\uDD79\\uDDCC\\uDE54-\\uDE5F\\uDE6E\\uDE6F\\uDE75-\\uDE77\\uDE7B-\\uDE7F\\uDE87-\\uDE8F\\uDEA9-\\uDEAF\\uDEB7-\\uDEBF\\uDEC3-\\uDECF\\uDED7-\\uDEFF\\uDF93\\uDFCB-\\uDFEF\\uDFFA-\\uDFFF]|\\uD869[\\uDEDE-\\uDEFF]|\\uD86D[\\uDF35-\\uDF3F]|\\uD86E[\\uDC1E\\uDC1F]|\\uD873[\\uDEA2-\\uDEAF]|\\uD87A[\\uDFE1-\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uD884[\\uDF4B-\\uDFFF]|\\uDB40[\\uDC00-\\uDCFF\\uDDF0-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/g\n  }\n};\n\n//# sourceURL=webpack:///./dist/schemas/utils.js?");

/***/ }),

/***/ "./dist/schemas/viewCart.js":
/*!**********************************!*\
  !*** ./dist/schemas/viewCart.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils = __webpack_require__(/*! ./utils */ \"./dist/schemas/utils.js\");\n\nvar BLACKLIST_STRIPING_REGEX = utils.regex.BLACKLIST_STRIPING_REGEX;\nexports.default = {\n  validation: {\n    type: 'object',\n    strict: true,\n    properties: {\n      cart: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string',\n            optional: true\n          },\n          items: {\n            type: 'array',\n            items: {\n              type: 'object',\n              strict: true,\n              properties: {\n                category: {\n                  type: 'string',\n                  optional: true\n                },\n                collection: {\n                  type: 'string',\n                  optional: false\n                },\n                title: {\n                  type: 'string',\n                  optional: false\n                },\n                sku: {\n                  type: 'string',\n                  optional: true\n                },\n                productId: {\n                  type: 'string',\n                  optional: false\n                },\n                parentId: {\n                  type: 'string',\n                  optional: true\n                },\n                margin: {\n                  type: 'number',\n                  optional: true\n                },\n                price: {\n                  type: 'number',\n                  optional: true\n                },\n                quantity: {\n                  type: 'integer',\n                  optional: false\n                },\n                metadata: {\n                  type: 'array',\n                  optional: true,\n                  items: {\n                    strict: true,\n                    type: 'object',\n                    properties: {\n                      key: {\n                        type: 'string'\n                      },\n                      value: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          metadata: {\n            type: 'array',\n            optional: true,\n            items: {\n              strict: true,\n              type: 'object',\n              properties: {\n                key: {\n                  type: 'string'\n                },\n                value: {\n                  type: 'string'\n                }\n              }\n            }\n          }\n        }\n      },\n      clientVersion: {\n        type: 'object',\n        strict: true,\n        properties: {\n          raw: {\n            type: 'string'\n          },\n          version: {\n            type: 'string',\n            optional: true\n          },\n          prerelease: {\n            type: 'array',\n            optional: true,\n            items: {\n              type: 'string'\n            }\n          },\n          build: {\n            type: 'array',\n            optional: true,\n            items: {\n              type: 'string'\n            }\n          },\n          major: {\n            type: 'integer',\n            optional: true\n          },\n          minor: {\n            type: 'integer',\n            optional: true\n          },\n          patch: {\n            type: 'integer',\n            optional: true\n          }\n        }\n      },\n      customer: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string'\n          },\n          area: {\n            type: 'string',\n            optional: false\n          }\n        }\n      },\n      eventType: {\n        type: 'string'\n      },\n      metadata: {\n        type: 'array',\n        optional: true,\n        items: {\n          strict: true,\n          type: 'object',\n          properties: {\n            key: {\n              type: 'string'\n            },\n            value: {\n              type: 'string'\n            }\n          }\n        }\n      },\n      visit: {\n        type: 'object',\n        strict: true,\n        properties: {\n          customerData: {\n            type: 'object',\n            strict: true,\n            properties: {\n              visitorId: {\n                type: 'string'\n              },\n              sessionId: {\n                type: 'string'\n              },\n              loginId: {\n                type: 'string',\n                optional: true\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  sanitization: {\n    type: 'object',\n    strict: true,\n    properties: {\n      cart: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower'],\n            optional: true\n          },\n          items: {\n            type: 'array',\n            items: {\n              type: 'object',\n              strict: true,\n              properties: {\n                category: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim', 'lower'],\n                  optional: true\n                },\n                collection: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim'],\n                  optional: false,\n                  def: 'default'\n                },\n                title: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim', 'lower']\n                },\n                sku: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim'],\n                  optional: true\n                },\n                productId: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim']\n                },\n                parentId: {\n                  type: 'string',\n                  maxLength: 10000,\n                  rules: ['trim'],\n                  optional: true\n                },\n                margin: {\n                  type: 'number',\n                  optional: true\n                },\n                price: {\n                  type: 'number',\n                  optional: true\n                },\n                quantity: {\n                  type: 'integer'\n                },\n                metadata: {\n                  type: 'array',\n                  optional: true,\n                  items: {\n                    strict: true,\n                    type: 'object',\n                    properties: {\n                      key: {\n                        type: 'string',\n                        rules: ['trim', 'lower'],\n                        maxLength: 10000\n                      },\n                      value: {\n                        type: 'string',\n                        rules: ['trim', 'lower'],\n                        maxLength: 10000\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          metadata: {\n            type: 'array',\n            optional: true,\n            items: {\n              strict: true,\n              type: 'object',\n              properties: {\n                key: {\n                  type: 'string',\n                  rules: ['trim', 'lower'],\n                  maxLength: 10000\n                },\n                value: {\n                  type: 'string',\n                  rules: ['trim', 'lower'],\n                  maxLength: 10000\n                }\n              }\n            }\n          }\n        }\n      },\n      clientVersion: {\n        type: 'object',\n        strict: true,\n        properties: {\n          raw: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          },\n          version: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower'],\n            optional: true\n          },\n          prerelease: {\n            type: 'array',\n            maxLength: 1000,\n            items: {\n              maxLength: 10000,\n              rules: ['trim', 'lower']\n            },\n            optional: true\n          },\n          build: {\n            type: 'array',\n            maxLength: 1000,\n            items: {\n              maxLength: 10000,\n              rules: ['trim', 'lower']\n            },\n            optional: true\n          },\n          major: {\n            type: 'integer',\n            optional: true\n          },\n          minor: {\n            type: 'integer',\n            optional: true\n          },\n          patch: {\n            type: 'integer',\n            optional: true\n          }\n        }\n      },\n      customer: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          },\n          area: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim'],\n            optional: false,\n            def: 'Production'\n          }\n        }\n      },\n      eventType: {\n        type: 'string',\n        maxLength: 10000,\n        rules: ['trim']\n      },\n      metadata: {\n        type: 'array',\n        optional: true,\n        items: {\n          strict: true,\n          type: 'object',\n          properties: {\n            key: {\n              type: 'string',\n              rules: ['trim', 'lower'],\n              maxLength: 10000\n            },\n            value: {\n              type: 'string',\n              rules: ['trim', 'lower'],\n              maxLength: 10000\n            }\n          }\n        }\n      },\n      visit: {\n        type: 'object',\n        strict: true,\n        properties: {\n          customerData: {\n            type: 'object',\n            strict: true,\n            properties: {\n              visitorId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              sessionId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              loginId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\n//# sourceURL=webpack:///./dist/schemas/viewCart.js?");

/***/ }),

/***/ "./dist/schemas/viewProduct.js":
/*!*************************************!*\
  !*** ./dist/schemas/viewProduct.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils = __webpack_require__(/*! ./utils */ \"./dist/schemas/utils.js\");\n\nvar BLACKLIST_STRIPING_REGEX = utils.regex.BLACKLIST_STRIPING_REGEX;\nexports.default = {\n  validation: {\n    type: 'object',\n    strict: true,\n    properties: {\n      clientVersion: {\n        type: 'object',\n        strict: true,\n        properties: {\n          raw: {\n            type: 'string'\n          },\n          version: {\n            type: 'string',\n            optional: true\n          },\n          prerelease: {\n            type: 'array',\n            optional: true,\n            items: {\n              type: 'string'\n            }\n          },\n          build: {\n            type: 'array',\n            optional: true,\n            items: {\n              type: 'string'\n            }\n          },\n          major: {\n            type: 'integer',\n            optional: true\n          },\n          minor: {\n            type: 'integer',\n            optional: true\n          },\n          patch: {\n            type: 'integer',\n            optional: true\n          }\n        }\n      },\n      customer: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string'\n          },\n          area: {\n            type: 'string',\n            optional: false\n          }\n        }\n      },\n      eventType: {\n        type: 'string'\n      },\n      metadata: {\n        type: 'array',\n        optional: true,\n        items: {\n          strict: true,\n          type: 'object',\n          properties: {\n            key: {\n              type: 'string'\n            },\n            value: {\n              type: 'string'\n            }\n          }\n        }\n      },\n      product: {\n        type: 'object',\n        strict: true,\n        properties: {\n          category: {\n            type: 'string',\n            optional: true\n          },\n          collection: {\n            type: 'string',\n            optional: false\n          },\n          title: {\n            type: 'string'\n          },\n          sku: {\n            type: 'string',\n            optional: true\n          },\n          productId: {\n            type: 'string'\n          },\n          parentId: {\n            type: 'string',\n            optional: true\n          },\n          margin: {\n            type: 'number',\n            optional: true\n          },\n          price: {\n            type: 'number',\n            optional: true\n          },\n          metadata: {\n            type: 'array',\n            optional: true,\n            items: {\n              strict: true,\n              type: 'object',\n              properties: {\n                key: {\n                  type: 'string'\n                },\n                value: {\n                  type: 'string'\n                }\n              }\n            }\n          }\n        }\n      },\n      visit: {\n        type: 'object',\n        strict: true,\n        properties: {\n          customerData: {\n            type: 'object',\n            strict: true,\n            properties: {\n              visitorId: {\n                type: 'string'\n              },\n              sessionId: {\n                type: 'string'\n              },\n              loginId: {\n                type: 'string',\n                optional: true\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  sanitization: {\n    type: 'object',\n    strict: true,\n    properties: {\n      clientVersion: {\n        type: 'object',\n        strict: true,\n        properties: {\n          raw: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          },\n          version: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower'],\n            optional: true\n          },\n          prerelease: {\n            type: 'array',\n            maxLength: 1000,\n            items: {\n              maxLength: 10000,\n              rules: ['trim', 'lower']\n            },\n            optional: true\n          },\n          build: {\n            type: 'array',\n            maxLength: 1000,\n            items: {\n              maxLength: 10000,\n              rules: ['trim', 'lower']\n            },\n            optional: true\n          },\n          major: {\n            type: 'integer',\n            optional: true\n          },\n          minor: {\n            type: 'integer',\n            optional: true\n          },\n          patch: {\n            type: 'integer',\n            optional: true\n          }\n        }\n      },\n      customer: {\n        type: 'object',\n        strict: true,\n        properties: {\n          id: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          },\n          area: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim'],\n            optional: false,\n            def: 'Production'\n          }\n        }\n      },\n      eventType: {\n        type: 'string',\n        maxLength: 10000,\n        rules: ['trim']\n      },\n      metadata: {\n        type: 'array',\n        optional: true,\n        items: {\n          strict: true,\n          type: 'object',\n          properties: {\n            key: {\n              type: 'string',\n              rules: ['trim', 'lower'],\n              maxLength: 10000\n            },\n            value: {\n              type: 'string',\n              rules: ['trim', 'lower'],\n              maxLength: 10000\n            }\n          }\n        }\n      },\n      product: {\n        type: 'object',\n        strict: true,\n        properties: {\n          category: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower'],\n            optional: true\n          },\n          collection: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim'],\n            optional: false,\n            def: 'default'\n          },\n          title: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim', 'lower']\n          },\n          sku: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim'],\n            optional: true\n          },\n          productId: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim']\n          },\n          parentId: {\n            type: 'string',\n            maxLength: 10000,\n            rules: ['trim'],\n            optional: true\n          },\n          margin: {\n            type: 'number',\n            optional: true\n          },\n          price: {\n            type: 'number',\n            optional: true\n          },\n          metadata: {\n            type: 'array',\n            optional: true,\n            items: {\n              strict: true,\n              type: 'object',\n              properties: {\n                key: {\n                  type: 'string',\n                  rules: ['trim', 'lower'],\n                  maxLength: 10000\n                },\n                value: {\n                  type: 'string',\n                  rules: ['trim', 'lower'],\n                  maxLength: 10000\n                }\n              }\n            }\n          }\n        }\n      },\n      visit: {\n        type: 'object',\n        strict: true,\n        properties: {\n          customerData: {\n            type: 'object',\n            strict: true,\n            properties: {\n              visitorId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              sessionId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              },\n              loginId: {\n                type: 'string',\n                maxLength: 10000,\n                rules: ['trim', 'lower']\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\n//# sourceURL=webpack:///./dist/schemas/viewProduct.js?");

/***/ }),

/***/ "./dist/utils/index.js":
/*!*****************************!*\
  !*** ./dist/utils/index.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Get unique elements of an array\n */\n\nfunction getUnique(array) {\n  var u = {};\n  var a = [];\n\n  for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n    var item = array_1[_i];\n\n    if (u.hasOwnProperty(item)) {\n      continue;\n    }\n\n    a.push(item);\n    u[item] = 1;\n  }\n\n  return a;\n}\n\nexports.getUnique = getUnique;\n/**\n * Helper to deep copy an object\n */\n\nfunction deepCopy(o) {\n  if (o === undefined || o === null) {\n    return null;\n  }\n\n  return JSON.parse(JSON.stringify(o));\n}\n\nexports.deepCopy = deepCopy;\n/**\n * Returns true if a string starts with one of the strings in an array\n */\n\nfunction startsWithOneOf(target, array) {\n  var len = parseInt(array.length, 10) || 0;\n\n  if (len === 0) {\n    return false;\n  }\n\n  var k = 0;\n  var currentElement;\n\n  while (k < len) {\n    currentElement = array[k];\n\n    if (target.startsWith && target.startsWith(currentElement)) {\n      return true;\n    }\n\n    k++;\n  }\n\n  return false;\n}\n\nexports.startsWithOneOf = startsWithOneOf;\n\n//# sourceURL=webpack:///./dist/utils/index.js?");

/***/ }),

/***/ "./dist/version.js":
/*!*************************!*\
  !*** ./dist/version.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.version = \"3.8.2\";\n\n//# sourceURL=webpack:///./dist/version.js?");

/***/ }),

/***/ "./dist/window.js":
/*!************************!*\
  !*** ./dist/window.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Entry point for bundlers preparing a version of the tracker for web \n// browsers.\n(function (w) {\n  if ( true && typeof module.exports !== 'undefined') {\n    module.exports = __webpack_require__(/*! . */ \"./dist/index.js\");\n  }\n\n  w.GbTracker = __webpack_require__(/*! . */ \"./dist/index.js\");\n})(window);\n\n//# sourceURL=webpack:///./dist/window.js?");

/***/ }),

/***/ "./node_modules/@groupby/beacon-models/constants/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@groupby/beacon-models/constants/index.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MAX_ARRAY_LENGTH = 1000;\nexports.MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH;\nvar MAX_STR_LENGTH = 10000;\nexports.MAX_STR_LENGTH = MAX_STR_LENGTH;\n\n\n//# sourceURL=webpack:///./node_modules/@groupby/beacon-models/constants/index.js?");

/***/ }),

/***/ "./node_modules/@groupby/beacon-models/partials/metadata/schema.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@groupby/beacon-models/partials/metadata/schema.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constants_1 = __webpack_require__(/*! ../../constants */ \"./node_modules/@groupby/beacon-models/constants/index.js\");\nexports.sanitization = {\n    type: 'array',\n    optional: true,\n    items: {\n        strict: true,\n        type: 'object',\n        properties: {\n            key: { type: 'string', rules: ['trim', 'lower'], maxLength: constants_1.MAX_STR_LENGTH },\n            value: { type: 'string', rules: ['trim', 'lower'], maxLength: constants_1.MAX_STR_LENGTH },\n        },\n    },\n};\nexports.validation = {\n    type: 'array',\n    optional: true,\n    items: {\n        strict: true,\n        type: 'object',\n        properties: {\n            key: { type: 'string' },\n            value: { type: 'string' },\n        },\n    },\n};\n\n\n//# sourceURL=webpack:///./node_modules/@groupby/beacon-models/partials/metadata/schema.js?");

/***/ }),

/***/ "./node_modules/async/dist/async.mjs":
/*!*******************************************!*\
  !*** ./node_modules/async/dist/async.mjs ***!
  \*******************************************/
/*! exports provided: default, apply, applyEach, applyEachSeries, asyncify, auto, autoInject, cargo, cargoQueue, compose, concat, concatLimit, concatSeries, constant, detect, detectLimit, detectSeries, dir, doUntil, doWhilst, each, eachLimit, eachOf, eachOfLimit, eachOfSeries, eachSeries, ensureAsync, every, everyLimit, everySeries, filter, filterLimit, filterSeries, forever, groupBy, groupByLimit, groupBySeries, log, map, mapLimit, mapSeries, mapValues, mapValuesLimit, mapValuesSeries, memoize, nextTick, parallel, parallelLimit, priorityQueue, queue, race, reduce, reduceRight, reflect, reflectAll, reject, rejectLimit, rejectSeries, retry, retryable, seq, series, setImmediate, some, someLimit, someSeries, sortBy, timeout, times, timesLimit, timesSeries, transform, tryEach, unmemoize, until, waterfall, whilst, all, allLimit, allSeries, any, anyLimit, anySeries, find, findLimit, findSeries, flatMap, flatMapLimit, flatMapSeries, forEach, forEachSeries, forEachLimit, forEachOf, forEachOfSeries, forEachOfLimit, inject, foldl, foldr, select, selectLimit, selectSeries, wrapSync, during, doDuring */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"apply\", function() { return apply; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"applyEach\", function() { return applyEach$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"applyEachSeries\", function() { return applyEachSeries; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"asyncify\", function() { return asyncify; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"auto\", function() { return auto; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"autoInject\", function() { return autoInject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cargo\", function() { return cargo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cargoQueue\", function() { return cargo$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"compose\", function() { return compose; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"concat\", function() { return concat$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"concatLimit\", function() { return concatLimit$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"concatSeries\", function() { return concatSeries$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"constant\", function() { return constant; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"detect\", function() { return detect$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"detectLimit\", function() { return detectLimit$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"detectSeries\", function() { return detectSeries$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dir\", function() { return dir; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"doUntil\", function() { return doUntil; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"doWhilst\", function() { return doWhilst$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"each\", function() { return each; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eachLimit\", function() { return eachLimit$2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eachOf\", function() { return eachOf$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eachOfLimit\", function() { return eachOfLimit$2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eachOfSeries\", function() { return eachOfSeries$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eachSeries\", function() { return eachSeries$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ensureAsync\", function() { return ensureAsync; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"every\", function() { return every$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"everyLimit\", function() { return everyLimit$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"everySeries\", function() { return everySeries$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"filter\", function() { return filter$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"filterLimit\", function() { return filterLimit$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"filterSeries\", function() { return filterSeries$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"forever\", function() { return forever$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"groupBy\", function() { return groupBy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"groupByLimit\", function() { return groupByLimit$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"groupBySeries\", function() { return groupBySeries; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"log\", function() { return log; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"map\", function() { return map$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapLimit\", function() { return mapLimit$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapSeries\", function() { return mapSeries$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapValues\", function() { return mapValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapValuesLimit\", function() { return mapValuesLimit$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapValuesSeries\", function() { return mapValuesSeries; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"memoize\", function() { return memoize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"nextTick\", function() { return nextTick; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parallel\", function() { return parallel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parallelLimit\", function() { return parallelLimit; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"priorityQueue\", function() { return priorityQueue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"queue\", function() { return queue$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"race\", function() { return race$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"reduce\", function() { return reduce$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"reduceRight\", function() { return reduceRight; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"reflect\", function() { return reflect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"reflectAll\", function() { return reflectAll; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"reject\", function() { return reject$2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rejectLimit\", function() { return rejectLimit$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rejectSeries\", function() { return rejectSeries$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"retry\", function() { return retry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"retryable\", function() { return retryable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"seq\", function() { return seq; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"series\", function() { return series; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setImmediate\", function() { return setImmediate$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"some\", function() { return some$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"someLimit\", function() { return someLimit$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"someSeries\", function() { return someSeries$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sortBy\", function() { return sortBy$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"timeout\", function() { return timeout; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"times\", function() { return times; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"timesLimit\", function() { return timesLimit; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"timesSeries\", function() { return timesSeries; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return transform; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tryEach\", function() { return tryEach$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"unmemoize\", function() { return unmemoize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"until\", function() { return until; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"waterfall\", function() { return waterfall$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"whilst\", function() { return whilst$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"all\", function() { return every$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"allLimit\", function() { return everyLimit$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"allSeries\", function() { return everySeries$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"any\", function() { return some$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"anyLimit\", function() { return someLimit$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"anySeries\", function() { return someSeries$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"find\", function() { return detect$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findLimit\", function() { return detectLimit$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findSeries\", function() { return detectSeries$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"flatMap\", function() { return concat$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"flatMapLimit\", function() { return concatLimit$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"flatMapSeries\", function() { return concatSeries$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"forEach\", function() { return each; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"forEachSeries\", function() { return eachSeries$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"forEachLimit\", function() { return eachLimit$2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"forEachOf\", function() { return eachOf$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"forEachOfSeries\", function() { return eachOfSeries$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"forEachOfLimit\", function() { return eachOfLimit$2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inject\", function() { return reduce$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"foldl\", function() { return reduce$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"foldr\", function() { return reduceRight; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"select\", function() { return filter$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"selectLimit\", function() { return filterLimit$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"selectSeries\", function() { return filterSeries$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"wrapSync\", function() { return asyncify; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"during\", function() { return whilst$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"doDuring\", function() { return doWhilst$1; });\n/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @returns {Function} the partially-applied function\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nfunction apply(fn, ...args) {\n    return (...callArgs) => fn(...args,...callArgs);\n}\n\nfunction initialParams (fn) {\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        return fn.call(this, args, callback);\n    };\n}\n\n/* istanbul ignore file */\n\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return (fn, ...args) => defer(() => fn(...args));\n}\n\nvar _defer;\n\nif (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nvar setImmediate$1 = wrap(_defer);\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    if (isAsync(func)) {\n        return function (...args/*, callback*/) {\n            const callback = args.pop();\n            const promise = func.apply(this, args);\n            return handlePromise(promise, callback)\n        }\n    }\n\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (result && typeof result.then === 'function') {\n            return handlePromise(result, callback)\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction handlePromise(promise, callback) {\n    return promise.then(value => {\n        invokeCallback(callback, null, value);\n    }, err => {\n        invokeCallback(callback, err && err.message ? err : new Error(err));\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (err) {\n        setImmediate$1(e => { throw e }, err);\n    }\n}\n\nfunction isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n}\n\nfunction isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n}\n\nfunction wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') throw new Error('expected a function')\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n}\n\n// conditionally promisify a function.\n// only return a promise if a callback is omitted\nfunction awaitify (asyncFn, arity = asyncFn.length) {\n    if (!arity) throw new Error('arity is undefined')\n    function awaitable (...args) {\n        if (typeof args[arity - 1] === 'function') {\n            return asyncFn.apply(this, args)\n        }\n\n        return new Promise((resolve, reject) => {\n            args[arity - 1] = (err, ...cbArgs) => {\n                if (err) return reject(err)\n                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n            };\n            asyncFn.apply(this, args);\n        })\n    }\n\n    return awaitable\n}\n\nfunction applyEach (eachfn) {\n    return function applyEach(fns, ...callArgs) {\n        const go = awaitify(function (callback) {\n            var that = this;\n            return eachfn(fns, (fn, cb) => {\n                wrapAsync(fn).apply(that, callArgs.concat(cb));\n            }, callback);\n        });\n        return go;\n    };\n}\n\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n    var _iteratee = wrapAsync(iteratee);\n\n    return eachfn(arr, (value, _, iterCb) => {\n        var index = counter++;\n        _iteratee(value, (err, v) => {\n            results[index] = v;\n            iterCb(err);\n        });\n    }, err => {\n        callback(err, results);\n    });\n}\n\nfunction isArrayLike(value) {\n    return value &&\n        typeof value.length === 'number' &&\n        value.length >= 0 &&\n        value.length % 1 === 0;\n}\n\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nconst breakLoop = {};\n\nfunction once(fn) {\n    function wrapper (...args) {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    }\n    Object.assign(wrapper, fn);\n    return wrapper\n}\n\nfunction getIterator (coll) {\n    return coll[Symbol.iterator] && coll[Symbol.iterator]();\n}\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? {value: coll[i], key: i} : null;\n    }\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done)\n            return null;\n        i++;\n        return {value: item.value, key: i};\n    }\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        return i < len ? {value: obj[key], key} : null;\n    };\n}\n\nfunction createIterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n\nfunction onlyOnce(fn) {\n    return function (...args) {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    };\n}\n\n// for async generators\nfunction asyncEachOfLimit(generator, limit, iteratee, callback) {\n    let done = false;\n    let canceled = false;\n    let awaiting = false;\n    let running = 0;\n    let idx = 0;\n\n    function replenish() {\n        //console.log('replenish')\n        if (running >= limit || awaiting || done) return\n        //console.log('replenish awaiting')\n        awaiting = true;\n        generator.next().then(({value, done: iterDone}) => {\n            //console.log('got value', value)\n            if (canceled || done) return\n            awaiting = false;\n            if (iterDone) {\n                done = true;\n                if (running <= 0) {\n                    //console.log('done nextCb')\n                    callback(null);\n                }\n                return;\n            }\n            running++;\n            iteratee(value, idx, iterateeCallback);\n            idx++;\n            replenish();\n        }).catch(handleError);\n    }\n\n    function iterateeCallback(err, result) {\n        //console.log('iterateeCallback')\n        running -= 1;\n        if (canceled) return\n        if (err) return handleError(err)\n\n        if (err === false) {\n            done = true;\n            canceled = true;\n            return\n        }\n\n        if (result === breakLoop || (done && running <= 0)) {\n            done = true;\n            //console.log('done iterCb')\n            return callback(null);\n        }\n        replenish();\n    }\n\n    function handleError(err) {\n        if (canceled) return\n        awaiting = false;\n        done = true;\n        callback(err);\n    }\n\n    replenish();\n}\n\nvar eachOfLimit = (limit) => {\n    return (obj, iteratee, callback) => {\n        callback = once(callback);\n        if (limit <= 0) {\n            throw new RangeError('concurrency limit cannot be less than 1')\n        }\n        if (!obj) {\n            return callback(null);\n        }\n        if (isAsyncGenerator(obj)) {\n            return asyncEachOfLimit(obj, limit, iteratee, callback)\n        }\n        if (isAsyncIterable(obj)) {\n            return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)\n        }\n        var nextElem = createIterator(obj);\n        var done = false;\n        var canceled = false;\n        var running = 0;\n        var looping = false;\n\n        function iterateeCallback(err, value) {\n            if (canceled) return\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            }\n            else if (err === false) {\n                done = true;\n                canceled = true;\n            }\n            else if (value === breakLoop || (done && running <= 0)) {\n                done = true;\n                return callback(null);\n            }\n            else if (!looping) {\n                replenish();\n            }\n        }\n\n        function replenish () {\n            looping = true;\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n            }\n            looping = false;\n        }\n\n        replenish();\n    };\n};\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOfLimit$2 = awaitify(eachOfLimit$1, 4);\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback);\n    var index = 0,\n        completed = 0,\n        {length} = coll,\n        canceled = false;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err === false) {\n            canceled = true;\n        }\n        if (canceled === true) return\n        if (err) {\n            callback(err);\n        } else if ((++completed === length) || value === breakLoop) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nfunction eachOfGeneric (coll, iteratee, callback) {\n    return eachOfLimit$2(coll, Infinity, iteratee, callback);\n}\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each\n * item in `coll`.\n * The `key` is the item's key, or index in the case of an array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\n * var configs = {};\n *\n * async.forEachOf(obj, function (value, key, callback) {\n *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\n *         if (err) return callback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }, function (err) {\n *     if (err) console.error(err.message);\n *     // configs is now a map of JSON data\n *     doSomethingWith(configs);\n * });\n */\nfunction eachOf(coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    return eachOfImplementation(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOf$1 = awaitify(eachOf, 3);\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callback\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\n *     // results is now an array of stats for each file\n * });\n */\nfunction map (coll, iteratee, callback) {\n    return _asyncMap(eachOf$1, coll, iteratee, callback)\n}\nvar map$1 = awaitify(map, 3);\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional. The results\n * for each of the applied async functions are passed to the final callback\n * as an array.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - Returns a function that takes no args other than\n * an optional callback, that is the result of applying the `args` to each\n * of the functions.\n * @example\n *\n * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n *\n * appliedFn((err, results) => {\n *     // results[0] is the results for `enableSearch`\n *     // results[1] is the results for `updateSchema`\n * });\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n *     callback\n * );\n */\nvar applyEach$1 = applyEach(map$1);\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfSeries(coll, iteratee, callback) {\n    return eachOfLimit$2(coll, 1, iteratee, callback)\n}\nvar eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapSeries (coll, iteratee, callback) {\n    return _asyncMap(eachOfSeries$1, coll, iteratee, callback)\n}\nvar mapSeries$1 = awaitify(mapSeries, 3);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - A function, that when called, is the result of\n * appling the `args` to the list of functions.  It takes no args, other than\n * a callback.\n */\nvar applyEachSeries = applyEach(mapSeries$1);\n\nconst PROMISE_SYMBOL = Symbol('promiseCallback');\n\nfunction promiseCallback () {\n    let resolve, reject;\n    function callback (err, ...args) {\n        if (err) return reject(err)\n        resolve(args.length > 1 ? args : args[0]);\n    }\n\n    callback[PROMISE_SYMBOL] = new Promise((res, rej) => {\n        resolve = res,\n        reject = rej;\n    });\n\n    return callback\n}\n\n/**\n * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n * their requirements. Each function can optionally depend on other functions\n * being completed first, and each function is run as soon as its requirements\n * are satisfied.\n *\n * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n * will stop. Further tasks will not execute (so any other functions depending\n * on it will not run), and the main `callback` is immediately called with the\n * error.\n *\n * {@link AsyncFunction}s also receive an object containing the results of functions which\n * have completed so far as the first argument, if they have dependencies. If a\n * task function has no dependencies, it will only be passed a callback.\n *\n * @name auto\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n * defined by that property, i.e. can be used when specifying requirements for\n * other tasks. The function receives one or two arguments:\n * * a `results` object, containing the results of the previously executed\n *   functions, only passed if the task has any dependencies,\n * * a `callback(err, result)` function, which must be called when finished,\n *   passing an `error` (which can be `null`) and the result of the function's\n *   execution.\n * @param {number} [concurrency=Infinity] - An optional `integer` for\n * determining the maximum number of tasks that can be run in parallel. By\n * default, as many as possible.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback. Results are always returned; however, if an\n * error occurs, no further `tasks` will be performed, and the results object\n * will only contain partial results. Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n * @example\n *\n * async.auto({\n *     // this function will just be passed a callback\n *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\n *     showData: ['readData', function(results, cb) {\n *         // results.readData is the file's contents\n *         // ...\n *     }]\n * }, callback);\n *\n * async.auto({\n *     get_data: function(callback) {\n *         console.log('in get_data');\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         console.log('in write_file', JSON.stringify(results));\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         console.log('in email_link', JSON.stringify(results));\n *         // once the file is written let's email a link to it...\n *         // results.write_file contains the filename returned by write_file.\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('results = ', results);\n * });\n */\nfunction auto(tasks, concurrency, callback) {\n    if (typeof concurrency !== 'number') {\n        // concurrency is optional, shift the args.\n        callback = concurrency;\n        concurrency = null;\n    }\n    callback = once(callback || promiseCallback());\n    var numTasks = Object.keys(tasks).length;\n    if (!numTasks) {\n        return callback(null);\n    }\n    if (!concurrency) {\n        concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var canceled = false;\n    var hasError = false;\n\n    var listeners = Object.create(null);\n\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n\n    Object.keys(tasks).forEach(key => {\n        var task = tasks[key];\n        if (!Array.isArray(task)) {\n            // no dependencies\n            enqueueTask(key, [task]);\n            readyToCheck.push(key);\n            return;\n        }\n\n        var dependencies = task.slice(0, task.length - 1);\n        var remainingDependencies = dependencies.length;\n        if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n            readyToCheck.push(key);\n            return;\n        }\n        uncheckedDependencies[key] = remainingDependencies;\n\n        dependencies.forEach(dependencyName => {\n            if (!tasks[dependencyName]) {\n                throw new Error('async.auto task `' + key +\n                    '` has a non-existent dependency `' +\n                    dependencyName + '` in ' +\n                    dependencies.join(', '));\n            }\n            addListener(dependencyName, () => {\n                remainingDependencies--;\n                if (remainingDependencies === 0) {\n                    enqueueTask(key, task);\n                }\n            });\n        });\n    });\n\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n        readyTasks.push(() => runTask(key, task));\n    }\n\n    function processQueue() {\n        if (canceled) return\n        if (readyTasks.length === 0 && runningTasks === 0) {\n            return callback(null, results);\n        }\n        while(readyTasks.length && runningTasks < concurrency) {\n            var run = readyTasks.shift();\n            run();\n        }\n\n    }\n\n    function addListener(taskName, fn) {\n        var taskListeners = listeners[taskName];\n        if (!taskListeners) {\n            taskListeners = listeners[taskName] = [];\n        }\n\n        taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n        var taskListeners = listeners[taskName] || [];\n        taskListeners.forEach(fn => fn());\n        processQueue();\n    }\n\n\n    function runTask(key, task) {\n        if (hasError) return;\n\n        var taskCallback = onlyOnce((err, ...result) => {\n            runningTasks--;\n            if (err === false) {\n                canceled = true;\n                return\n            }\n            if (result.length < 2) {\n                [result] = result;\n            }\n            if (err) {\n                var safeResults = {};\n                Object.keys(results).forEach(rkey => {\n                    safeResults[rkey] = results[rkey];\n                });\n                safeResults[key] = result;\n                hasError = true;\n                listeners = Object.create(null);\n                if (canceled) return\n                callback(err, safeResults);\n            } else {\n                results[key] = result;\n                taskComplete(key);\n            }\n        });\n\n        runningTasks++;\n        var taskFn = wrapAsync(task[task.length - 1]);\n        if (task.length > 1) {\n            taskFn(results, taskCallback);\n        } else {\n            taskFn(taskCallback);\n        }\n    }\n\n    function checkForDeadlocks() {\n        // Kahn's algorithm\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n        var currentTask;\n        var counter = 0;\n        while (readyToCheck.length) {\n            currentTask = readyToCheck.pop();\n            counter++;\n            getDependents(currentTask).forEach(dependent => {\n                if (--uncheckedDependencies[dependent] === 0) {\n                    readyToCheck.push(dependent);\n                }\n            });\n        }\n\n        if (counter !== numTasks) {\n            throw new Error(\n                'async.auto cannot execute tasks due to a recursive dependency'\n            );\n        }\n    }\n\n    function getDependents(taskName) {\n        var result = [];\n        Object.keys(tasks).forEach(key => {\n            const task = tasks[key];\n            if (Array.isArray(task) && task.indexOf(taskName) >= 0) {\n                result.push(key);\n            }\n        });\n        return result;\n    }\n\n    return callback[PROMISE_SYMBOL]\n}\n\nvar FN_ARGS = /^(?:async\\s+)?(?:function)?\\s*\\w*\\s*\\(\\s*([^)]+)\\s*\\)(?:\\s*{)/;\nvar ARROW_FN_ARGS = /^(?:async\\s+)?\\(?\\s*([^)=]+)\\s*\\)?(?:\\s*=>)/;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /(=.+)?(\\s*)$/;\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\nfunction parseParams(func) {\n    const src = func.toString().replace(STRIP_COMMENTS, '');\n    let match = src.match(FN_ARGS);\n    if (!match) {\n        match = src.match(ARROW_FN_ARGS);\n    }\n    if (!match) throw new Error('could not parse args in autoInject\\nSource:\\n' + src)\n    let [, args] = match;\n    return args\n        .replace(/\\s/g, '')\n        .split(FN_ARG_SPLIT)\n        .map((arg) => arg.replace(FN_ARG, '').trim());\n}\n\n/**\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n * tasks are specified as parameters to the function, after the usual callback\n * parameter, with the parameter names matching the names of the tasks it\n * depends on. This can provide even more readable task graphs which can be\n * easier to maintain.\n *\n * If a final callback is specified, the task results are similarly injected,\n * specified as named parameters after the initial error parameter.\n *\n * The autoInject function is purely syntactic sugar and its semantics are\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n *\n * @name autoInject\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n * when specifying requirements for other tasks.\n * * The `callback` parameter is a `callback(err, result)` which must be called\n *   when finished, passing an `error` (which can be `null`) and the result of\n *   the function's execution. The remaining parameters name other tasks on\n *   which the task is dependent, and the results from those tasks are the\n *   arguments of those parameters.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback, and a `results` object with any completed\n * task results, similar to `auto`.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * //  The example from `auto` can be rewritten as follows:\n * async.autoInject({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     },\n *     email_link: function(write_file, callback) {\n *         // once the file is written let's email a link to it...\n *         // write_file contains the filename returned by write_file.\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n *\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\n * // will not work with plain functions, since the parameter names will be\n * // collapsed to a single letter identifier.  To work around this, you can\n * // explicitly specify the names of the parameters your task function needs\n * // in an array, similar to Angular.js dependency injection.\n *\n * // This still has an advantage over plain `auto`, since the results a task\n * // depends on are still spread into arguments.\n * async.autoInject({\n *     //...\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(write_file, callback) {\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }]\n *     //...\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n */\nfunction autoInject(tasks, callback) {\n    var newTasks = {};\n\n    Object.keys(tasks).forEach(key => {\n        var taskFn = tasks[key];\n        var params;\n        var fnIsAsync = isAsync(taskFn);\n        var hasNoDeps =\n            (!fnIsAsync && taskFn.length === 1) ||\n            (fnIsAsync && taskFn.length === 0);\n\n        if (Array.isArray(taskFn)) {\n            params = [...taskFn];\n            taskFn = params.pop();\n\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n        } else if (hasNoDeps) {\n            // no dependencies, use the function as-is\n            newTasks[key] = taskFn;\n        } else {\n            params = parseParams(taskFn);\n            if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {\n                throw new Error(\"autoInject task functions require explicit parameters.\");\n            }\n\n            // remove callback param\n            if (!fnIsAsync) params.pop();\n\n            newTasks[key] = params.concat(newTask);\n        }\n\n        function newTask(results, taskCb) {\n            var newArgs = params.map(name => results[name]);\n            newArgs.push(taskCb);\n            wrapAsync(taskFn)(...newArgs);\n        }\n    });\n\n    return auto(newTasks, callback);\n}\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nclass DLL {\n    constructor() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n\n    removeLink(node) {\n        if (node.prev) node.prev.next = node.next;\n        else this.head = node.next;\n        if (node.next) node.next.prev = node.prev;\n        else this.tail = node.prev;\n\n        node.prev = node.next = null;\n        this.length -= 1;\n        return node;\n    }\n\n    empty () {\n        while(this.head) this.shift();\n        return this;\n    }\n\n    insertAfter(node, newNode) {\n        newNode.prev = node;\n        newNode.next = node.next;\n        if (node.next) node.next.prev = newNode;\n        else this.tail = newNode;\n        node.next = newNode;\n        this.length += 1;\n    }\n\n    insertBefore(node, newNode) {\n        newNode.prev = node.prev;\n        newNode.next = node;\n        if (node.prev) node.prev.next = newNode;\n        else this.head = newNode;\n        node.prev = newNode;\n        this.length += 1;\n    }\n\n    unshift(node) {\n        if (this.head) this.insertBefore(this.head, node);\n        else setInitial(this, node);\n    }\n\n    push(node) {\n        if (this.tail) this.insertAfter(this.tail, node);\n        else setInitial(this, node);\n    }\n\n    shift() {\n        return this.head && this.removeLink(this.head);\n    }\n\n    pop() {\n        return this.tail && this.removeLink(this.tail);\n    }\n\n    toArray() {\n        return [...this]\n    }\n\n    *[Symbol.iterator] () {\n        var cur = this.head;\n        while (cur) {\n            yield cur.data;\n            cur = cur.next;\n        }\n    }\n\n    remove (testFn) {\n        var curr = this.head;\n        while(curr) {\n            var {next} = curr;\n            if (testFn(curr)) {\n                this.removeLink(curr);\n            }\n            curr = next;\n        }\n        return this;\n    }\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\nfunction queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    }\n    else if(concurrency === 0) {\n        throw new RangeError('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n    const events = {\n        error: [],\n        drain: [],\n        saturated: [],\n        unsaturated: [],\n        empty: []\n    };\n\n    function on (event, handler) {\n        events[event].push(handler);\n    }\n\n    function once (event, handler) {\n        const handleAndRemove = (...args) => {\n            off(event, handleAndRemove);\n            handler(...args);\n        };\n        events[event].push(handleAndRemove);\n    }\n\n    function off (event, handler) {\n        if (!event) return Object.keys(events).forEach(ev => events[ev] = [])\n        if (!handler) return events[event] = []\n        events[event] = events[event].filter(ev => ev !== handler);\n    }\n\n    function trigger (event, ...args) {\n        events[event].forEach(handler => handler(...args));\n    }\n\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, rejectOnError, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n\n        var res, rej;\n        function promiseCallback (err, ...args) {\n            // we don't care about the error, let the global error handler\n            // deal with it\n            if (err) return rejectOnError ? rej(err) : res()\n            if (args.length <= 1) return res(args[0])\n            res(args);\n        }\n\n        var item = {\n            data,\n            callback: rejectOnError ?\n                promiseCallback :\n                (callback || promiseCallback)\n        };\n\n        if (insertAtFront) {\n            q._tasks.unshift(item);\n        } else {\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n\n        if (rejectOnError || !callback) {\n            return new Promise((resolve, reject) => {\n                res = resolve;\n                rej = reject;\n            })\n        }\n    }\n\n    function _createCB(tasks) {\n        return function (err, ...args) {\n            numRunning -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n\n                var index = workersList.indexOf(task);\n                if (index === 0) {\n                    workersList.shift();\n                } else if (index > 0) {\n                    workersList.splice(index, 1);\n                }\n\n                task.callback(err, ...args);\n\n                if (err != null) {\n                    trigger('error', err, task.data);\n                }\n            }\n\n            if (numRunning <= (q.concurrency - q.buffer) ) {\n                trigger('unsaturated');\n            }\n\n            if (q.idle()) {\n                trigger('drain');\n            }\n            q.process();\n        };\n    }\n\n    function _maybeDrain(data) {\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            setImmediate$1(() => trigger('drain'));\n            return true\n        }\n        return false\n    }\n\n    const eventMethod = (name) => (handler) => {\n        if (!handler) {\n            return new Promise((resolve, reject) => {\n                once(name, (err, data) => {\n                    if (err) return reject(err)\n                    resolve(data);\n                });\n            })\n        }\n        off(name);\n        on(name, handler);\n\n    };\n\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        *[Symbol.iterator] () {\n            yield* q._tasks[Symbol.iterator]();\n        },\n        concurrency,\n        payload,\n        buffer: concurrency / 4,\n        started: false,\n        paused: false,\n        push (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, false, callback))\n            }\n            return _insert(data, false, false, callback);\n        },\n        pushAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, true, callback))\n            }\n            return _insert(data, false, true, callback);\n        },\n        kill () {\n            off();\n            q._tasks.empty();\n        },\n        unshift (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, false, callback))\n            }\n            return _insert(data, true, false, callback);\n        },\n        unshiftAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, true, callback))\n            }\n            return _insert(data, true, true, callback);\n        },\n        remove (testFn) {\n            q._tasks.remove(testFn);\n        },\n        process () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                var tasks = [], data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n                }\n\n                numRunning += 1;\n\n                if (q._tasks.length === 0) {\n                    trigger('empty');\n                }\n\n                if (numRunning === q.concurrency) {\n                    trigger('saturated');\n                }\n\n                var cb = onlyOnce(_createCB(tasks));\n                _worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length () {\n            return q._tasks.length;\n        },\n        running () {\n            return numRunning;\n        },\n        workersList () {\n            return workersList;\n        },\n        idle() {\n            return q._tasks.length + numRunning === 0;\n        },\n        pause () {\n            q.paused = true;\n        },\n        resume () {\n            if (q.paused === false) { return; }\n            q.paused = false;\n            setImmediate$1(q.process);\n        }\n    };\n    // define these as fixed properties, so people get useful errors when updating\n    Object.defineProperties(q, {\n        saturated: {\n            writable: false,\n            value: eventMethod('saturated')\n        },\n        unsaturated: {\n            writable: false,\n            value: eventMethod('unsaturated')\n        },\n        empty: {\n            writable: false,\n            value: eventMethod('empty')\n        },\n        drain: {\n            writable: false,\n            value: eventMethod('drain')\n        },\n        error: {\n            writable: false,\n            value: eventMethod('error')\n        },\n    });\n    return q;\n}\n\n/**\n * Creates a `cargo` object with the specified payload. Tasks added to the\n * cargo will be processed altogether (up to the `payload` limit). If the\n * `worker` is in progress, the task is queued until it becomes available. Once\n * the `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargo and inner queue.\n * @example\n *\n * // create a cargo object with payload 2\n * var cargo = async.cargo(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2);\n *\n * // add some items\n * cargo.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargo.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * await cargo.push({name: 'baz'});\n * console.log('finished processing baz');\n */\nfunction cargo(worker, payload) {\n    return queue(worker, 1, payload);\n}\n\n/**\n * Creates a `cargoQueue` object with the specified payload. Tasks added to the\n * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.\n * If the all `workers` are in progress, the task is queued until one becomes available. Once\n * a `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n * the cargoQueue passes an array of tasks to multiple parallel workers.\n *\n * @name cargoQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @see [async.cargo]{@link module:ControlFLow.cargo}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargoQueue and inner queue.\n * @example\n *\n * // create a cargoQueue object with payload 2 and concurrency 2\n * var cargoQueue = async.cargoQueue(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2, 2);\n *\n * // add some items\n * cargoQueue.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargoQueue.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * cargoQueue.push({name: 'baz'}, function(err) {\n *     console.log('finished processing baz');\n * });\n * cargoQueue.push({name: 'boo'}, function(err) {\n *     console.log('finished processing boo');\n * });\n */\nfunction cargo$1(worker, concurrency, payload) {\n    return queue(worker, concurrency, payload);\n}\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.reduce([1,2,3], 0, function(memo, item, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         callback(null, memo + item)\n *     });\n * }, function(err, result) {\n *     // result is now equal to the last value of memo, which is 6\n * });\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = once(callback);\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfSeries$1(coll, (x, i, iterCb) => {\n        _iteratee(memo, x, (err, v) => {\n            memo = v;\n            iterCb(err);\n        });\n    }, err => callback(err, memo));\n}\nvar reduce$1 = awaitify(reduce, 4);\n\n/**\n * Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });\n */\nfunction seq(...functions) {\n    var _functions = functions.map(wrapAsync);\n    return function (...args) {\n        var that = this;\n\n        var cb = args[args.length - 1];\n        if (typeof cb == 'function') {\n            args.pop();\n        } else {\n            cb = promiseCallback();\n        }\n\n        reduce$1(_functions, args, (newargs, fn, iterCb) => {\n            fn.apply(that, newargs.concat((err, ...nextargs) => {\n                iterCb(err, nextargs);\n            }));\n        },\n        (err, results) => cb(err, ...results));\n\n        return cb[PROMISE_SYMBOL]\n    };\n}\n\n/**\n * Creates a function which is a composition of the passed asynchronous\n * functions. Each function consumes the return value of the function that\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n *\n * If the last argument to the composed function is not a function, a promise\n * is returned when you call it.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name compose\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n * @example\n *\n * function add1(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n + 1);\n *     }, 10);\n * }\n *\n * function mul3(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n * 3);\n *     }, 10);\n * }\n *\n * var add1mul3 = async.compose(mul3, add1);\n * add1mul3(4, function (err, result) {\n *     // result now equals 15\n * });\n */\nfunction compose(...args) {\n    return seq(...args.reverse());\n}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapLimit (coll, limit, iteratee, callback) {\n    return _asyncMap(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar mapLimit$1 = awaitify(mapLimit, 4);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapLimit\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, ...args) => {\n            if (err) return iterCb(err);\n            return iterCb(err, args);\n        });\n    }, (err, mapResults) => {\n        var result = [];\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                result = result.concat(...mapResults[i]);\n            }\n        }\n\n        return callback(err, result);\n    });\n}\nvar concatLimit$1 = awaitify(concatLimit, 4);\n\n/**\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. The results array will be returned in\n * the original order of `coll` passed to the `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @alias flatMap\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {\n *     // files is now a list of filenames that exist in the 3 directories\n * });\n */\nfunction concat(coll, iteratee, callback) {\n    return concatLimit$1(coll, Infinity, iteratee, callback)\n}\nvar concat$1 = awaitify(concat, 3);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapSeries\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n * The iteratee should complete with an array an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatSeries(coll, iteratee, callback) {\n    return concatLimit$1(coll, 1, iteratee, callback)\n}\nvar concatSeries$1 = awaitify(concatSeries, 3);\n\n/**\n * Returns a function that when called, calls-back with the values provided.\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n * [`auto`]{@link module:ControlFlow.auto}.\n *\n * @name constant\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {...*} arguments... - Any number of arguments to automatically invoke\n * callback with.\n * @returns {AsyncFunction} Returns a function that when invoked, automatically\n * invokes the callback with the previous given arguments.\n * @example\n *\n * async.waterfall([\n *     async.constant(42),\n *     function (value, next) {\n *         // value === 42\n *     },\n *     //...\n * ], callback);\n *\n * async.waterfall([\n *     async.constant(filename, \"utf8\"),\n *     fs.readFile,\n *     function (fileData, next) {\n *         //...\n *     }\n *     //...\n * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n * }, callback);\n */\nfunction constant(...args) {\n    return function (...ignoredArgs/*, callback*/) {\n        var callback = ignoredArgs.pop();\n        return callback(null, ...args);\n    };\n}\n\nfunction _createTester(check, getResult) {\n    return (eachfn, arr, _iteratee, cb) => {\n        var testPassed = false;\n        var testResult;\n        const iteratee = wrapAsync(_iteratee);\n        eachfn(arr, (value, _, callback) => {\n            iteratee(value, (err, result) => {\n                if (err || err === false) return callback(err);\n\n                if (check(result) && !testResult) {\n                    testPassed = true;\n                    testResult = getResult(true, value);\n                    return callback(null, breakLoop);\n                }\n                callback();\n            });\n        }, err => {\n            if (err) return cb(err);\n            cb(null, testPassed ? testResult : getResult(false));\n        });\n    };\n}\n\n/**\n * Returns the first value in `coll` that passes an async truth test. The\n * `iteratee` is applied in parallel, meaning the first iteratee to return\n * `true` will fire the detect `callback` with that result. That means the\n * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * async.detect(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // result now equals the first file in the list that exists\n * });\n */\nfunction detect(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)\n}\nvar detect$1 = awaitify(detect, 3);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar detectLimit$1 = awaitify(detectLimit, 4);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findSeries\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectSeries(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback)\n}\n\nvar detectSeries$1 = awaitify(detectSeries, 3);\n\nfunction consoleFunc(name) {\n    return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {\n        if (typeof console === 'object') {\n            if (err) {\n                if (console.error) {\n                    console.error(err);\n                }\n            } else if (console[name]) {\n                resultArgs.forEach(x => console[name](x));\n            }\n        }\n    })\n}\n\n/**\n * Logs the result of an [`async` function]{@link AsyncFunction} to the\n * `console` using `console.dir` to display the properties of the resulting object.\n * Only works in Node.js or in browsers that support `console.dir` and\n * `console.error` (such as FF and Chrome).\n * If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\nvar dir = consoleFunc('dir');\n\n/**\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n * the order of operations, the arguments `test` and `iteratee` are switched.\n *\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n *\n * @name doWhilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped.\n * `callback` will be passed an error and any arguments passed to the final\n * `iteratee`'s callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results;\n\n    function next(err, ...args) {\n        if (err) return callback(err);\n        if (err === false) return;\n        results = args;\n        _test(...args, check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return check(null, true);\n}\n\nvar doWhilst$1 = awaitify(doWhilst, 3);\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doUntil(iteratee, test, callback) {\n    const _test = wrapAsync(test);\n    return doWhilst$1(iteratee, (...args) => {\n        const cb = args.pop();\n        _test(...args, (err, truth) => cb (err, !truth));\n    }, callback);\n}\n\nfunction _withoutIndex(iteratee) {\n    return (value, index, callback) => iteratee(value, callback);\n}\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // assuming openFiles is an array of file names and saveFile is a function\n * // to save the modified contents of that file:\n *\n * async.each(openFiles, saveFile, function(err){\n *   // if any of the saves produced an error, err would equal that error\n * });\n *\n * // assuming openFiles is an array of file names\n * async.each(openFiles, function(file, callback) {\n *\n *     // Perform operation on file here.\n *     console.log('Processing file ' + file);\n *\n *     if( file.length > 32 ) {\n *       console.log('This file name is too long');\n *       callback('File name too long');\n *     } else {\n *       // Do work to process file here\n *       console.log('File processed');\n *       callback();\n *     }\n * }, function(err) {\n *     // if any of the file processing produced an error, err would equal that error\n *     if( err ) {\n *       // One of the iterations produced an error.\n *       // All processing will now stop.\n *       console.log('A file failed to process');\n *     } else {\n *       console.log('All files have been processed successfully');\n *     }\n * });\n */\nfunction eachLimit(coll, iteratee, callback) {\n    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\nvar each = awaitify(eachLimit, 3);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfLimit`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\nvar eachLimit$2 = awaitify(eachLimit$1, 4);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n * in series and therefore the iteratee functions will complete in order.\n\n * @name eachSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfSeries`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachSeries(coll, iteratee, callback) {\n    return eachLimit$2(coll, 1, iteratee, callback)\n}\nvar eachSeries$1 = awaitify(eachSeries, 3);\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained. ES2017 `async` functions are returned as-is -- they are immune\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        var sync = true;\n        args.push((...innerArgs) => {\n            if (sync) {\n                setImmediate$1(() => callback(...innerArgs));\n            } else {\n                callback(...innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    };\n}\n\n/**\n * Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.every(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then every file exists\n * });\n */\nfunction every(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)\n}\nvar every$1 = awaitify(every, 3);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everyLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar everyLimit$1 = awaitify(everyLimit, 4);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in series.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everySeries(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar everySeries$1 = awaitify(everySeries, 3);\n\nfunction filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            truthValues[index] = !!v;\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        var results = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (truthValues[i]) results.push(arr[i]);\n        }\n        callback(null, results);\n    });\n}\n\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            if (err) return iterCb(err);\n            if (v) {\n                results.push({index, value: x});\n            }\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        callback(null, results\n            .sort((a, b) => a.index - b.index)\n            .map(v => v.value));\n    });\n}\n\nfunction _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    return filter(eachfn, coll, wrapAsync(iteratee), callback);\n}\n\n/**\n * Returns a new array of all the values in `coll` which pass an async truth\n * test. This operation is performed in parallel, but the results array will be\n * in the same order as the original.\n *\n * @name filter\n * @static\n * @memberOf module:Collections\n * @method\n * @alias select\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.filter(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of the existing files\n * });\n */\nfunction filter (coll, iteratee, callback) {\n    return _filter(eachOf$1, coll, iteratee, callback)\n}\nvar filter$1 = awaitify(filter, 3);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterLimit (coll, limit, iteratee, callback) {\n    return _filter(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar filterLimit$1 = awaitify(filterLimit, 4);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results)\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterSeries (coll, iteratee, callback) {\n    return _filter(eachOfSeries$1, coll, iteratee, callback)\n}\nvar filterSeries$1 = awaitify(filterSeries, 3);\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the callback then `errback` is called with the\n * error, and execution stops, otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @returns {Promise} a promise that rejects if an error occurs and an errback\n * is not passed\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = onlyOnce(errback);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n        if (err) return done(err);\n        if (err === false) return;\n        task(next);\n    }\n    return next();\n}\nvar forever$1 = awaitify(forever, 2);\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupByLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, key) => {\n            if (err) return iterCb(err);\n            return iterCb(err, {key, val});\n        });\n    }, (err, mapResults) => {\n        var result = {};\n        // from MDN, handle object having an `hasOwnProperty` prop\n        var {hasOwnProperty} = Object.prototype;\n\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                var {key} = mapResults[i];\n                var {val} = mapResults[i];\n\n                if (hasOwnProperty.call(result, key)) {\n                    result[key].push(val);\n                } else {\n                    result[key] = [val];\n                }\n            }\n        }\n\n        return callback(err, result);\n    });\n}\n\nvar groupByLimit$1 = awaitify(groupByLimit, 4);\n\n/**\n * Returns a new object, where each value corresponds to an array of items, from\n * `coll`, that returned the corresponding key. That is, the keys of the object\n * correspond to the values passed to the `iteratee` callback.\n *\n * Note: Since this function applies the `iteratee` to each item in parallel,\n * there is no guarantee that the `iteratee` functions will complete in order.\n * However, the values for each key in the `result` will be in the same order as\n * the original `coll`. For Objects, the values will roughly be in the order of\n * the original Objects' keys (but this can vary across JavaScript engines).\n *\n * @name groupBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {\n *     db.findById(userId, function(err, user) {\n *         if (err) return callback(err);\n *         return callback(null, user.age);\n *     });\n * }, function(err, result) {\n *     // result is object containing the userIds grouped by age\n *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};\n * });\n */\nfunction groupBy (coll, iteratee, callback) {\n    return groupByLimit$1(coll, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupBySeries (coll, iteratee, callback) {\n    return groupByLimit$1(coll, 1, iteratee, callback)\n}\n\n/**\n * Logs the result of an `async` function to the `console`. Only works in\n * Node.js or in browsers that support `console.log` and `console.error` (such\n * as FF and Chrome). If multiple arguments are returned from the async\n * function, `console.log` is called on each argument in order.\n *\n * @name log\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, 'hello ' + name);\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\nvar log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback);\n    var newObj = {};\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfLimit(limit)(obj, (val, key, next) => {\n        _iteratee(val, key, (err, result) => {\n            if (err) return next(err);\n            newObj[key] = result;\n            next(err);\n        });\n    }, err => callback(err, newObj));\n}\n\nvar mapValuesLimit$1 = awaitify(mapValuesLimit, 4);\n\n/**\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n *\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\n * callback for when it has finished processing. Each of these callbacks takes\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n * passes an error to its callback, the main `callback` (for the `mapValues`\n * function) is immediately called with the error.\n *\n * Note, the order of the keys in the result is not guaranteed.  The keys will\n * be roughly in the order they complete, (but this is very engine-specific)\n *\n * @name mapValues\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.mapValues({\n *     f1: 'file1',\n *     f2: 'file2',\n *     f3: 'file3'\n * }, function (file, key, callback) {\n *   fs.stat(file, callback);\n * }, function(err, result) {\n *     // result is now a map of stats for each file, e.g.\n *     // {\n *     //     f1: [stats for file1],\n *     //     f2: [stats for file2],\n *     //     f3: [stats for file3]\n *     // }\n * });\n */\nfunction mapValues(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesSeries(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, 1, iteratee, callback)\n}\n\n/**\n * Caches the results of an async function. When creating a hash to store\n * function results against, the callback is omitted from the hash and an\n * optional hash function can be used.\n *\n * **Note: if the async function errs, the result will not be cached and\n * subsequent calls will call the wrapped function.**\n *\n * If no hash function is specified, the first argument is used as a hash key,\n * which may work reasonably if it is a string or a data type that converts to a\n * distinct string. Note that objects and arrays will not behave reasonably.\n * Neither will cases where the other arguments are significant. In such cases,\n * specify your own hash function.\n *\n * The cache of results is exposed as the `memo` property of the function\n * returned by `memoize`.\n *\n * @name memoize\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n * @param {Function} hasher - An optional function for generating a custom hash\n * for storing results. It has all the arguments applied to it apart from the\n * callback, and must be synchronous.\n * @returns {AsyncFunction} a memoized version of `fn`\n * @example\n *\n * var slow_fn = function(name, callback) {\n *     // do something\n *     callback(null, result);\n * };\n * var fn = async.memoize(slow_fn);\n *\n * // fn can now be used as if it were slow_fn\n * fn('some name', function() {\n *     // callback\n * });\n */\nfunction memoize(fn, hasher = v => v) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    var _fn = wrapAsync(fn);\n    var memoized = initialParams((args, callback) => {\n        var key = hasher(...args);\n        if (key in memo) {\n            setImmediate$1(() => callback(null, ...memo[key]));\n        } else if (key in queues) {\n            queues[key].push(callback);\n        } else {\n            queues[key] = [callback];\n            _fn(...args, (err, ...resultArgs) => {\n                // #1465 don't memoize if an error occurred\n                if (!err) {\n                    memo[key] = resultArgs;\n                }\n                var q = queues[key];\n                delete queues[key];\n                for (var i = 0, l = q.length; i < l; i++) {\n                    q[i](err, ...resultArgs);\n                }\n            });\n        }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n}\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer$1;\n\nif (hasNextTick) {\n    _defer$1 = process.nextTick;\n} else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n} else {\n    _defer$1 = fallback;\n}\n\nvar nextTick = wrap(_defer$1);\n\nvar _parallel = awaitify((eachfn, tasks, callback) => {\n    var results = isArrayLike(tasks) ? [] : {};\n\n    eachfn(tasks, (task, key, taskCb) => {\n        wrapAsync(task)((err, ...result) => {\n            if (result.length < 2) {\n                [result] = result;\n            }\n            results[key] = result;\n            taskCb(err);\n        });\n    }, err => callback(err, results));\n}, 3);\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // the results array will equal ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equals to: {one: 1, two: 2}\n * });\n */\nfunction parallel(tasks, callback) {\n    return _parallel(eachOf$1, tasks, callback);\n}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n */\nfunction parallelLimit(tasks, limit, callback) {\n    return _parallel(eachOfLimit(limit), tasks, callback);\n}\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Iterable} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {number} payload - an integer that specifies how many items are\n * passed to the worker function at a time. only applies if this is a\n * [cargo]{@link module:ControlFlow.cargo} object\n * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n * a promise that rejects if an error occurs.\n * @property {AsyncFunction} unshirtAsync - the same as `q.unshift`, except this returns\n * a promise that rejects if an error occurs.\n * @property {Function} remove - remove items from the queue that match a test\n * function.  The test function will be passed an object with a `data` property,\n * and a `priority` property, if this is a\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n * `function ({data, priority}) {}` and returns a Boolean.\n * @property {Function} saturated - a function that sets a callback that is\n * called when the number of running workers hits the `concurrency` limit, and\n * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n * returns a promise for the next occurrence.\n * @property {Function} unsaturated - a function that sets a callback that is\n * called when the number of running workers is less than the `concurrency` &\n * `buffer` limits, and further tasks will not be queued. If the callback is\n * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a function that sets a callback that is called\n * when the last item from the `queue` is given to a `worker`. If the callback\n * is omitted, `q.empty()` returns a promise for the next occurrence.\n * @property {Function} drain - a function that sets a callback that is called\n * when the last item from the `queue` has returned from the `worker`. If the\n * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n * @property {Function} error - a function that sets a callback that is called\n * when a task errors. Has the signature `function(error, task)`. If the\n * callback is omitted, `error()` returns a promise that rejects on the next\n * error.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n *\n * @example\n * const q = aync.queue(worker, 2)\n * q.push(item1)\n * q.push(item2)\n * q.push(item3)\n * // queues are iterable, spread into an array to inspect\n * const items = [...q] // [item1, item2, item3]\n * // or use for of\n * for (let item of q) {\n *     console.log(item)\n * }\n *\n * q.drain(() => {\n *     console.log('all done')\n * })\n * // or\n * await q.drain()\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain(function() {\n *     console.log('all items have been processed');\n * });\n * // or await the end\n * await q.drain()\n *\n * // assign an error callback\n * q.error(function(err, task) {\n *     console.error('task experienced an error');\n * });\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * // callback is optional\n * q.push({name: 'bar'});\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nfunction queue$1 (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue((items, cb) => {\n        _worker(items[0], cb);\n    }, concurrency, 1);\n}\n\n// Binary min-heap implementation used for priority queue.\n// Implementation is stable, i.e. push time is considered for equal priorities\nclass Heap {\n    constructor() {\n        this.heap = [];\n        this.pushCount = Number.MIN_SAFE_INTEGER;\n    }\n\n    get length() {\n        return this.heap.length;\n    }\n\n    empty () {\n        this.heap = [];\n        return this;\n    }\n\n    percUp(index) {\n        let p;\n\n        while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {\n            let t = this.heap[index];\n            this.heap[index] = this.heap[p];\n            this.heap[p] = t;\n\n            index = p;\n        }\n    }\n\n    percDown(index) {\n        let l;\n\n        while ((l=leftChi(index)) < this.heap.length) {\n            if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {\n                l = l+1;\n            }\n\n            if (smaller(this.heap[index], this.heap[l])) {\n                break;\n            }\n\n            let t = this.heap[index];\n            this.heap[index] = this.heap[l];\n            this.heap[l] = t;\n\n            index = l;\n        }\n    }\n\n    push(node) {\n        node.pushCount = ++this.pushCount;\n        this.heap.push(node);\n        this.percUp(this.heap.length-1);\n    }\n\n    unshift(node) {\n        return this.heap.push(node);\n    }\n\n    shift() {\n        let [top] = this.heap;\n\n        this.heap[0] = this.heap[this.heap.length-1];\n        this.heap.pop();\n        this.percDown(0);\n\n        return top;\n    }\n\n    toArray() {\n        return [...this];\n    }\n\n    *[Symbol.iterator] () {\n        for (let i = 0; i < this.heap.length; i++) {\n            yield this.heap[i].data;\n        }\n    }\n\n    remove (testFn) {\n        let j = 0;\n        for (let i = 0; i < this.heap.length; i++) {\n            if (!testFn(this.heap[i])) {\n                this.heap[j] = this.heap[i];\n                j++;\n            }\n        }\n\n        this.heap.splice(j);\n\n        for (let i = parent(this.heap.length-1); i >= 0; i--) {\n            this.percDown(i);\n        }\n\n        return this;\n    }\n}\n\nfunction leftChi(i) {\n    return (i<<1)+1;\n}\n\nfunction parent(i) {\n    return ((i+1)>>1)-1;\n}\n\nfunction smaller(x, y) {\n    if (x.priority !== y.priority) {\n        return x.priority < y.priority;\n    }\n    else {\n        return x.pushCount < y.pushCount;\n    }\n}\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * The `unshift` method was removed.\n */\nfunction priorityQueue(worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n\n    q._tasks = new Heap();\n\n    // Override push to accept second parameter representing priority\n    q.push = function(data, priority = 0, callback = () => {}) {\n        if (typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(() => q.drain());\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                priority,\n                callback\n            };\n\n            q._tasks.push(item);\n        }\n\n        setImmediate$1(q.process);\n    };\n\n    // Remove unshift function\n    delete q.unshift;\n\n    return q;\n}\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        wrapAsync(tasks[i])(callback);\n    }\n}\n\nvar race$1 = awaitify(race, 2);\n\n/**\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction reduceRight (array, memo, iteratee, callback) {\n    var reversed = [...array].reverse();\n    return reduce$1(reversed, memo, iteratee, callback);\n}\n\n/**\n * Wraps the async function in another function that always completes with a\n * result object, even when it errors.\n *\n * The result object has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });\n */\nfunction reflect(fn) {\n    var _fn = wrapAsync(fn);\n    return initialParams(function reflectOn(args, reflectCallback) {\n        args.push((error, ...cbArgs) => {\n            let retVal = {};\n            if (error) {\n                retVal.error = error;\n            }\n            if (cbArgs.length > 0){\n                var value = cbArgs;\n                if (cbArgs.length <= 1) {\n                    [value] = cbArgs;\n                }\n                retVal.value = value;\n            }\n            reflectCallback(null, retVal);\n        });\n\n        return _fn.apply(this, args);\n    });\n}\n\n/**\n * A helper function that wraps an array or an object of functions with `reflect`.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array|Object|Iterable} tasks - The collection of\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n * @returns {Array} Returns an array of async functions, each wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if (Array.isArray(tasks)) {\n        results = tasks.map(reflect);\n    } else {\n        results = {};\n        Object.keys(tasks).forEach(key => {\n            results[key] = reflect.call(this, tasks[key]);\n        });\n    }\n    return results;\n}\n\nfunction reject(eachfn, arr, _iteratee, callback) {\n    const iteratee = wrapAsync(_iteratee);\n    return _filter(eachfn, arr, (value, cb) => {\n        iteratee(value, (err, v) => {\n            cb(err, !v);\n        });\n    }, callback);\n}\n\n/**\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.reject(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of missing files\n *     createFiles(results);\n * });\n */\nfunction reject$1 (coll, iteratee, callback) {\n    return reject(eachOf$1, coll, iteratee, callback)\n}\nvar reject$2 = awaitify(reject$1, 3);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectLimit (coll, limit, iteratee, callback) {\n    return reject(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar rejectLimit$1 = awaitify(rejectLimit, 4);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectSeries (coll, iteratee, callback) {\n    return reject(eachOfSeries$1, coll, iteratee, callback)\n}\nvar rejectSeries$1 = awaitify(rejectSeries, 3);\n\nfunction constant$1(value) {\n    return function () {\n        return value;\n    }\n}\n\n/**\n * Attempts to get a successful response from `task` no more than `times` times\n * before returning an error. If the task is successful, the `callback` will be\n * passed the result of the successful task. If all attempts fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name retry\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n *   erroneous result. If it returns `true` the retry attempts will continue;\n *   if the function returns `false` the retry flow is aborted with the current\n *   attempt's error and result being returned to the final callback.\n *   Invoked with (err).\n * * If `opts` is a number, the number specifies the number of times to retry,\n *   with the default interval of `0`.\n * @param {AsyncFunction} task - An async function to retry.\n * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n * @returns {Promise} a promise if no callback provided\n *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n * async.retry(3, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 10 times with exponential backoff\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n * async.retry({\n *   times: 10,\n *   interval: function(retryCount) {\n *     return 50 * Math.pow(2, retryCount);\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod the default 5 times no delay between each retry\n * async.retry(apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // to retry individual methods that are not as reliable within other\n * // control flow functions, use the `retryable` wrapper:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n * }, function(err, results) {\n *     // do something with the results\n * });\n *\n */\nconst DEFAULT_TIMES = 5;\nconst DEFAULT_INTERVAL = 0;\n\nfunction retry(opts, task, callback) {\n    var options = {\n        times: DEFAULT_TIMES,\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n        callback = task || promiseCallback();\n        task = opts;\n    } else {\n        parseTimes(options, opts);\n        callback = callback || promiseCallback();\n    }\n\n    if (typeof task !== 'function') {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n    function retryAttempt() {\n        _task((err, ...args) => {\n            if (err === false) return\n            if (err && attempt++ < options.times &&\n                (typeof options.errorFilter != 'function' ||\n                    options.errorFilter(err))) {\n                setTimeout(retryAttempt, options.intervalFunc(attempt - 1));\n            } else {\n                callback(err, ...args);\n            }\n        });\n    }\n\n    retryAttempt();\n    return callback[PROMISE_SYMBOL]\n}\n\nfunction parseTimes(acc, t) {\n    if (typeof t === 'object') {\n        acc.times = +t.times || DEFAULT_TIMES;\n\n        acc.intervalFunc = typeof t.interval === 'function' ?\n            t.interval :\n            constant$1(+t.interval || DEFAULT_INTERVAL);\n\n        acc.errorFilter = t.errorFilter;\n    } else if (typeof t === 'number' || typeof t === 'string') {\n        acc.times = +t || DEFAULT_TIMES;\n    } else {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n}\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`, except for a `opts.arity` that\n * is the arity of the `task` function, defaulting to `task.length`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nfunction retryable (opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    let arity = (opts && opts.arity) || task.length;\n    if (isAsync(task)) {\n        arity += 1;\n    }\n    var _task = wrapAsync(task);\n    return initialParams((args, callback) => {\n        if (args.length < arity - 1 || callback == null) {\n            args.push(callback);\n            callback = promiseCallback();\n        }\n        function taskFn(cb) {\n            _task(...args, cb);\n        }\n\n        if (opts) retry(opts, taskFn, callback);\n        else retry(taskFn, callback);\n\n        return callback[PROMISE_SYMBOL]\n    });\n}\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @return {Promise} a promise, if no callback is passed\n * @example\n * async.series([\n *     function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     },\n *     function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // results is now equal to ['one', 'two']\n * });\n *\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback){\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equal to: {one: 1, two: 2}\n * });\n */\nfunction series(tasks, callback) {\n    return _parallel(eachOfSeries$1, tasks, callback);\n}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n * @name some\n * @static\n * @memberOf module:Collections\n * @method\n * @alias any\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.some(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then at least one of the files exists\n * });\n */\nfunction some(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)\n}\nvar some$1 = awaitify(some, 3);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someLimit(coll, limit, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar someLimit$1 = awaitify(someLimit, 4);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anySeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in series.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someSeries(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar someSeries$1 = awaitify(someSeries, 3);\n\n/**\n * Sorts a list by the results of running each `coll` value through an async\n * `iteratee`.\n *\n * @name sortBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is the items\n * from the original `coll` sorted by the values returned by the `iteratee`\n * calls. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback passed\n * @example\n *\n * async.sortBy(['file1','file2','file3'], function(file, callback) {\n *     fs.stat(file, function(err, stats) {\n *         callback(err, stats.mtime);\n *     });\n * }, function(err, results) {\n *     // results is now the original array of files sorted by\n *     // modified date\n * });\n *\n * // By modifying the callback parameter the\n * // sorting order can be influenced:\n *\n * // ascending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x);\n * }, function(err,result) {\n *     // result callback\n * });\n *\n * // descending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around\n * }, function(err,result) {\n *     // result callback\n * });\n */\nfunction sortBy (coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return map$1(coll, (x, iterCb) => {\n        _iteratee(x, (err, criteria) => {\n            if (err) return iterCb(err);\n            iterCb(err, {value: x, criteria});\n        });\n    }, (err, results) => {\n        if (err) return callback(err);\n        callback(null, results.sort(comparator).map(v => v.value));\n    });\n\n    function comparator(left, right) {\n        var a = left.criteria, b = right.criteria;\n        return a < b ? -1 : a > b ? 1 : 0;\n    }\n}\nvar sortBy$1 = awaitify(sortBy, 3);\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n\n    return initialParams((args, callback) => {\n        var timedOut = false;\n        var timer;\n\n        function timeoutCallback() {\n            var name = asyncFn.name || 'anonymous';\n            var error  = new Error('Callback function \"' + name + '\" timed out.');\n            error.code = 'ETIMEDOUT';\n            if (info) {\n                error.info = info;\n            }\n            timedOut = true;\n            callback(error);\n        }\n\n        args.push((...cbArgs) => {\n            if (!timedOut) {\n                callback(...cbArgs);\n                clearTimeout(timer);\n            }\n        });\n\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        fn(...args);\n    });\n}\n\nfunction range(size) {\n    var result = Array(size);\n    while (size--) {\n        result[size] = size;\n    }\n    return result;\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(range(count), limit, _iteratee, callback);\n}\n\n/**\n * Calls the `iteratee` function `n` times, and accumulates results in the same\n * manner you would use with [map]{@link module:Collections.map}.\n *\n * @name times\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n * @example\n *\n * // Pretend this is some complicated async factory\n * var createUser = function(id, callback) {\n *     callback(null, {\n *         id: 'user' + id\n *     });\n * };\n *\n * // generate 5 users\n * async.times(5, function(n, next) {\n *     createUser(n, function(err, user) {\n *         next(err, user);\n *     });\n * }, function(err, users) {\n *     // we should now have 5 users\n * });\n */\nfunction times (n, iteratee, callback) {\n    return timesLimit(n, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesSeries (n, iteratee, callback) {\n    return timesLimit(n, 1, iteratee, callback)\n}\n\n/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in parallel, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.transform([1,2,3], function(acc, item, index, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         acc[index] = item * 2\n *         callback(null)\n *     });\n * }, function(err, result) {\n *     // result is now equal to [2, 4, 6]\n * });\n *\n * @example\n *\n * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\n *     setImmediate(function () {\n *         obj[key] = val * 2;\n *         callback();\n *     })\n * }, function (err, result) {\n *     // result is equal to {a: 2, b: 4, c: 6}\n * })\n */\nfunction transform (coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3 && typeof accumulator === 'function') {\n        callback = iteratee;\n        iteratee = accumulator;\n        accumulator = Array.isArray(coll) ? [] : {};\n    }\n    callback = once(callback || promiseCallback());\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf$1(coll, (v, k, cb) => {\n        _iteratee(accumulator, v, k, cb);\n    }, err => callback(err, accumulator));\n    return callback[PROMISE_SYMBOL]\n}\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    return eachSeries$1(tasks, (task, taskCb) => {\n        wrapAsync(task)((err, ...args) => {\n            if (err === false) return taskCb(err);\n\n            if (args.length < 2) {\n                [result] = args;\n            } else {\n                result = args;\n            }\n            error = err;\n            taskCb(err ? null : {});\n        });\n    }, () => callback(error, result));\n}\n\nvar tryEach$1 = awaitify(tryEach);\n\n/**\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n * unmemoized form. Handy for testing.\n *\n * @name unmemoize\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.memoize]{@link module:Utils.memoize}\n * @category Util\n * @param {AsyncFunction} fn - the memoized function\n * @returns {AsyncFunction} a function that calls the original unmemoized function\n */\nfunction unmemoize(fn) {\n    return (...args) => {\n        return (fn.unmemoized || fn)(...args);\n    };\n}\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function test(cb) { cb(null, count < 5); },\n *     function iter(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results = [];\n\n    function next(err, ...rest) {\n        if (err) return callback(err);\n        results = rest;\n        if (err === false) return;\n        _test(check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return _test(check);\n}\nvar whilst$1 = awaitify(whilst, 3);\n\n/**\n * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `iteratee`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n * const results = []\n * let finished = false\n * async.until(function test(page, cb) {\n *     cb(null, finished)\n * }, function iter(next) {\n *     fetchPage(url, (err, body) => {\n *         if (err) return next(err)\n *         results = results.concat(body.objects)\n *         finished = !!body.next\n *         next(err)\n *     })\n * }, function done (err) {\n *     // all pages have been fetched\n * })\n */\nfunction until(test, iteratee, callback) {\n    const _test = wrapAsync(test);\n    return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);\n}\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n * The `result` values will be passed as arguments, in order, to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */\nfunction waterfall (tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        var task = wrapAsync(tasks[taskIndex++]);\n        task(...args, onlyOnce(next));\n    }\n\n    function next(err, ...args) {\n        if (err === false) return\n        if (err || taskIndex === tasks.length) {\n            return callback(err, ...args);\n        }\n        nextTask(args);\n    }\n\n    nextTask([]);\n}\n\nvar waterfall$1 = awaitify(waterfall);\n\n/**\n * An \"async function\" in the context of Async is an asynchronous function with\n * a variable number of parameters, with the final parameter being a callback.\n * (`function (arg1, arg2, ..., callback) {}`)\n * The final callback is of the form `callback(err, results...)`, which must be\n * called once the function is completed.  The callback should be called with a\n * Error as its first argument to signal that an error occurred.\n * Otherwise, if no error occurred, it should be called with `null` as the first\n * argument, and any additional `result` arguments that may apply, to signal\n * successful completion.\n * The callback must be called exactly once, ideally on a later tick of the\n * JavaScript event loop.\n *\n * This type of function is also referred to as a \"Node-style async function\",\n * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n * library are themselves CPS/Node-style async functions, or functions that\n * return CPS/Node-style async functions.\n *\n * Wherever we accept a Node-style async function, we also directly accept an\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n * In this case, the `async` function will not be passed a final callback\n * argument, and any thrown error will be used as the `err` argument of the\n * implicit callback, and the return value will be used as the `result` value.\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n * argument, and a `resolved` value becomes the `result`.)\n *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n * returns a promise.\n *\n * @typedef {Function} AsyncFunction\n * @static\n */\n\nvar index = {\n    apply,\n    applyEach: applyEach$1,\n    applyEachSeries,\n    asyncify,\n    auto,\n    autoInject,\n    cargo,\n    cargoQueue: cargo$1,\n    compose,\n    concat: concat$1,\n    concatLimit: concatLimit$1,\n    concatSeries: concatSeries$1,\n    constant,\n    detect: detect$1,\n    detectLimit: detectLimit$1,\n    detectSeries: detectSeries$1,\n    dir,\n    doUntil,\n    doWhilst: doWhilst$1,\n    each,\n    eachLimit: eachLimit$2,\n    eachOf: eachOf$1,\n    eachOfLimit: eachOfLimit$2,\n    eachOfSeries: eachOfSeries$1,\n    eachSeries: eachSeries$1,\n    ensureAsync,\n    every: every$1,\n    everyLimit: everyLimit$1,\n    everySeries: everySeries$1,\n    filter: filter$1,\n    filterLimit: filterLimit$1,\n    filterSeries: filterSeries$1,\n    forever: forever$1,\n    groupBy,\n    groupByLimit: groupByLimit$1,\n    groupBySeries,\n    log,\n    map: map$1,\n    mapLimit: mapLimit$1,\n    mapSeries: mapSeries$1,\n    mapValues,\n    mapValuesLimit: mapValuesLimit$1,\n    mapValuesSeries,\n    memoize,\n    nextTick,\n    parallel,\n    parallelLimit,\n    priorityQueue,\n    queue: queue$1,\n    race: race$1,\n    reduce: reduce$1,\n    reduceRight,\n    reflect,\n    reflectAll,\n    reject: reject$2,\n    rejectLimit: rejectLimit$1,\n    rejectSeries: rejectSeries$1,\n    retry,\n    retryable,\n    seq,\n    series,\n    setImmediate: setImmediate$1,\n    some: some$1,\n    someLimit: someLimit$1,\n    someSeries: someSeries$1,\n    sortBy: sortBy$1,\n    timeout,\n    times,\n    timesLimit,\n    timesSeries,\n    transform,\n    tryEach: tryEach$1,\n    unmemoize,\n    until,\n    waterfall: waterfall$1,\n    whilst: whilst$1,\n\n    // aliases\n    all: every$1,\n    allLimit: everyLimit$1,\n    allSeries: everySeries$1,\n    any: some$1,\n    anyLimit: someLimit$1,\n    anySeries: someSeries$1,\n    find: detect$1,\n    findLimit: detectLimit$1,\n    findSeries: detectSeries$1,\n    flatMap: concat$1,\n    flatMapLimit: concatLimit$1,\n    flatMapSeries: concatSeries$1,\n    forEach: each,\n    forEachSeries: eachSeries$1,\n    forEachLimit: eachLimit$2,\n    forEachOf: eachOf$1,\n    forEachOfSeries: eachOfSeries$1,\n    forEachOfLimit: eachOfLimit$2,\n    inject: reduce$1,\n    foldl: reduce$1,\n    foldr: reduceRight,\n    select: filter$1,\n    selectLimit: filterLimit$1,\n    selectSeries: filterSeries$1,\n    wrapSync: asyncify,\n    during: whilst$1,\n    doDuring: doWhilst$1\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index);\n\n\n\n//# sourceURL=webpack:///./node_modules/async/dist/async.mjs?");

/***/ }),

/***/ "./node_modules/cookies-js/dist/cookies.js":
/*!*************************************************!*\
  !*** ./node_modules/cookies-js/dist/cookies.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*\r\n * Cookies.js - 1.2.3\r\n * https://github.com/ScottHamper/Cookies\r\n *\r\n * This is free and unencumbered software released into the public domain.\r\n */\r\n(function (global, undefined) {\r\n    'use strict';\r\n\r\n    var factory = function (window) {\r\n        if (typeof window.document !== 'object') {\r\n            throw new Error('Cookies.js requires a `window` with a `document` object');\r\n        }\r\n\r\n        var Cookies = function (key, value, options) {\r\n            return arguments.length === 1 ?\r\n                Cookies.get(key) : Cookies.set(key, value, options);\r\n        };\r\n\r\n        // Allows for setter injection in unit tests\r\n        Cookies._document = window.document;\r\n\r\n        // Used to ensure cookie keys do not collide with\r\n        // built-in `Object` properties\r\n        Cookies._cacheKeyPrefix = 'cookey.'; // Hurr hurr, :)\r\n        \r\n        Cookies._maxExpireDate = new Date('Fri, 31 Dec 9999 23:59:59 UTC');\r\n\r\n        Cookies.defaults = {\r\n            path: '/',\r\n            secure: false\r\n        };\r\n\r\n        Cookies.get = function (key) {\r\n            if (Cookies._cachedDocumentCookie !== Cookies._document.cookie) {\r\n                Cookies._renewCache();\r\n            }\r\n            \r\n            var value = Cookies._cache[Cookies._cacheKeyPrefix + key];\r\n\r\n            return value === undefined ? undefined : decodeURIComponent(value);\r\n        };\r\n\r\n        Cookies.set = function (key, value, options) {\r\n            options = Cookies._getExtendedOptions(options);\r\n            options.expires = Cookies._getExpiresDate(value === undefined ? -1 : options.expires);\r\n\r\n            Cookies._document.cookie = Cookies._generateCookieString(key, value, options);\r\n\r\n            return Cookies;\r\n        };\r\n\r\n        Cookies.expire = function (key, options) {\r\n            return Cookies.set(key, undefined, options);\r\n        };\r\n\r\n        Cookies._getExtendedOptions = function (options) {\r\n            return {\r\n                path: options && options.path || Cookies.defaults.path,\r\n                domain: options && options.domain || Cookies.defaults.domain,\r\n                expires: options && options.expires || Cookies.defaults.expires,\r\n                secure: options && options.secure !== undefined ?  options.secure : Cookies.defaults.secure\r\n            };\r\n        };\r\n\r\n        Cookies._isValidDate = function (date) {\r\n            return Object.prototype.toString.call(date) === '[object Date]' && !isNaN(date.getTime());\r\n        };\r\n\r\n        Cookies._getExpiresDate = function (expires, now) {\r\n            now = now || new Date();\r\n\r\n            if (typeof expires === 'number') {\r\n                expires = expires === Infinity ?\r\n                    Cookies._maxExpireDate : new Date(now.getTime() + expires * 1000);\r\n            } else if (typeof expires === 'string') {\r\n                expires = new Date(expires);\r\n            }\r\n\r\n            if (expires && !Cookies._isValidDate(expires)) {\r\n                throw new Error('`expires` parameter cannot be converted to a valid Date instance');\r\n            }\r\n\r\n            return expires;\r\n        };\r\n\r\n        Cookies._generateCookieString = function (key, value, options) {\r\n            key = key.replace(/[^#$&+\\^`|]/g, encodeURIComponent);\r\n            key = key.replace(/\\(/g, '%28').replace(/\\)/g, '%29');\r\n            value = (value + '').replace(/[^!#$&-+\\--:<-\\[\\]-~]/g, encodeURIComponent);\r\n            options = options || {};\r\n\r\n            var cookieString = key + '=' + value;\r\n            cookieString += options.path ? ';path=' + options.path : '';\r\n            cookieString += options.domain ? ';domain=' + options.domain : '';\r\n            cookieString += options.expires ? ';expires=' + options.expires.toUTCString() : '';\r\n            cookieString += options.secure ? ';secure' : '';\r\n\r\n            return cookieString;\r\n        };\r\n\r\n        Cookies._getCacheFromString = function (documentCookie) {\r\n            var cookieCache = {};\r\n            var cookiesArray = documentCookie ? documentCookie.split('; ') : [];\r\n\r\n            for (var i = 0; i < cookiesArray.length; i++) {\r\n                var cookieKvp = Cookies._getKeyValuePairFromCookieString(cookiesArray[i]);\r\n\r\n                if (cookieCache[Cookies._cacheKeyPrefix + cookieKvp.key] === undefined) {\r\n                    cookieCache[Cookies._cacheKeyPrefix + cookieKvp.key] = cookieKvp.value;\r\n                }\r\n            }\r\n\r\n            return cookieCache;\r\n        };\r\n\r\n        Cookies._getKeyValuePairFromCookieString = function (cookieString) {\r\n            // \"=\" is a valid character in a cookie value according to RFC6265, so cannot `split('=')`\r\n            var separatorIndex = cookieString.indexOf('=');\r\n\r\n            // IE omits the \"=\" when the cookie value is an empty string\r\n            separatorIndex = separatorIndex < 0 ? cookieString.length : separatorIndex;\r\n\r\n            var key = cookieString.substr(0, separatorIndex);\r\n            var decodedKey;\r\n            try {\r\n                decodedKey = decodeURIComponent(key);\r\n            } catch (e) {\r\n                if (console && typeof console.error === 'function') {\r\n                    console.error('Could not decode cookie with key \"' + key + '\"', e);\r\n                }\r\n            }\r\n            \r\n            return {\r\n                key: decodedKey,\r\n                value: cookieString.substr(separatorIndex + 1) // Defer decoding value until accessed\r\n            };\r\n        };\r\n\r\n        Cookies._renewCache = function () {\r\n            Cookies._cache = Cookies._getCacheFromString(Cookies._document.cookie);\r\n            Cookies._cachedDocumentCookie = Cookies._document.cookie;\r\n        };\r\n\r\n        Cookies._areEnabled = function () {\r\n            var testKey = 'cookies.js';\r\n            var areEnabled = Cookies.set(testKey, 1).get(testKey) === '1';\r\n            Cookies.expire(testKey);\r\n            return areEnabled;\r\n        };\r\n\r\n        Cookies.enabled = Cookies._areEnabled();\r\n\r\n        return Cookies;\r\n    };\r\n    var cookiesExport = (global && typeof global.document === 'object') ? factory(global) : factory;\r\n\r\n    // AMD support\r\n    if (true) {\r\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () { return cookiesExport; }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n    // CommonJS/Node.js support\r\n    } else {}\r\n})(typeof window === 'undefined' ? this : window);\n\n//# sourceURL=webpack:///./node_modules/cookies-js/dist/cookies.js?");

/***/ }),

/***/ "./node_modules/cuid/index.js":
/*!************************************!*\
  !*** ./node_modules/cuid/index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * cuid.js\n * Collision-resistant UID generator for browsers and node.\n * Sequential for fast db lookups and recency sorting.\n * Safe for element IDs and server-side lookups.\n *\n * Extracted from CLCTR\n *\n * Copyright (c) Eric Elliott 2012\n * MIT License\n */\n\nvar fingerprint = __webpack_require__(/*! ./lib/fingerprint.js */ \"./node_modules/cuid/lib/fingerprint.browser.js\");\nvar pad = __webpack_require__(/*! ./lib/pad.js */ \"./node_modules/cuid/lib/pad.js\");\nvar getRandomValue = __webpack_require__(/*! ./lib/getRandomValue.js */ \"./node_modules/cuid/lib/getRandomValue.browser.js\");\n\nvar c = 0,\n  blockSize = 4,\n  base = 36,\n  discreteValues = Math.pow(base, blockSize);\n\nfunction randomBlock () {\n  return pad((getRandomValue() *\n    discreteValues << 0)\n    .toString(base), blockSize);\n}\n\nfunction safeCounter () {\n  c = c < discreteValues ? c : 0;\n  c++; // this is not subliminal\n  return c - 1;\n}\n\nfunction cuid () {\n  // Starting with a lowercase letter makes\n  // it HTML element ID friendly.\n  var letter = 'c', // hard-coded allows for sequential access\n\n    // timestamp\n    // warning: this exposes the exact date and time\n    // that the uid was created.\n    timestamp = (new Date().getTime()).toString(base),\n\n    // Prevent same-machine collisions.\n    counter = pad(safeCounter().toString(base), blockSize),\n\n    // A few chars to generate distinct ids for different\n    // clients (so different computers are far less\n    // likely to generate the same id)\n    print = fingerprint(),\n\n    // Grab some more chars from Math.random()\n    random = randomBlock() + randomBlock();\n\n  return letter + timestamp + counter + print + random;\n}\n\ncuid.slug = function slug () {\n  var date = new Date().getTime().toString(36),\n    counter = safeCounter().toString(36).slice(-4),\n    print = fingerprint().slice(0, 1) +\n      fingerprint().slice(-1),\n    random = randomBlock().slice(-2);\n\n  return date.slice(-2) +\n    counter + print + random;\n};\n\ncuid.isCuid = function isCuid (stringToCheck) {\n  if (typeof stringToCheck !== 'string') return false;\n  if (stringToCheck.startsWith('c')) return true;\n  return false;\n};\n\ncuid.isSlug = function isSlug (stringToCheck) {\n  if (typeof stringToCheck !== 'string') return false;\n  var stringLength = stringToCheck.length;\n  if (stringLength >= 7 && stringLength <= 10) return true;\n  return false;\n};\n\ncuid.fingerprint = fingerprint;\n\nmodule.exports = cuid;\n\n\n//# sourceURL=webpack:///./node_modules/cuid/index.js?");

/***/ }),

/***/ "./node_modules/cuid/lib/fingerprint.browser.js":
/*!******************************************************!*\
  !*** ./node_modules/cuid/lib/fingerprint.browser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var pad = __webpack_require__(/*! ./pad.js */ \"./node_modules/cuid/lib/pad.js\");\n\nvar env = typeof window === 'object' ? window : self;\nvar globalCount = Object.keys(env).length;\nvar mimeTypesLength = navigator.mimeTypes ? navigator.mimeTypes.length : 0;\nvar clientId = pad((mimeTypesLength +\n  navigator.userAgent.length).toString(36) +\n  globalCount.toString(36), 4);\n\nmodule.exports = function fingerprint () {\n  return clientId;\n};\n\n\n//# sourceURL=webpack:///./node_modules/cuid/lib/fingerprint.browser.js?");

/***/ }),

/***/ "./node_modules/cuid/lib/getRandomValue.browser.js":
/*!*********************************************************!*\
  !*** ./node_modules/cuid/lib/getRandomValue.browser.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\nvar getRandomValue;\n\nvar crypto = typeof window !== 'undefined' &&\n  (window.crypto || window.msCrypto) ||\n  typeof self !== 'undefined' &&\n  self.crypto;\n\nif (crypto) {\n    var lim = Math.pow(2, 32) - 1;\n    getRandomValue = function () {\n        return Math.abs(crypto.getRandomValues(new Uint32Array(1))[0] / lim);\n    };\n} else {\n    getRandomValue = Math.random;\n}\n\nmodule.exports = getRandomValue;\n\n\n//# sourceURL=webpack:///./node_modules/cuid/lib/getRandomValue.browser.js?");

/***/ }),

/***/ "./node_modules/cuid/lib/pad.js":
/*!**************************************!*\
  !*** ./node_modules/cuid/lib/pad.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function pad (num, size) {\n  var s = '000000000' + num;\n  return s.substr(s.length - size);\n};\n\n\n//# sourceURL=webpack:///./node_modules/cuid/lib/pad.js?");

/***/ }),

/***/ "./node_modules/deep-diff/index.js":
/*!*****************************************!*\
  !*** ./node_modules/deep-diff/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;;(function(root, factory) { // eslint-disable-line no-extra-semi\n  var deepDiff = factory(root);\n  // eslint-disable-next-line no-undef\n  if (true) {\n      // AMD\n      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { // eslint-disable-line no-undef\n          return deepDiff;\n      }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else { var _deepdiff; }\n}(this, function(root) {\n  var validKinds = ['N', 'E', 'A', 'D'];\n\n  // nodejs compatible on server side and in the browser.\n  function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor;\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  }\n\n  function Diff(kind, path) {\n    Object.defineProperty(this, 'kind', {\n      value: kind,\n      enumerable: true\n    });\n    if (path && path.length) {\n      Object.defineProperty(this, 'path', {\n        value: path,\n        enumerable: true\n      });\n    }\n  }\n\n  function DiffEdit(path, origin, value) {\n    DiffEdit.super_.call(this, 'E', path);\n    Object.defineProperty(this, 'lhs', {\n      value: origin,\n      enumerable: true\n    });\n    Object.defineProperty(this, 'rhs', {\n      value: value,\n      enumerable: true\n    });\n  }\n  inherits(DiffEdit, Diff);\n\n  function DiffNew(path, value) {\n    DiffNew.super_.call(this, 'N', path);\n    Object.defineProperty(this, 'rhs', {\n      value: value,\n      enumerable: true\n    });\n  }\n  inherits(DiffNew, Diff);\n\n  function DiffDeleted(path, value) {\n    DiffDeleted.super_.call(this, 'D', path);\n    Object.defineProperty(this, 'lhs', {\n      value: value,\n      enumerable: true\n    });\n  }\n  inherits(DiffDeleted, Diff);\n\n  function DiffArray(path, index, item) {\n    DiffArray.super_.call(this, 'A', path);\n    Object.defineProperty(this, 'index', {\n      value: index,\n      enumerable: true\n    });\n    Object.defineProperty(this, 'item', {\n      value: item,\n      enumerable: true\n    });\n  }\n  inherits(DiffArray, Diff);\n\n  function arrayRemove(arr, from, to) {\n    var rest = arr.slice((to || from) + 1 || arr.length);\n    arr.length = from < 0 ? arr.length + from : from;\n    arr.push.apply(arr, rest);\n    return arr;\n  }\n\n  function realTypeOf(subject) {\n    var type = typeof subject;\n    if (type !== 'object') {\n      return type;\n    }\n\n    if (subject === Math) {\n      return 'math';\n    } else if (subject === null) {\n      return 'null';\n    } else if (Array.isArray(subject)) {\n      return 'array';\n    } else if (Object.prototype.toString.call(subject) === '[object Date]') {\n      return 'date';\n    } else if (typeof subject.toString === 'function' && /^\\/.*\\//.test(subject.toString())) {\n      return 'regexp';\n    }\n    return 'object';\n  }\n\n  // http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n  function hashThisString(string) {\n    var hash = 0;\n    if (string.length === 0) { return hash; }\n    for (var i = 0; i < string.length; i++) {\n      var char = string.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash;\n  }\n\n  // Gets a hash of the given object in an array order-independent fashion\n  // also object key order independent (easier since they can be alphabetized)\n  function getOrderIndependentHash(object) {\n    var accum = 0;\n    var type = realTypeOf(object);\n\n    if (type === 'array') {\n      object.forEach(function (item) {\n        // Addition is commutative so this is order indep\n        accum += getOrderIndependentHash(item);\n      });\n\n      var arrayString = '[type: array, hash: ' + accum + ']';\n      return accum + hashThisString(arrayString);\n    }\n\n    if (type === 'object') {\n      for (var key in object) {\n        if (object.hasOwnProperty(key)) {\n          var keyValueString = '[ type: object, key: ' + key + ', value hash: ' + getOrderIndependentHash(object[key]) + ']';\n          accum += hashThisString(keyValueString);\n        }\n      }\n\n      return accum;\n    }\n\n    // Non object, non array...should be good?\n    var stringToHash = '[ type: ' + type + ' ; value: ' + object + ']';\n    return accum + hashThisString(stringToHash);\n  }\n\n  function deepDiff(lhs, rhs, changes, prefilter, path, key, stack, orderIndependent) {\n    changes = changes || [];\n    path = path || [];\n    stack = stack || [];\n    var currentPath = path.slice(0);\n    if (typeof key !== 'undefined' && key !== null) {\n      if (prefilter) {\n        if (typeof (prefilter) === 'function' && prefilter(currentPath, key)) {\n          return;\n        } else if (typeof (prefilter) === 'object') {\n          if (prefilter.prefilter && prefilter.prefilter(currentPath, key)) {\n            return;\n          }\n          if (prefilter.normalize) {\n            var alt = prefilter.normalize(currentPath, key, lhs, rhs);\n            if (alt) {\n              lhs = alt[0];\n              rhs = alt[1];\n            }\n          }\n        }\n      }\n      currentPath.push(key);\n    }\n\n    // Use string comparison for regexes\n    if (realTypeOf(lhs) === 'regexp' && realTypeOf(rhs) === 'regexp') {\n      lhs = lhs.toString();\n      rhs = rhs.toString();\n    }\n\n    var ltype = typeof lhs;\n    var rtype = typeof rhs;\n    var i, j, k, other;\n\n    var ldefined = ltype !== 'undefined' ||\n      (stack && (stack.length > 0) && stack[stack.length - 1].lhs &&\n        Object.getOwnPropertyDescriptor(stack[stack.length - 1].lhs, key));\n    var rdefined = rtype !== 'undefined' ||\n      (stack && (stack.length > 0) && stack[stack.length - 1].rhs &&\n        Object.getOwnPropertyDescriptor(stack[stack.length - 1].rhs, key));\n\n    if (!ldefined && rdefined) {\n      changes.push(new DiffNew(currentPath, rhs));\n    } else if (!rdefined && ldefined) {\n      changes.push(new DiffDeleted(currentPath, lhs));\n    } else if (realTypeOf(lhs) !== realTypeOf(rhs)) {\n      changes.push(new DiffEdit(currentPath, lhs, rhs));\n    } else if (realTypeOf(lhs) === 'date' && (lhs - rhs) !== 0) {\n      changes.push(new DiffEdit(currentPath, lhs, rhs));\n    } else if (ltype === 'object' && lhs !== null && rhs !== null) {\n      for (i = stack.length - 1; i > -1; --i) {\n        if (stack[i].lhs === lhs) {\n          other = true;\n          break;\n        }\n      }\n      if (!other) {\n        stack.push({ lhs: lhs, rhs: rhs });\n        if (Array.isArray(lhs)) {\n          // If order doesn't matter, we need to sort our arrays\n          if (orderIndependent) {\n            lhs.sort(function (a, b) {\n              return getOrderIndependentHash(a) - getOrderIndependentHash(b);\n            });\n\n            rhs.sort(function (a, b) {\n              return getOrderIndependentHash(a) - getOrderIndependentHash(b);\n            });\n          }\n          i = rhs.length - 1;\n          j = lhs.length - 1;\n          while (i > j) {\n            changes.push(new DiffArray(currentPath, i, new DiffNew(undefined, rhs[i--])));\n          }\n          while (j > i) {\n            changes.push(new DiffArray(currentPath, j, new DiffDeleted(undefined, lhs[j--])));\n          }\n          for (; i >= 0; --i) {\n            deepDiff(lhs[i], rhs[i], changes, prefilter, currentPath, i, stack, orderIndependent);\n          }\n        } else {\n          var akeys = Object.keys(lhs);\n          var pkeys = Object.keys(rhs);\n          for (i = 0; i < akeys.length; ++i) {\n            k = akeys[i];\n            other = pkeys.indexOf(k);\n            if (other >= 0) {\n              deepDiff(lhs[k], rhs[k], changes, prefilter, currentPath, k, stack, orderIndependent);\n              pkeys[other] = null;\n            } else {\n              deepDiff(lhs[k], undefined, changes, prefilter, currentPath, k, stack, orderIndependent);\n            }\n          }\n          for (i = 0; i < pkeys.length; ++i) {\n            k = pkeys[i];\n            if (k) {\n              deepDiff(undefined, rhs[k], changes, prefilter, currentPath, k, stack, orderIndependent);\n            }\n          }\n        }\n        stack.length = stack.length - 1;\n      } else if (lhs !== rhs) {\n        // lhs is contains a cycle at this element and it differs from rhs\n        changes.push(new DiffEdit(currentPath, lhs, rhs));\n      }\n    } else if (lhs !== rhs) {\n      if (!(ltype === 'number' && isNaN(lhs) && isNaN(rhs))) {\n        changes.push(new DiffEdit(currentPath, lhs, rhs));\n      }\n    }\n  }\n\n  function observableDiff(lhs, rhs, observer, prefilter, orderIndependent) {\n    var changes = [];\n    deepDiff(lhs, rhs, changes, prefilter, null, null, null, orderIndependent);\n    if (observer) {\n      for (var i = 0; i < changes.length; ++i) {\n        observer(changes[i]);\n      }\n    }\n    return changes;\n  }\n\n  function orderIndependentDeepDiff(lhs, rhs, changes, prefilter, path, key, stack) {\n    return deepDiff(lhs, rhs, changes, prefilter, path, key, stack, true);\n  }\n\n  function accumulateDiff(lhs, rhs, prefilter, accum) {\n    var observer = (accum) ?\n      function (difference) {\n        if (difference) {\n          accum.push(difference);\n        }\n      } : undefined;\n    var changes = observableDiff(lhs, rhs, observer, prefilter);\n    return (accum) ? accum : (changes.length) ? changes : undefined;\n  }\n\n  function accumulateOrderIndependentDiff(lhs, rhs, prefilter, accum) {\n    var observer = (accum) ?\n      function (difference) {\n        if (difference) {\n          accum.push(difference);\n        }\n      } : undefined;\n    var changes = observableDiff(lhs, rhs, observer, prefilter, true);\n    return (accum) ? accum : (changes.length) ? changes : undefined;\n  }\n\n  function applyArrayChange(arr, index, change) {\n    if (change.path && change.path.length) {\n      var it = arr[index],\n        i, u = change.path.length - 1;\n      for (i = 0; i < u; i++) {\n        it = it[change.path[i]];\n      }\n      switch (change.kind) {\n        case 'A':\n          applyArrayChange(it[change.path[i]], change.index, change.item);\n          break;\n        case 'D':\n          delete it[change.path[i]];\n          break;\n        case 'E':\n        case 'N':\n          it[change.path[i]] = change.rhs;\n          break;\n      }\n    } else {\n      switch (change.kind) {\n        case 'A':\n          applyArrayChange(arr[index], change.index, change.item);\n          break;\n        case 'D':\n          arr = arrayRemove(arr, index);\n          break;\n        case 'E':\n        case 'N':\n          arr[index] = change.rhs;\n          break;\n      }\n    }\n    return arr;\n  }\n\n  function applyChange(target, source, change) {\n    if (typeof change === 'undefined' && source && ~validKinds.indexOf(source.kind)) {\n      change = source;\n    }\n    if (target && change && change.kind) {\n      var it = target,\n        i = -1,\n        last = change.path ? change.path.length - 1 : 0;\n      while (++i < last) {\n        if (typeof it[change.path[i]] === 'undefined') {\n          it[change.path[i]] = (typeof change.path[i + 1] !== 'undefined' && typeof change.path[i + 1] === 'number') ? [] : {};\n        }\n        it = it[change.path[i]];\n      }\n      switch (change.kind) {\n        case 'A':\n          if (change.path && typeof it[change.path[i]] === 'undefined') {\n            it[change.path[i]] = [];\n          }\n          applyArrayChange(change.path ? it[change.path[i]] : it, change.index, change.item);\n          break;\n        case 'D':\n          delete it[change.path[i]];\n          break;\n        case 'E':\n        case 'N':\n          it[change.path[i]] = change.rhs;\n          break;\n      }\n    }\n  }\n\n  function revertArrayChange(arr, index, change) {\n    if (change.path && change.path.length) {\n      // the structure of the object at the index has changed...\n      var it = arr[index],\n        i, u = change.path.length - 1;\n      for (i = 0; i < u; i++) {\n        it = it[change.path[i]];\n      }\n      switch (change.kind) {\n        case 'A':\n          revertArrayChange(it[change.path[i]], change.index, change.item);\n          break;\n        case 'D':\n          it[change.path[i]] = change.lhs;\n          break;\n        case 'E':\n          it[change.path[i]] = change.lhs;\n          break;\n        case 'N':\n          delete it[change.path[i]];\n          break;\n      }\n    } else {\n      // the array item is different...\n      switch (change.kind) {\n        case 'A':\n          revertArrayChange(arr[index], change.index, change.item);\n          break;\n        case 'D':\n          arr[index] = change.lhs;\n          break;\n        case 'E':\n          arr[index] = change.lhs;\n          break;\n        case 'N':\n          arr = arrayRemove(arr, index);\n          break;\n      }\n    }\n    return arr;\n  }\n\n  function revertChange(target, source, change) {\n    if (target && source && change && change.kind) {\n      var it = target,\n        i, u;\n      u = change.path.length - 1;\n      for (i = 0; i < u; i++) {\n        if (typeof it[change.path[i]] === 'undefined') {\n          it[change.path[i]] = {};\n        }\n        it = it[change.path[i]];\n      }\n      switch (change.kind) {\n        case 'A':\n          // Array was modified...\n          // it will be an array...\n          revertArrayChange(it[change.path[i]], change.index, change.item);\n          break;\n        case 'D':\n          // Item was deleted...\n          it[change.path[i]] = change.lhs;\n          break;\n        case 'E':\n          // Item was edited...\n          it[change.path[i]] = change.lhs;\n          break;\n        case 'N':\n          // Item is new...\n          delete it[change.path[i]];\n          break;\n      }\n    }\n  }\n\n  function applyDiff(target, source, filter) {\n    if (target && source) {\n      var onChange = function (change) {\n        if (!filter || filter(target, source, change)) {\n          applyChange(target, source, change);\n        }\n      };\n      observableDiff(target, source, onChange);\n    }\n  }\n\n  Object.defineProperties(accumulateDiff, {\n\n    diff: {\n      value: accumulateDiff,\n      enumerable: true\n    },\n    orderIndependentDiff: {\n      value: accumulateOrderIndependentDiff,\n      enumerable: true\n    },\n    observableDiff: {\n      value: observableDiff,\n      enumerable: true\n    },\n    orderIndependentObservableDiff: {\n      value: orderIndependentDeepDiff,\n      enumerable: true\n    },\n    orderIndepHash: {\n      value: getOrderIndependentHash,\n      enumerable: true\n    },\n    applyDiff: {\n      value: applyDiff,\n      enumerable: true\n    },\n    applyChange: {\n      value: applyChange,\n      enumerable: true\n    },\n    revertChange: {\n      value: revertChange,\n      enumerable: true\n    },\n    isConflict: {\n      value: function () {\n        return typeof $conflict !== 'undefined';\n      },\n      enumerable: true\n    }\n  });\n\n  // hackish...\n  accumulateDiff.DeepDiff = accumulateDiff;\n  // ...but works with:\n  // import DeepDiff from 'deep-diff'\n  // import { DeepDiff } from 'deep-diff'\n  // const DeepDiff = require('deep-diff');\n  // const { DeepDiff } = require('deep-diff');\n\n  if (root) {\n    root.DeepDiff = accumulateDiff;\n  }\n\n  return accumulateDiff;\n}));\n\n\n//# sourceURL=webpack:///./node_modules/deep-diff/index.js?");

/***/ }),

/***/ "./node_modules/schema-inspector/index.js":
/*!************************************************!*\
  !*** ./node_modules/schema-inspector/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib/schema-inspector */ \"./node_modules/schema-inspector/lib/schema-inspector.js\");\n\n\n//# sourceURL=webpack:///./node_modules/schema-inspector/index.js?");

/***/ }),

/***/ "./node_modules/schema-inspector/lib/schema-inspector.js":
/*!***************************************************************!*\
  !*** ./node_modules/schema-inspector/lib/schema-inspector.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n * This module is intended to be executed both on client side and server side.\n * No error should be thrown. (soft error handling)\n */\n\n(function () {\n\tvar root = {};\n\t// Dependencies --------------------------------------------------------------\n\troot.async = ( true) ? __webpack_require__(/*! async */ \"./node_modules/async/dist/async.mjs\") : undefined;\n\tif (typeof root.async !== 'object') {\n\t\tthrow new Error('Module async is required (https://github.com/caolan/async)');\n\t}\n\tvar async = root.async;\n\n\tfunction _extend(origin, add) {\n\t\tif (!add || typeof add !== 'object') {\n\t\t\treturn origin;\n\t\t}\n\t\tvar keys = Object.keys(add);\n\t\tvar i = keys.length;\n\t\twhile (i--) {\n\t\t\torigin[keys[i]] = add[keys[i]];\n\t\t}\n\t\treturn origin;\n\t}\n\n\tfunction _merge() {\n\t\tvar ret = {};\n\t\tvar args = Array.prototype.slice.call(arguments);\n\t\tvar keys = null;\n\t\tvar i = null;\n\n\t\targs.forEach(function (arg) {\n\t\t\tif (arg && arg.constructor === Object) {\n\t\t\t\tkeys = Object.keys(arg);\n\t\t\t\ti = keys.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tret[keys[i]] = arg[keys[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn ret;\n\t}\n\n\t// Customisable class (Base class) -------------------------------------------\n\t// Use with operation \"new\" to extend Validation and Sanitization themselves,\n\t// not their prototype. In other words, constructor shall be call to extend\n\t// those functions, instead of being in their constructor, like this:\n\t//\t\t_extend(Validation, new Customisable);\n\n\tfunction Customisable() {\n\t\tthis.custom = {};\n\n\t\tthis.extend = function (custom) {\n\t\t\treturn _extend(this.custom, custom);\n\t\t};\n\n\t\tthis.reset = function () {\n\t\t\tthis.custom = {};\n\t\t};\n\n\t\tthis.remove = function (fields) {\n\t\t\tif (!_typeIs.array(fields)) {\n\t\t\t\tfields = [fields];\n\t\t\t}\n\t\t\tfields.forEach(function (field) {\n\t\t\t\tdelete this.custom[field];\n\t\t\t}, this);\n\t\t};\n\t}\n\n\t// Inspection class (Base class) ---------------------------------------------\n\t// Use to extend Validation and Sanitization prototypes. Inspection\n\t// constructor shall be called in derived class constructor.\n\n\tfunction Inspection(schema, custom) {\n\t\tvar _stack = ['@'];\n\n\t\tthis._schema = schema;\n\t\tthis._custom = {};\n\t\tif (custom != null) {\n\t\t\tfor (var key in custom) {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(custom, key)) {\n\t\t\t\t\tthis._custom['$' + key] = custom[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._getDepth = function () {\n\t\t\treturn _stack.length;\n\t\t};\n\n\t\tthis._dumpStack = function () {\n\t\t\treturn _stack.map(function (i) {return i.replace(/^\\[/g, '\\u001b\\u001c\\u001d\\u001e');})\n\t\t\t.join('.').replace(/\\.\\u001b\\u001c\\u001d\\u001e/g, '[');\n\t\t};\n\n\t\tthis._deeperObject = function (name) {\n\t\t\t_stack.push((/^[a-z$_][a-z0-9$_]*$/i).test(name) ? name : '[\"' + name + '\"]');\n\t\t\treturn this;\n\t\t};\n\n\t\tthis._deeperArray = function (i) {\n\t\t\t_stack.push('[' + i + ']');\n\t\t\treturn this;\n\t\t};\n\n\t\tthis._back = function () {\n\t\t\t_stack.pop();\n\t\t\treturn this;\n\t\t};\n\t}\n\t// Simple types --------------------------------------------------------------\n\t// If the property is not defined or is not in this list:\n\tvar _typeIs = {\n\t\t\"function\": function (element) {\n\t\t\treturn typeof element === 'function';\n\t\t},\n\t\t\"string\": function (element) {\n\t\t\treturn typeof element === 'string';\n\t\t},\n\t\t\"number\": function (element) {\n\t\t\treturn typeof element === 'number' && !isNaN(element);\n\t\t},\n\t\t\"integer\": function (element) {\n\t\t\treturn typeof element === 'number' && element % 1 === 0;\n\t\t},\n\t\t\"NaN\": function (element) {\n\t\t\treturn typeof element === 'number' && isNaN(element);\n\t\t},\n\t\t\"boolean\": function (element) {\n\t\t\treturn typeof element === 'boolean';\n\t\t},\n\t\t\"null\": function (element) {\n\t\t\treturn element === null;\n\t\t},\n\t\t\"date\": function (element) {\n\t\t\treturn element != null && element instanceof Date;\n\t\t},\n\t\t\"object\": function (element) {\n\t\t\treturn element != null && element.constructor === Object;\n\t\t},\n\t\t\"array\": function (element) {\n\t\t\treturn element != null && element.constructor === Array;\n\t\t},\n\t\t\"any\": function (element) {\n\t\t\treturn true;\n\t\t}\n\t};\n\n\tfunction _simpleType(type, candidate) {\n\t\tif (typeof type == 'function') {\n\t\t\treturn candidate instanceof type;\n\t\t}\n\t\ttype = type in _typeIs ? type : 'any';\n\t\treturn _typeIs[type](candidate);\n\t}\n\n\tfunction _realType(candidate) {\n\t\tfor (var i in _typeIs) {\n\t\t\tif (_simpleType(i, candidate)) {\n\t\t\t\tif (i !== 'any') { return i; }\n\t\t\t\treturn 'an instance of ' + candidate.constructor.name;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction getIndexes(a, value) {\n\t\tvar indexes = [];\n\t\tvar i = a.indexOf(value);\n\n\t\twhile (i !== -1) {\n\t\t\tindexes.push(i);\n\t\t\ti = a.indexOf(value, i + 1);\n\t\t}\n\t\treturn indexes;\n\t}\n\n\t// Available formats ---------------------------------------------------------\n\tvar _formats = {\n\t\t'void': /^$/,\n\t\t'url': /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)?(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i,\n\t\t'date-time': /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?(Z?|(-|\\+)\\d{2}:\\d{2})$/,\n\t\t'date': /^\\d{4}-\\d{2}-\\d{2}$/,\n\t\t'coolDateTime': /^\\d{4}(-|\\/)\\d{2}(-|\\/)\\d{2}(T| )\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z?$/,\n\t\t'time': /^\\d{2}\\:\\d{2}\\:\\d{2}$/,\n\t\t'color': /^#([0-9a-f])+$/i,\n\t\t'email': /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i,\n\t\t'numeric': /^[0-9]+$/,\n\t\t'integer': /^\\-?[0-9]+$/,\n\t\t'decimal': /^\\-?[0-9]*\\.?[0-9]+$/,\n\t\t'alpha': /^[a-z]+$/i,\n\t\t'alphaNumeric': /^[a-z0-9]+$/i,\n\t\t'alphaDash': /^[a-z0-9_-]+$/i,\n\t\t'javascript': /^[a-z_\\$][a-z0-9_\\$]*$/i,\n\t\t'upperString': /^[A-Z ]*$/,\n\t\t'lowerString': /^[a-z ]*$/\n\t};\n\n// Validation ------------------------------------------------------------------\n\tvar _validationAttribut = {\n\t\toptional: function (schema, candidate) {\n\t\t\tvar opt = typeof schema.optional === 'boolean' ? schema.optional : (schema.optional === 'true'); // Default is false\n\n\t\t\tif (opt === true) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (typeof candidate === 'undefined') {\n\t\t\t\tthis.report('is missing and not optional', null, 'optional');\n\t\t\t}\n\t\t},\n\t\ttype: function (schema, candidate) {\n\t\t\t// return because optional function already handle this case\n\t\t\tif (typeof candidate === 'undefined' || (typeof schema.type !== 'string' && !(schema.type instanceof Array) && typeof schema.type !== 'function')) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar types = _typeIs.array(schema.type) ? schema.type : [schema.type];\n\t\t\tvar typeIsValid = types.some(function (type) {\n\t\t\t\treturn _simpleType(type, candidate);\n\t\t\t});\n\t\t\tif (!typeIsValid) {\n\t\t\t\ttypes = types.map(function (t) {return typeof t === 'function' ? 'and instance of ' + t.name : t; });\n\t\t\t\tthis.report('must be ' + types.join(' or ') + ', but is ' + _realType(candidate), null, 'type');\n\t\t\t}\n\t\t},\n\t\tuniqueness: function (schema, candidate) {\n\t\t\tif (typeof schema.uniqueness === 'string') { schema.uniqueness = (schema.uniqueness === 'true'); }\n\t\t\tif (typeof schema.uniqueness !== 'boolean' || schema.uniqueness === false || (!_typeIs.array(candidate) && typeof candidate !== 'string')) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar reported = [];\n\t\t\tfor (var i = 0; i < candidate.length; i++) {\n\t\t\t\tif (reported.indexOf(candidate[i]) >= 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvar indexes = getIndexes(candidate, candidate[i]);\n\t\t\t\tif (indexes.length > 1) {\n\t\t\t\t\treported.push(candidate[i]);\n\t\t\t\t\tthis.report('has value [' + candidate[i] + '] more than once at indexes [' + indexes.join(', ') + ']', null, 'uniqueness');\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tpattern: function (schema, candidate) {\n\t\t\tvar self = this;\n\t\t\tvar regexs = schema.pattern;\n\t\t\tif (typeof candidate !== 'string') {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar matches = false;\n\t\t\tif (!_typeIs.array(regexs)) {\n\t\t\t\tregexs = [regexs];\n\t\t\t}\n\t\t\tregexs.forEach(function (regex) {\n\t\t\t\tif (typeof regex === 'string' && regex in _formats) {\n\t\t\t\t\tregex = _formats[regex];\n\t\t\t\t}\n\t\t\t\tif (regex instanceof RegExp) {\n\t\t\t\t\tif (regex.test(candidate)) {\n\t\t\t\t\t\tmatches = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (!matches) {\n\t\t\t\tself.report('must match [' + regexs.join(' or ') + '], but is equal to \"' + candidate + '\"', null, 'pattern');\n\t\t\t}\n\t\t},\n\t\tvalidDate: function (schema, candidate) {\n\t\t\tif (String(schema.validDate) === 'true' && candidate instanceof Date && isNaN(candidate.getTime())) {\n\t\t\t\tthis.report('must be a valid date', null, 'validDate');\n\t\t\t}\n\t\t},\n\t\tminLength: function (schema, candidate) {\n\t\t\tif (typeof candidate !== 'string' && !_typeIs.array(candidate)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar minLength = Number(schema.minLength);\n\t\t\tif (isNaN(minLength)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (candidate.length < minLength) {\n\t\t\t\tthis.report('must be longer than ' + minLength + ' elements, but it has ' + candidate.length, null, 'minLength');\n\t\t\t}\n\t\t},\n\t\tmaxLength: function (schema, candidate) {\n\t\t\tif (typeof candidate !== 'string' && !_typeIs.array(candidate)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar maxLength = Number(schema.maxLength);\n\t\t\tif (isNaN(maxLength)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (candidate.length > maxLength) {\n\t\t\t\tthis.report('must be shorter than ' + maxLength + ' elements, but it has ' + candidate.length, null, 'maxLength');\n\t\t\t}\n\t\t},\n\t\texactLength: function (schema, candidate) {\n\t\t\tif (typeof candidate !== 'string' && !_typeIs.array(candidate)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar exactLength = Number(schema.exactLength);\n\t\t\tif (isNaN(exactLength)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (candidate.length !== exactLength) {\n\t\t\t\tthis.report('must have exactly ' + exactLength + ' elements, but it have ' + candidate.length, null, 'exactLength');\n\t\t\t}\n\t\t},\n\t\tlt: function (schema, candidate) {\n\t\t\tvar limit = Number(schema.lt);\n\t\t\tif (typeof candidate !== 'number' || isNaN(limit)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (candidate >= limit) {\n\t\t\t\tthis.report('must be less than ' + limit + ', but is equal to \"' + candidate + '\"', null, 'lt');\n\t\t\t}\n\t\t},\n\t\tlte: function (schema, candidate) {\n\t\t\tvar limit = Number(schema.lte);\n\t\t\tif (typeof candidate !== 'number' || isNaN(limit)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (candidate > limit) {\n\t\t\t\tthis.report('must be less than or equal to ' + limit + ', but is equal to \"' + candidate + '\"', null, 'lte');\n\t\t\t}\n\t\t},\n\t\tgt: function (schema, candidate) {\n\t\t\tvar limit = Number(schema.gt);\n\t\t\tif (typeof candidate !== 'number' || isNaN(limit)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (candidate <= limit) {\n\t\t\t\tthis.report('must be greater than ' + limit + ', but is equal to \"' + candidate + '\"', null, 'gt');\n\t\t\t}\n\t\t},\n\t\tgte: function (schema, candidate) {\n\t\t\tvar limit = Number(schema.gte);\n\t\t\tif (typeof candidate !== 'number' || isNaN(limit)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (candidate < limit) {\n\t\t\t\tthis.report('must be greater than or equal to ' + limit + ', but is equal to \"' + candidate + '\"', null, 'gte');\n\t\t\t}\n\t\t},\n\t\teq: function (schema, candidate) {\n\t\t\tif (typeof candidate !== 'number' && typeof candidate !== 'string' && typeof candidate !== 'boolean') {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar limit = schema.eq;\n\t\t\tif (typeof limit !== 'number' && typeof limit !== 'string' && typeof limit !== 'boolean' && !_typeIs.array(limit)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (_typeIs.array(limit)) {\n\t\t\t\tfor (var i = 0; i < limit.length; i++) {\n\t\t\t\t\tif (candidate === limit[i]) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.report('must be equal to [' + limit.map(function (l) {\n\t\t\t\t\treturn '\"' + l + '\"';\n\t\t\t\t}).join(' or ') + '], but is equal to \"' + candidate + '\"', null, 'eq');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (candidate !== limit) {\n\t\t\t\t\tthis.report('must be equal to \"' + limit + '\", but is equal to \"' + candidate + '\"', null, 'eq');\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tne: function (schema, candidate) {\n\t\t\tif (typeof candidate !== 'number' && typeof candidate !== 'string') {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar limit = schema.ne;\n\t\t\tif (typeof limit !== 'number' && typeof limit !== 'string' && !_typeIs.array(limit)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (_typeIs.array(limit)) {\n\t\t\t\tfor (var i = 0; i < limit.length; i++) {\n\t\t\t\t\tif (candidate === limit[i]) {\n\t\t\t\t\t\tthis.report('must not be equal to \"' + limit[i] + '\"', null, 'ne');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (candidate === limit) {\n\t\t\t\t\tthis.report('must not be equal to \"' + limit + '\"', null, 'ne');\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tsomeKeys: function (schema, candidat) {\n\t\t\tvar _keys = schema.someKeys;\n\t\t\tif (!_typeIs.object(candidat)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar valid = _keys.some(function (action) {\n\t\t\t\treturn (action in candidat);\n\t\t\t});\n\t\t\tif (!valid) {\n\t\t\t\tthis.report('must have at least key ' + _keys.map(function (i) {\n\t\t\t\t\treturn '\"' + i + '\"';\n\t\t\t\t}).join(' or '), null, 'someKeys');\n\t\t\t}\n\t\t},\n\t\tstrict: function (schema, candidate) {\n\t\t\tif (typeof schema.strict === 'string') { schema.strict = (schema.strict === 'true'); }\n\t\t\tif (schema.strict !== true || !_typeIs.object(candidate) || !_typeIs.object(schema.properties)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar self = this;\n\t\t\tif (typeof schema.properties['*'] === 'undefined') {\n\t\t\t\tvar intruder = Object.keys(candidate).filter(function (key) {\n\t\t\t\t\treturn (typeof schema.properties[key] === 'undefined');\n\t\t\t\t});\n\t\t\t\tif (intruder.length > 0) {\n\t\t\t\t\tvar msg = 'should not contains ' + (intruder.length > 1 ? 'properties' : 'property') +\n\t\t\t\t\t\t' [' + intruder.map(function (i) { return '\"' + i + '\"'; }).join(', ') + ']';\n\t\t\t\t\tself.report(msg, null, 'strict');\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\texec: function (schema, candidate, callback) {\n\t\t\tvar self = this;\n\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\treturn this.asyncExec(schema, candidate, callback);\n\t\t\t}\n\t\t\t(_typeIs.array(schema.exec) ? schema.exec : [schema.exec]).forEach(function (exec) {\n\t\t\t\tif (typeof exec === 'function') {\n\t\t\t\t\texec.call(self, schema, candidate);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tproperties: function (schema, candidate, callback) {\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\treturn this.asyncProperties(schema, candidate, callback);\n\t\t\t}\n\t\t\tif (!(schema.properties instanceof Object) || !(candidate instanceof Object)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar properties = schema.properties,\n\t\t\t\t\ti;\n\t\t\tif (properties['*'] != null) {\n\t\t\t\tfor (i in candidate) {\n\t\t\t\t\tif (i in properties) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthis._deeperObject(i);\n\t\t\t\t\tthis._validate(properties['*'], candidate[i]);\n\t\t\t\t\tthis._back();\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (i in properties) {\n\t\t\t\tif (i === '*') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis._deeperObject(i);\n\t\t\t\tthis._validate(properties[i], candidate[i]);\n\t\t\t\tthis._back();\n\t\t\t}\n\t\t},\n\t\titems: function (schema, candidate, callback) {\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\treturn this.asyncItems(schema, candidate, callback);\n\t\t\t}\n\t\t\tif (!(schema.items instanceof Object) || !(candidate instanceof Object)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar items = schema.items;\n\t\t\tvar i, l;\n\t\t\t// If provided schema is an array\n\t\t\t// then call validate for each case\n\t\t\t// else it is an Object\n\t\t\t// then call validate for each key\n\t\t\tif (_typeIs.array(items) && _typeIs.array(candidate)) {\n\t\t\t\tfor (i = 0, l = items.length; i < l; i++) {\n\t\t\t\t\tthis._deeperArray(i);\n\t\t\t\t\tthis._validate(items[i], candidate[i]);\n\t\t\t\t\tthis._back();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfor (var key in candidate) {\n\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(candidate, key)) {\n\t\t\t\t\t\tthis._deeperArray(key);\n\t\t\t\t\t\tthis._validate(items, candidate[key]);\n\t\t\t\t\t\tthis._back();\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tvar _asyncValidationAttribut = {\n\t\tasyncExec: function (schema, candidate, callback) {\n\t\t\tvar self = this;\n\t\t\tasync.eachSeries(_typeIs.array(schema.exec) ? schema.exec : [schema.exec], function (exec, done) {\n\t\t\t\tif (typeof exec === 'function') {\n\t\t\t\t\tif (exec.length > 2) {\n\t\t\t\t\t\treturn exec.call(self, schema, candidate, done);\n\t\t\t\t\t}\n\t\t\t\t\texec.call(self, schema, candidate);\n\t\t\t\t}\n\t\t\t\tasync.nextTick(done);\n\t\t\t}, callback);\n\t\t},\n\t\tasyncProperties: function (schema, candidate, callback) {\n\t\t\tif (!(schema.properties instanceof Object) || !_typeIs.object(candidate)) {\n\t\t\t\treturn callback();\n\t\t\t}\n\t\t\tvar self = this;\n\t\t\tvar properties = schema.properties;\n\t\t\tasync.series([\n\t\t\t\tfunction (next) {\n\t\t\t\t\tif (properties['*'] == null) {\n\t\t\t\t\t\treturn next();\n\t\t\t\t\t}\n\t\t\t\t\tasync.eachSeries(Object.keys(candidate), function (i, done) {\n\t\t\t\t\t\tif (i in properties) {\n\t\t\t\t\t\t\treturn async.nextTick(done);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself._deeperObject(i);\n\t\t\t\t\t\tself._asyncValidate(properties['*'], candidate[i], function (err) {\n\t\t\t\t\t\t\tself._back();\n\t\t\t\t\t\t\tdone(err);\n\t\t\t\t\t\t});\n\t\t\t\t\t}, next);\n\t\t\t\t},\n\t\t\t\tfunction (next) {\n\t\t\t\t\tasync.eachSeries(Object.keys(properties), function (i, done) {\n\t\t\t\t\t\tif (i === '*') {\n\t\t\t\t\t\t\treturn async.nextTick(done);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself._deeperObject(i);\n\t\t\t\t\t\tself._asyncValidate(properties[i], candidate[i], function (err) {\n\t\t\t\t\t\t\tself._back();\n\t\t\t\t\t\t\tdone(err);\n\t\t\t\t\t\t});\n\t\t\t\t\t}, next);\n\t\t\t\t}\n\t\t\t], callback);\n\t\t},\n\t\tasyncItems: function (schema, candidate, callback) {\n\t\t\tif (!(schema.items instanceof Object) || !(candidate instanceof Object)) {\n\t\t\t\treturn callback();\n\t\t\t}\n\t\t\tvar self = this;\n\t\t\tvar items = schema.items;\n\t\t\tvar i, l;\n\n\t\t\tif (_typeIs.array(items) && _typeIs.array(candidate)) {\n\t\t\t\tasync.timesSeries(items.length, function (i, done) {\n\t\t\t\t\tself._deeperArray(i);\n\t\t\t\t\tself._asyncValidate(items[i], candidate[i], function (err, res) {\n\t\t\t\t\t\tself._back();\n\t\t\t\t\t\tdone(err, res);\n\t\t\t\t\t});\n\t\t\t\t\tself._back();\n\t\t\t\t}, callback);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tasync.eachSeries(Object.keys(candidate), function (key, done) {\n\t\t\t\t\tself._deeperArray(key);\n\t\t\t\t\tself._asyncValidate(items, candidate[key], function (err, res) {\n\t\t\t\t\t\tself._back();\n\t\t\t\t\t\tdone(err, res);\n\t\t\t\t\t});\n\t\t\t\t}, callback);\n\t\t\t}\n\t\t}\n\t};\n\n\t// Validation Class ----------------------------------------------------------\n\t// inherits from Inspection class (actually we just call Inspection\n\t// constructor with the new context, because its prototype is empty\n\tfunction Validation(schema, custom) {\n\t\tInspection.prototype.constructor.call(this, schema, _merge(Validation.custom, custom));\n\t\tvar _error = [];\n\n\t\tthis._basicFields = Object.keys(_validationAttribut);\n\t\tthis._customFields = Object.keys(this._custom);\n\t\tthis.origin = null;\n\n\t\tthis.report = function (message, code, reason) {\n\t\t\tvar newErr = {\n\t\t\t\tcode: code || this.userCode || null,\n\t\t\t\treason: reason || 'unknown',\n\t\t\t\tmessage: this.userError || message || 'is invalid',\n\t\t\t\tproperty: this.userAlias ? (this.userAlias + ' (' + this._dumpStack() + ')') : this._dumpStack()\n\t\t\t};\n\t\t\t_error.push(newErr);\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.result = function () {\n\t\t\treturn {\n\t\t\t\terror: _error,\n\t\t\t\tvalid: _error.length === 0,\n\t\t\t\tformat: function () {\n\t\t\t\t\tif (this.valid === true) {\n\t\t\t\t\t\treturn 'Candidate is valid';\n\t\t\t\t\t}\n\t\t\t\t\treturn this.error.map(function (i) {\n\t\t\t\t\t\treturn 'Property ' + i.property + ': ' + i.message;\n\t\t\t\t\t}).join('\\n');\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t}\n\n\t_extend(Validation.prototype, _validationAttribut);\n\t_extend(Validation.prototype, _asyncValidationAttribut);\n\t_extend(Validation, new Customisable());\n\n\tValidation.prototype.validate = function (candidate, callback) {\n\t\tthis.origin = candidate;\n\t\tif (typeof callback === 'function') {\n\t\t\tvar self = this;\n\t\t\treturn async.nextTick(function () {\n\t\t\t\tself._asyncValidate(self._schema, candidate, function (err) {\n\t\t\t\t\tself.origin = null;\n\t\t\t\t\tcallback(err, self.result());\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\treturn this._validate(this._schema, candidate).result();\n\t};\n\n\tValidation.prototype._validate = function (schema, candidate, callback) {\n\t\tthis.userCode = schema.code || null;\n\t\tthis.userError = schema.error || null;\n\t\tthis.userAlias = schema.alias || null;\n\t\tthis._basicFields.forEach(function (i) {\n\t\t\tif ((i in schema || i === 'optional') && typeof this[i] === 'function') {\n\t\t\t\tthis[i](schema, candidate);\n\t\t\t}\n\t\t}, this);\n\t\tthis._customFields.forEach(function (i) {\n\t\t\tif (i in schema && typeof this._custom[i] === 'function') {\n\t\t\t\tthis._custom[i].call(this, schema, candidate);\n\t\t\t}\n\t\t}, this);\n\t\treturn this;\n\t};\n\n\tValidation.prototype._asyncValidate = function (schema, candidate, callback) {\n\t\tvar self = this;\n\t\tthis.userCode = schema.code || null;\n\t\tthis.userError = schema.error || null;\n\t\tthis.userAlias = schema.alias || null;\n\n\t\tasync.series([\n\t\t\tfunction (next) {\n\t\t\t\tasync.eachSeries(Object.keys(_validationAttribut), function (i, done) {\n\t\t\t\t\tasync.nextTick(function () {\n\t\t\t\t\t\tif ((i in schema || i === 'optional') && typeof self[i] === 'function') {\n\t\t\t\t\t\t\tif (self[i].length > 2) {\n\t\t\t\t\t\t\t\treturn self[i](schema, candidate, done);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself[i](schema, candidate);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdone();\n\t\t\t\t\t});\n\t\t\t\t}, next);\n\t\t\t},\n\t\t\tfunction (next) {\n\t\t\t\tasync.eachSeries(Object.keys(self._custom), function (i, done) {\n\t\t\t\t\tasync.nextTick(function () {\n\t\t\t\t\t\tif (i in schema && typeof self._custom[i] === 'function') {\n\t\t\t\t\t\t\tif (self._custom[i].length > 2) {\n\t\t\t\t\t\t\t\treturn self._custom[i].call(self, schema, candidate, done);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself._custom[i].call(self, schema, candidate);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdone();\n\t\t\t\t\t});\n\t\t\t\t}, next);\n\t\t\t}\n\t\t], callback);\n\t};\n\n// Sanitization ----------------------------------------------------------------\n\t// functions called by _sanitization.type method.\n\tvar _forceType = {\n\t\tnumber: function (post, schema) {\n\t\t\tvar n;\n\t\t\tif (typeof post === 'number') {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\telse if (post === '') {\n\t\t\t\tif (typeof schema.def !== 'undefined')\n\t\t\t\t\treturn schema.def;\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\telse if (typeof post === 'string') {\n\t\t\t\tn = parseFloat(post.replace(/,/g, '.').replace(/ /g, ''));\n\t\t\t\tif (typeof n === 'number') {\n\t\t\t\t\treturn n;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (post instanceof Date) {\n\t\t\t\treturn +post;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tinteger: function (post, schema) {\n\t\t\tvar n;\n\t\t\tif (typeof post === 'number' && post % 1 === 0) {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\telse if (post === '') {\n\t\t\t\tif (typeof schema.def !== 'undefined')\n\t\t\t\t\treturn schema.def;\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\telse if (typeof post === 'string') {\n\t\t\t\tn = parseInt(post.replace(/ /g, ''), 10);\n\t\t\t\tif (typeof n === 'number') {\n\t\t\t\t\treturn n;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (typeof post === 'number') {\n\t\t\t\treturn parseInt(post, 10);\n\t\t\t}\n\t\t\telse if (typeof post === 'boolean') {\n\t\t\t\tif (post) { return 1; }\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\telse if (post instanceof Date) {\n\t\t\t\treturn +post;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tstring: function (post, schema) {\n\t\t\tif (typeof post === 'boolean' || typeof post === 'number' || post instanceof Date) {\n\t\t\t\treturn post.toString();\n\t\t\t}\n\t\t\telse if (_typeIs.array(post)) {\n\t\t\t\t// If user authorize array and strings...\n\t\t\t\tif (schema.items || schema.properties)\n\t\t\t\t\treturn post;\n\t\t\t\treturn post.join(String(schema.joinWith || ','));\n\t\t\t}\n\t\t\telse if (post instanceof Object) {\n\t\t\t\t// If user authorize objects ans strings...\n\t\t\t\tif (schema.items || schema.properties)\n\t\t\t\t\treturn post;\n\t\t\t\treturn JSON.stringify(post);\n\t\t\t}\n\t\t\telse if (typeof post === 'string' && post.length) {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tdate: function (post, schema) {\n\t\t\tif (post instanceof Date) {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar d = new Date(post);\n\t\t\t\tif (!isNaN(d.getTime())) { // if valid date\n\t\t\t\t\treturn d;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tboolean: function (post, schema) {\n\t\t\tif (typeof post === 'undefined') return null;\n\t\t\tif (typeof post === 'string' && post.toLowerCase() === 'false') return false;\n\t\t\treturn !!post;\n\t\t},\n\t\tobject: function (post, schema) {\n\t\t\tif (typeof post !== 'string' || _typeIs.object(post)) {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(post);\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t},\n\t\tarray: function (post, schema) {\n\t\t\tif (_typeIs.array(post))\n\t\t\t\treturn post;\n\t\t\tif (typeof post === 'undefined')\n\t\t\t\treturn null;\n\t\t\tif (typeof post === 'string') {\n\t\t\t\tif (post.substring(0,1) === '[' && post.slice(-1) === ']') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn JSON.parse(post);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn post.split(String(schema.splitWith || ','));\n\n\t\t\t}\n\t\t\tif (!_typeIs.array(post))\n\t\t\t\treturn [ post ];\n\t\t\treturn null;\n\t\t}\n\t};\n\n\tvar _applyRules = {\n\t\tupper: function (post) {\n\t\t\treturn post.toUpperCase();\n\t\t},\n\t\tlower: function (post) {\n\t\t\treturn post.toLowerCase();\n\t\t},\n\t\ttitle: function (post) {\n\t\t\t// Fix by seb (replace \\w\\S* by \\S* => exemple : coucou ça va)\n\t\t\treturn post.replace(/\\S*/g, function (txt) {\n\t\t\t\treturn txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n\t\t\t});\n\t\t},\n\t\tcapitalize: function (post) {\n\t\t\treturn post.charAt(0).toUpperCase() + post.substr(1).toLowerCase();\n\t\t},\n\t\tucfirst: function (post) {\n\t\t\treturn post.charAt(0).toUpperCase() + post.substr(1);\n\t\t},\n\t\ttrim: function (post) {\n\t\t\treturn post.trim();\n\t\t}\n\t};\n\n\t// Every function return the future value of each property. Therefore you\n\t// have to return post even if you do not change its value\n\tvar _sanitizationAttribut = {\n\t\tstrict: function (schema, post) {\n\t\t\tif (typeof schema.strict === 'string') { schema.strict = (schema.strict === 'true'); }\n\t\t\tif (schema.strict !== true)\n\t\t\t\treturn post;\n\t\t\tif (!_typeIs.object(schema.properties))\n\t\t\t\treturn post;\n\t\t\tif (!_typeIs.object(post))\n\t\t\t\treturn post;\n\t\t\tvar that = this;\n\t\t\tObject.keys(post).forEach(function (key) {\n\t\t\t\tif (!(key in schema.properties)) {\n\t\t\t\t\tdelete post[key];\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn post;\n\t\t},\n\t\toptional: function (schema, post) {\n\t\t\tvar opt = typeof schema.optional === 'boolean' ? schema.optional : (schema.optional !== 'false'); // Default: true\n\t\t\tif (opt === true) {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tif (typeof post !== 'undefined') {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tthis.report();\n\t\t\tif (schema.def === Date) {\n\t\t\t\treturn new Date();\n\t\t\t}\n\t\t\treturn schema.def;\n\t\t},\n\t\ttype: function (schema, post) {\n\t\t\t// if (_typeIs['object'](post) || _typeIs.array(post)) {\n\t\t\t// \treturn post;\n\t\t\t// }\n\t\t\tif (typeof schema.type !== 'string' || typeof _forceType[schema.type] !== 'function') {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tvar n;\n\t\t\tvar opt = typeof schema.optional === 'boolean' ? schema.optional : true;\n\t\t\tif (typeof _forceType[schema.type] === 'function') {\n\t\t\t\tn = _forceType[schema.type](post, schema);\n\t\t\t\tif ((n === null && !opt) || (!n && isNaN(n)) || (n === null && schema.type === 'string')) {\n\t\t\t\t\tn = schema.def;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!opt) {\n\t\t\t\tn = schema.def;\n\t\t\t}\n\t\t\tif ((n != null || (typeof schema.def !== 'undefined' && schema.def === n)) && n !== post) {\n\t\t\t\tthis.report();\n\t\t\t\treturn n;\n\t\t\t}\n\t\t\treturn post;\n\t\t},\n\t\trules: function (schema, post) {\n\t\t\tvar rules = schema.rules;\n\t\t\tif (typeof post !== 'string' || (typeof rules !== 'string' && !_typeIs.array(rules))) {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tvar modified = false;\n\t\t\t(_typeIs.array(rules) ? rules : [rules]).forEach(function (rule) {\n\t\t\t\tif (typeof _applyRules[rule] === 'function') {\n\t\t\t\t\tpost = _applyRules[rule](post);\n\t\t\t\t\tmodified = true;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (modified) {\n\t\t\t\tthis.report();\n\t\t\t}\n\t\t\treturn post;\n\t\t},\n\t\tmin: function (schema, post) {\n\t\t\tvar postTest = Number(post);\n\t\t\tif (isNaN(postTest)) {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tvar min = Number(schema.min);\n\t\t\tif (isNaN(min)) {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tif (postTest < min) {\n\t\t\t\tthis.report();\n\t\t\t\treturn min;\n\t\t\t}\n\t\t\treturn post;\n\t\t},\n\t\tmax: function (schema, post) {\n\t\t\tvar postTest = Number(post);\n\t\t\tif (isNaN(postTest)) {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tvar max = Number(schema.max);\n\t\t\tif (isNaN(max)) {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tif (postTest > max) {\n\t\t\t\tthis.report();\n\t\t\t\treturn max;\n\t\t\t}\n\t\t\treturn post;\n\t\t},\n\t\tminLength: function (schema, post) {\n\t\t\tvar limit = Number(schema.minLength);\n\t\t\tif (typeof post !== 'string' || isNaN(limit) || limit < 0) {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tvar str = '';\n\t\t\tvar gap = limit - post.length;\n\t\t\tif (gap > 0) {\n\t\t\t\tfor (var i = 0; i < gap; i++) {\n\t\t\t\t\tstr += '-';\n\t\t\t\t}\n\t\t\t\tthis.report();\n\t\t\t\treturn post + str;\n\t\t\t}\n\t\t\treturn post;\n\t\t},\n\t\tmaxLength: function (schema, post) {\n\t\t\tvar limit = Number(schema.maxLength);\n\t\t\tif (typeof post !== 'string' || isNaN(limit) || limit < 0) {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tif (post.length > limit) {\n\t\t\t\tthis.report();\n\t\t\t\treturn post.slice(0, limit);\n\t\t\t}\n\t\t\treturn post;\n\t\t},\n\t\tproperties: function (schema, post, callback) {\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\treturn this.asyncProperties(schema, post, callback);\n\t\t\t}\n\t\t\tif (!post || typeof post !== 'object') {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tvar properties = schema.properties;\n\t\t\tvar tmp;\n\t\t\tvar i;\n\t\t\tif (typeof properties['*'] !== 'undefined') {\n\t\t\t\tfor (i in post) {\n\t\t\t\t\tif (i in properties) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthis._deeperObject(i);\n\t\t\t\t\ttmp = this._sanitize(schema.properties['*'], post[i]);\n\t\t\t\t\tif (typeof tmp !== 'undefined') {\n\t\t\t\t\t\tpost[i]= tmp;\n\t\t\t\t\t}\n\t\t\t\t\tthis._back();\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (i in schema.properties) {\n\t\t\t\tif (i !== '*') {\n\t\t\t\t\tthis._deeperObject(i);\n\t\t\t\t\ttmp = this._sanitize(schema.properties[i], post[i]);\n\t\t\t\t\tif (typeof tmp !== 'undefined') {\n\t\t\t\t\t\tpost[i]= tmp;\n\t\t\t\t\t}\n\t\t\t\t\tthis._back();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn post;\n\t\t},\n\t\titems: function (schema, post, callback) {\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\treturn this.asyncItems(schema, post, callback);\n\t\t\t}\n\t\t\tif (!(schema.items instanceof Object) || !(post instanceof Object)) {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tvar i;\n\t\t\tif (_typeIs.array(schema.items) && _typeIs.array(post)) {\n\t\t\t\tvar minLength = schema.items.length < post.length ? schema.items.length : post.length;\n\t\t\t\tfor (i = 0; i < minLength; i++) {\n\t\t\t\t\tthis._deeperArray(i);\n\t\t\t\t\tpost[i] = this._sanitize(schema.items[i], post[i]);\n\t\t\t\t\tthis._back();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfor (i in post) {\n\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(post, i)) {\n\t\t\t\t\t\tthis._deeperArray(i);\n\t\t\t\t\t\tpost[i] = this._sanitize(schema.items, post[i]);\n\t\t\t\t\t\tthis._back();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn post;\n\t\t},\n\t\texec: function (schema, post, callback) {\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\treturn this.asyncExec(schema, post, callback);\n\t\t\t}\n\t\t\tvar execs = _typeIs.array(schema.exec) ? schema.exec : [schema.exec];\n\n\t\t\texecs.forEach(function (exec) {\n\t\t\t\tif (typeof exec === 'function') {\n\t\t\t\t\tpost = exec.call(this, schema, post);\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\treturn post;\n\t\t}\n\t};\n\n\tvar _asyncSanitizationAttribut = {\n\t\tasyncExec: function (schema, post, callback) {\n\t\t\tvar self = this;\n\t\t\tvar execs = _typeIs.array(schema.exec) ? schema.exec : [schema.exec];\n\n\t\t\tasync.eachSeries(execs, function (exec, done) {\n\t\t\t\tif (typeof exec === 'function') {\n\t\t\t\t\tif (exec.length > 2) {\n\t\t\t\t\t\treturn exec.call(self, schema, post, function (err, res) {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\treturn done(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpost = res;\n\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tpost = exec.call(self, schema, post);\n\t\t\t\t}\n\t\t\t\tdone();\n\t\t\t}, function (err) {\n\t\t\t\tcallback(err, post);\n\t\t\t});\n\t\t},\n\t\tasyncProperties: function (schema, post, callback) {\n\t\t\tif (!post || typeof post !== 'object') {\n\t\t\t\treturn callback(null, post);\n\t\t\t}\n\t\t\tvar self = this;\n\t\t\tvar properties = schema.properties;\n\n\t\t\tasync.series([\n\t\t\t\tfunction (next) {\n\t\t\t\t\tif (properties['*'] == null) {\n\t\t\t\t\t\treturn next();\n\t\t\t\t\t}\n\t\t\t\t\tvar globing = properties['*'];\n\t\t\t\t\tasync.eachSeries(Object.keys(post), function (i, next) {\n\t\t\t\t\t\tif (i in properties) {\n\t\t\t\t\t\t\treturn next();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself._deeperObject(i);\n\t\t\t\t\t\tself._asyncSanitize(globing, post[i], function (err, res) {\n\t\t\t\t\t\t\tif (err) { /* Error can safely be ignored here */ }\n\t\t\t\t\t\t\tif (typeof res !== 'undefined') {\n\t\t\t\t\t\t\t\tpost[i] = res;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself._back();\n\t\t\t\t\t\t\tnext();\n\t\t\t\t\t\t});\n\t\t\t\t\t}, next);\n\t\t\t\t},\n\t\t\t\tfunction (next) {\n\t\t\t\t\tasync.eachSeries(Object.keys(properties), function (i, next) {\n\t\t\t\t\t\tif (i === '*') {\n\t\t\t\t\t\t\treturn next();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself._deeperObject(i);\n\t\t\t\t\t\tself._asyncSanitize(properties[i], post[i], function (err, res) {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\treturn next(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (typeof res !== 'undefined') {\n\t\t\t\t\t\t\t\tpost[i] = res;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself._back();\n\t\t\t\t\t\t\tnext();\n\t\t\t\t\t\t});\n\t\t\t\t\t}, next);\n\t\t\t\t}\n\t\t\t], function (err) {\n\t\t\t\treturn callback(err, post);\n\t\t\t});\n\t\t},\n\t\tasyncItems: function (schema, post, callback) {\n\t\t\tif (!(schema.items instanceof Object) || !(post instanceof Object)) {\n\t\t\t\treturn callback(null, post);\n\t\t\t}\n\t\t\tvar self = this;\n\t\t\tvar items = schema.items;\n\t\t\tif (_typeIs.array(items) && _typeIs.array(post)) {\n\t\t\t\tvar minLength = items.length < post.length ? items.length : post.length;\n\t\t\t\tasync.timesSeries(minLength, function (i, next) {\n\t\t\t\t\tself._deeperArray(i);\n\t\t\t\t\tself._asyncSanitize(items[i], post[i], function (err, res) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn next(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpost[i] = res;\n\t\t\t\t\t\tself._back();\n\t\t\t\t\t\tnext();\n\t\t\t\t\t});\n\t\t\t\t}, function (err) {\n\t\t\t\t\tcallback(err, post);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tasync.eachSeries(Object.keys(post), function (key, next) {\n\t\t\t\t\tself._deeperArray(key);\n\t\t\t\t\tself._asyncSanitize(items, post[key], function (err, res) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn next();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpost[key] = res;\n\t\t\t\t\t\tself._back();\n\t\t\t\t\t\tnext();\n\t\t\t\t\t});\n\t\t\t\t}, function (err) {\n\t\t\t\t\tcallback(err, post);\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn post;\n\t\t}\n\t};\n\n\t// Sanitization Class --------------------------------------------------------\n\t// inherits from Inspection class (actually we just call Inspection\n\t// constructor with the new context, because its prototype is empty\n\tfunction Sanitization(schema, custom) {\n\t\tInspection.prototype.constructor.call(this, schema, _merge(Sanitization.custom, custom));\n\t\tvar _reporting = [];\n\n\t\tthis._basicFields = Object.keys(_sanitizationAttribut);\n\t\tthis._customFields = Object.keys(this._custom);\n\t\tthis.origin = null;\n\n\t\tthis.report = function (message) {\n\t\t\tvar newNot = {\n\t\t\t\t\tmessage: message || 'was sanitized',\n\t\t\t\t\tproperty: this.userAlias ? (this.userAlias + ' (' + this._dumpStack() + ')') : this._dumpStack()\n\t\t\t};\n\t\t\tif (!_reporting.some(function (e) { return e.property === newNot.property; })) {\n\t\t\t\t_reporting.push(newNot);\n\t\t\t}\n\t\t};\n\n\t\tthis.result = function (data) {\n\t\t\treturn {\n\t\t\t\tdata: data,\n\t\t\t\treporting: _reporting,\n\t\t\t\tformat: function () {\n\t\t\t\t\treturn this.reporting.map(function (i) {\n\t\t\t\t\t\treturn 'Property ' + i.property + ' ' + i.message;\n\t\t\t\t\t}).join('\\n');\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t}\n\n\t_extend(Sanitization.prototype, _sanitizationAttribut);\n\t_extend(Sanitization.prototype, _asyncSanitizationAttribut);\n\t_extend(Sanitization, new Customisable());\n\n\n\tSanitization.prototype.sanitize = function (post, callback) {\n\t\tthis.origin = post;\n\t\tif (typeof callback === 'function') {\n\t\t\tvar self = this;\n\t\t\treturn this._asyncSanitize(this._schema, post, function (err, data) {\n\t\t\t\tself.origin = null;\n\t\t\t\tcallback(err, self.result(data));\n\t\t\t});\n\t\t}\n\t\tvar data = this._sanitize(this._schema, post);\n\t\tthis.origin = null;\n\t\treturn this.result(data);\n\t};\n\n\tSanitization.prototype._sanitize = function (schema, post) {\n\t\tthis.userAlias = schema.alias || null;\n\t\tthis._basicFields.forEach(function (i) {\n\t\t\tif ((i in schema || i === 'optional') && typeof this[i] === 'function') {\n\t\t\t\tpost = this[i](schema, post);\n\t\t\t}\n\t\t}, this);\n\t\tthis._customFields.forEach(function (i) {\n\t\t\tif (i in schema && typeof this._custom[i] === 'function') {\n\t\t\t\tpost = this._custom[i].call(this, schema, post);\n\t\t\t}\n\t\t}, this);\n\t\treturn post;\n\t};\n\n\tSanitization.prototype._asyncSanitize = function (schema, post, callback) {\n\t\tvar self = this;\n\t\tthis.userAlias = schema.alias || null;\n\n\t\tasync.waterfall([\n\t\t\tfunction (next) {\n\t\t\t\tasync.reduce(self._basicFields, post, function (value, i, next) {\n\t\t\t\t\tasync.nextTick(function () {\n\t\t\t\t\t\tif ((i in schema || i === 'optional') && typeof self[i] === 'function') {\n\t\t\t\t\t\t\tif (self[i].length > 2) {\n\t\t\t\t\t\t\t\treturn self[i](schema, value, next);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvalue = self[i](schema, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnext(null, value);\n\t\t\t\t\t});\n\t\t\t\t}, next);\n\t\t\t},\n\t\t\tfunction (inter, next) {\n\t\t\t\tasync.reduce(self._customFields, inter, function (value, i, next) {\n\t\t\t\t\tasync.nextTick(function () {\n\t\t\t\t\t\tif (i in schema && typeof self._custom[i] === 'function') {\n\t\t\t\t\t\t\tif (self._custom[i].length > 2) {\n\t\t\t\t\t\t\t\treturn self._custom[i].call(self, schema, value, next);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvalue = self._custom[i].call(self, schema, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnext(null, value);\n\t\t\t\t\t});\n\t\t\t\t}, next);\n\t\t\t}\n\t\t], callback);\n\t};\n\n\t// ---------------------------------------------------------------------------\n\n\tvar INT_MIN = -2147483648;\n\tvar INT_MAX = 2147483647;\n\n\tvar _rand = {\n\t\tint: function (min, max) {\n\t\t\treturn min + (0 | Math.random() * (max - min + 1));\n\t\t},\n\t\tfloat: function (min, max) {\n\t\t\treturn (Math.random() * (max - min) + min);\n\t\t},\n\t\tbool: function () {\n\t\t\treturn (Math.random() > 0.5);\n\t\t},\n\t\tchar: function (min, max) {\n\t\t\treturn String.fromCharCode(this.int(min, max));\n\t\t},\n\t\tfromList: function (list) {\n\t\t\treturn list[this.int(0, list.length - 1)];\n\t\t}\n\t};\n\n\tvar _formatSample = {\n\t\t'date-time': function () {\n\t\t\treturn new Date().toISOString();\n\t\t},\n\t\t'date': function () {\n\t\t\treturn new Date().toISOString().replace(/T.*$/, '');\n\t\t},\n\t\t'time': function () {\n\t\t\treturn new Date().toLocaleTimeString({}, { hour12: false });\n\t\t},\n\t\t'color': function (min, max) {\n\t\t\tvar s = '#';\n\t\t\tif (min < 1) {\n\t\t\t\tmin = 1;\n\t\t\t}\n\t\t\tfor (var i = 0, l = _rand.int(min, max); i < l; i++) {\n\t\t\t\ts += _rand.fromList('0123456789abcdefABCDEF');\n\t\t\t}\n\t\t\treturn s;\n\t\t},\n\t\t'numeric': function () {\n\t\t\treturn '' + _rand.int(0, INT_MAX);\n\t\t},\n\t\t'integer': function () {\n\t\t\tif (_rand.bool() === true) {\n\t\t\t\treturn '-' + this.numeric();\n\t\t\t}\n\t\t\treturn this.numeric();\n\t\t},\n\t\t'decimal': function () {\n\t\t\treturn this.integer() + '.' + this.numeric();\n\t\t},\n\t\t'alpha': function (min, max) {\n\t\t\tvar s = '';\n\t\t\tif (min < 1) {\n\t\t\t\tmin = 1;\n\t\t\t}\n\t\t\tfor (var i = 0, l = _rand.int(min, max); i < l; i++) {\n\t\t\t\ts += _rand.fromList('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');\n\t\t\t}\n\t\t\treturn s;\n\t\t},\n\t\t'alphaNumeric': function (min, max) {\n\t\t\tvar s = '';\n\t\t\tif (min < 1) {\n\t\t\t\tmin = 1;\n\t\t\t}\n\t\t\tfor (var i = 0, l = _rand.int(min, max); i < l; i++) {\n\t\t\t\ts += _rand.fromList('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789');\n\t\t\t}\n\t\t\treturn s;\n\t\t},\n\t\t'alphaDash': function (min, max) {\n\t\t\tvar s = '';\n\t\t\tif (min < 1) {\n\t\t\t\tmin = 1;\n\t\t\t}\n\t\t\tfor (var i = 0, l = _rand.int(min, max); i < l; i++) {\n\t\t\t\ts += _rand.fromList('_-abcdefghijklmnopqrstuvwxyz_-ABCDEFGHIJKLMNOPQRSTUVWXYZ_-0123456789_-');\n\t\t\t}\n\t\t\treturn s;\n\t\t},\n\t\t'javascript': function (min, max) {\n\t\t\tvar s = _rand.fromList('_$abcdefghijklmnopqrstuvwxyz_$ABCDEFGHIJKLMNOPQRSTUVWXYZ_$');\n\t\t\tfor (var i = 0, l = _rand.int(min, max - 1); i < l; i++) {\n\t\t\t\ts += _rand.fromList('_$abcdefghijklmnopqrstuvwxyz_$ABCDEFGHIJKLMNOPQRSTUVWXYZ_$0123456789_$');\n\t\t\t}\n\t\t\treturn s;\n\t\t}\n\t};\n\n\tfunction _getLimits(schema) {\n\t\tvar min = INT_MIN;\n\t\tvar max = INT_MAX;\n\n\t\tif (schema.gte != null) {\n\t\t\tmin = schema.gte;\n\t\t}\n\t\telse if (schema.gt != null) {\n\t\t\tmin = schema.gt + 1;\n\t\t}\n\t\tif (schema.lte != null) {\n\t\t\tmax = schema.lte;\n\t\t}\n\t\telse if (schema.lt != null) {\n\t\t\tmax = schema.lt - 1;\n\t\t}\n\t\treturn { min: min, max: max };\n\t}\n\n\tvar _typeGenerator = {\n\t\tstring: function (schema) {\n\t\t\tif (schema.eq != null) {\n\t\t\t\treturn schema.eq;\n\t\t\t}\n\t\t\tvar s = '';\n\t\t\tvar minLength = schema.minLength != null ? schema.minLength : 0;\n\t\t\tvar maxLength = schema.maxLength != null ? schema.maxLength : 32;\n\t\t\tif (typeof schema.pattern === 'string' && typeof _formatSample[schema.pattern] === 'function') {\n\t\t\t\treturn _formatSample[schema.pattern](minLength, maxLength);\n\t\t\t}\n\n\t\t\tvar l = schema.exactLength != null ? schema.exactLength : _rand.int(minLength, maxLength);\n\t\t\tfor (var i = 0; i < l; i++) {\n\t\t\t\ts += _rand.char(32, 126);\n\t\t\t}\n\t\t\treturn s;\n\t\t},\n\t\tnumber: function (schema) {\n\t\t\tif (schema.eq != null) {\n\t\t\t\treturn schema.eq;\n\t\t\t}\n\t\t\tvar limit = _getLimits(schema);\n\t\t\tvar n = _rand.float(limit.min, limit.max);\n\t\t\tif (schema.ne != null) {\n\t\t\t\tvar ne = _typeIs.array(schema.ne) ? schema.ne : [schema.ne];\n\t\t\t\twhile (ne.indexOf(n) !== -1) {\n\t\t\t\t\tn = _rand.float(limit.min, limit.max);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn n;\n\t\t},\n\t\tinteger: function (schema) {\n\t\t\tif (schema.eq != null) {\n\t\t\t\treturn schema.eq;\n\t\t\t}\n\t\t\tvar limit = _getLimits(schema);\n\t\t\tvar n = _rand.int(limit.min, limit.max);\n\t\t\tif (schema.ne != null) {\n\t\t\t\tvar ne = _typeIs.array(schema.ne) ? schema.ne : [schema.ne];\n\t\t\t\twhile (ne.indexOf(n) !== -1) {\n\t\t\t\t\tn = _rand.int(limit.min, limit.max);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn n;\n\t\t},\n\t\tboolean: function (schema) {\n\t\t\tif (schema.eq != null) {\n\t\t\t\treturn schema.eq;\n\t\t\t}\n\t\t\treturn _rand.bool();\n\t\t},\n\t\t\"null\": function (schema) {\n\t\t\treturn null;\n\t\t},\n\t\tdate: function (schema) {\n\t\t\tif (schema.eq != null) {\n\t\t\t\treturn schema.eq;\n\t\t\t}\n\t\t\treturn new Date();\n\t\t},\n\t\tobject: function (schema) {\n\t\t\tvar o = {};\n\t\t\tvar prop = schema.properties || {};\n\n\t\t\tfor (var key in prop) {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(prop, key)) {\n\t\t\t\t\tif (prop[key].optional === true && _rand.bool() === true) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (key !== '*') {\n\t\t\t\t\t\to[key] = this.generate(prop[key]);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvar rk = '__random_key_';\n\t\t\t\t\t\tvar randomKey = rk + 0;\n\t\t\t\t\t\tvar n = _rand.int(1, 9);\n\t\t\t\t\t\tfor (var i = 1; i <= n; i++) {\n\t\t\t\t\t\t\tif (!(randomKey in prop)) {\n\t\t\t\t\t\t\t\to[randomKey] = this.generate(prop[key]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\trandomKey = rk + i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn o;\n\t\t},\n\t\tarray: function (schema) {\n\t\t\tvar self = this;\n\t\t\tvar items = schema.items || {};\n\t\t\tvar minLength = schema.minLength != null ? schema.minLength : 0;\n\t\t\tvar maxLength = schema.maxLength != null ? schema.maxLength : 16;\n\t\t\tvar type;\n\t\t\tvar candidate;\n\t\t\tvar size;\n\t\t\tvar i;\n\n\t\t\tif (_typeIs.array(items)) {\n\t\t\t\tsize = items.length;\n\t\t\t\tif (schema.exactLength != null) {\n\t\t\t\t\tsize = schema.exactLength;\n\t\t\t\t}\n\t\t\t\telse if (size < minLength) {\n\t\t\t\t\tsize = minLength;\n\t\t\t\t}\n\t\t\t\telse if (size > maxLength) {\n\t\t\t\t\tsize = maxLength;\n\t\t\t\t}\n\t\t\t\tcandidate = new Array(size);\n\t\t\t\ttype = null;\n\t\t\t\tfor (i = 0; i < size; i++) {\n\t\t\t\t\ttype = items[i].type || 'any';\n\t\t\t\t\tif (_typeIs.array(type)) {\n\t\t\t\t\t\ttype = type[_rand.int(0, type.length - 1)];\n\t\t\t\t\t}\n\t\t\t\t\tcandidate[i] = self[type](items[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsize = schema.exactLength != null ? schema.exactLength : _rand.int(minLength, maxLength);\n\t\t\t\tcandidate = new Array(size);\n\t\t\t\ttype = items.type || 'any';\n\t\t\t\tif (_typeIs.array(type)) {\n\t\t\t\t\ttype = type[_rand.int(0, type.length - 1)];\n\t\t\t\t}\n\t\t\t\tfor (i = 0; i < size; i++) {\n\t\t\t\t\tcandidate[i] = self[type](items);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn candidate;\n\t\t},\n\t\tany: function (schema) {\n\t\t\tvar fields = Object.keys(_typeGenerator);\n\t\t\tvar i = fields[_rand.int(0, fields.length - 2)];\n\t\t\treturn this[i](schema);\n\t\t}\n\t};\n\n\t// CandidateGenerator Class (Singleton) --------------------------------------\n\tfunction CandidateGenerator() {\n\t\t// Maybe extends Inspection class too ?\n\t}\n\n\t_extend(CandidateGenerator.prototype, _typeGenerator);\n\n\tvar _instance = null;\n\tCandidateGenerator.instance = function () {\n\t\tif (!(_instance instanceof CandidateGenerator)) {\n\t\t\t_instance = new CandidateGenerator();\n\t\t}\n\t\treturn _instance;\n\t};\n\n\tCandidateGenerator.prototype.generate = function (schema) {\n\t\tvar type = schema.type || 'any';\n\t\tif (_typeIs.array(type)) {\n\t\t\ttype = type[_rand.int(0, type.length - 1)];\n\t\t}\n\t\treturn this[type](schema);\n\t};\n\n// Exports ---------------------------------------------------------------------\n\tvar SchemaInspector = {};\n\n\t// if server-side (node.js) else client-side\n\tif ( true && module.exports) {\n\t\tmodule.exports = SchemaInspector;\n\t}\n\telse {\n\t\twindow.SchemaInspector = SchemaInspector;\n\t}\n\n\tSchemaInspector.newSanitization = function (schema, custom) {\n\t\treturn new Sanitization(schema, custom);\n\t};\n\n\tSchemaInspector.newValidation = function (schema, custom) {\n\t\treturn new Validation(schema, custom);\n\t};\n\n\tSchemaInspector.Validation = Validation;\n\tSchemaInspector.Sanitization = Sanitization;\n\n\tSchemaInspector.sanitize = function (schema, post, custom, callback) {\n\t\tif (arguments.length === 3 && typeof custom === 'function') {\n\t\t\tcallback = custom;\n\t\t\tcustom = null;\n\t\t}\n\t\treturn new Sanitization(schema, custom).sanitize(post, callback);\n\t};\n\n\tSchemaInspector.validate = function (schema, candidate, custom, callback) {\n\t\tif (arguments.length === 3 && typeof custom === 'function') {\n\t\t\tcallback = custom;\n\t\t\tcustom = null;\n\t\t}\n\t\treturn new Validation(schema, custom).validate(candidate, callback);\n\t};\n\n\tSchemaInspector.generate = function (schema, n) {\n\t\tif (typeof n === 'number') {\n\t\t\tvar r = new Array(n);\n\t\t\tfor (var i = 0; i < n; i++) {\n\t\t\t\tr[i] = CandidateGenerator.instance().generate(schema);\n\t\t\t}\n\t\t\treturn r;\n\t\t}\n\t\treturn CandidateGenerator.instance().generate(schema);\n\t};\n})();\n\n\n//# sourceURL=webpack:///./node_modules/schema-inspector/lib/schema-inspector.js?");

/***/ }),

/***/ 0:
/*!******************************!*\
  !*** multi ./dist/window.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./dist/window.js */\"./dist/window.js\");\n\n\n//# sourceURL=webpack:///multi_./dist/window.js?");

/***/ })

/******/ });