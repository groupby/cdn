let t,e=[];const o=t=>(e.push(t),()=>{e=e.filter((e=>e!==t))}),n=t=>{const o=window.location;e.forEach((e=>{e(o,t)}))},a=()=>(t||(window.addEventListener("popstate",(()=>n("popstate"))),window.history.pushState=new Proxy(window.history.pushState,{apply:function(t,e,o){return n("pushState"),Reflect.apply(t,e,o)}}),t={subscribe:o}),t);let s,l,r,c;const i=t=>{const{customerId:e,listenToPushState:o,overrideUrl:n}=t;l=e,c=o??!1,r=n??"https://www.gbi-not-defined.com";s={trackEvent:t=>{console.log("customerId:",l),console.log("listenToPushState:",c),console.log("url:",r),console.log("eventType:",(null==t?void 0:t.type)??"-"),console.log("metadata:",(null==t?void 0:t.metadata)?"metadata exists":"-"),(async(t,e)=>{const{customerId:o,url:n}=e;(await fetch(n,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({customer:o,event:t})})).json()})({type:(null==t?void 0:t.type)??"other",metadata:(null==t?void 0:t.metadata)??{message:`Sending an event... for "${l}" customer`}},{customerId:l,url:r})}},o&&a().subscribe(((t,e)=>{null==s||s.trackEvent({type:"location-changed",metadata:{location:t,source:e}})}))},d={registerGBIUniversalEventTracker:t=>(s||i(t),s)};export{d as default};
